[
  {
    "id": 0,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "how many singers do we have ?",
        "db_id": "concert_singer",
        "query": "SELECT count(*) FROM singer",
        "question": "How many singers do we have?",
        "sql": "select count ( * ) from singer",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer"
        ],
        "partial_match": [
          "singer_in_concert"
        ]
      }
    ]
  },
  {
    "id": 1,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what is the total number of singers ?",
        "db_id": "concert_singer",
        "query": "SELECT count(*) FROM singer",
        "question": "What is the total number of singers?",
        "sql": "select count ( * ) from singer",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer"
        ],
        "partial_match": [
          "singer_in_concert"
        ]
      }
    ]
  },
  {
    "id": 2,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "show name , country , age for all singers ordered by age from the oldest to the youngest .",
        "db_id": "concert_singer",
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "sql": "select singer@name , singer@country , singer@age from singer order by singer@age desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium@name",
          "singer",
          "singer@name",
          "singer@country",
          "singer@age"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer@song_name",
          "concert@concert_name"
        ]
      }
    ]
  },
  {
    "id": 3,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what are the names , countries , and ages for every singer in descending order of age ?",
        "db_id": "concert_singer",
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "sql": "select singer@name , singer@country , singer@age from singer order by singer@age desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium@name",
          "singer",
          "singer@name",
          "singer@country",
          "singer@age"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer@song_name",
          "concert@concert_name"
        ]
      }
    ]
  },
  {
    "id": 4,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what is the average , minimum , and maximum age of all singers from france ?",
        "db_id": "concert_singer",
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "sql": "select avg ( singer@age ) , min ( singer@age ) , max ( singer@age ) from singer where singer@country = 'value'",
        "value_match": [
          "singer@country"
        ],
        "value_alignment": [
          [
            [
              "france",
              "france"
            ]
          ]
        ],
        "exact_match": [
          "stadium@average",
          "singer",
          "singer@age"
        ],
        "partial_match": [
          "singer_in_concert"
        ]
      }
    ]
  },
  {
    "id": 5,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what is the average , minimum , and maximum age for all french singers ?",
        "db_id": "concert_singer",
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "sql": "select avg ( singer@age ) , min ( singer@age ) , max ( singer@age ) from singer where singer@country = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium@average",
          "singer",
          "singer@age"
        ],
        "partial_match": [
          "singer_in_concert"
        ]
      }
    ]
  },
  {
    "id": 6,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "show the name and the release year of the song by the youngest singer .",
        "db_id": "concert_singer",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "sql": "select singer@song_name , singer@song_release_year from singer order by singer@age limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium@name",
          "singer",
          "singer@name",
          "singer@song_release_year",
          "concert@year"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer@song_name",
          "concert@concert_name"
        ]
      }
    ]
  },
  {
    "id": 7,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what are the names and release years for all the songs of the youngest singer ?",
        "db_id": "concert_singer",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "sql": "select singer@song_name , singer@song_release_year from singer order by singer@age limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium@name",
          "singer",
          "singer@name",
          "singer@song_release_year",
          "concert@year"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer@song_name",
          "concert@concert_name"
        ]
      }
    ]
  },
  {
    "id": 8,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what are all distinct countries where singers above age 20 are from ?",
        "db_id": "concert_singer",
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "question": "What are all distinct countries where singers above age 20 are from?",
        "sql": "select distinct singer@country from singer where singer@age > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@country",
          "singer@age"
        ],
        "partial_match": [
          "singer_in_concert"
        ]
      }
    ]
  },
  {
    "id": 9,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what are the different countries with singers above age 20 ?",
        "db_id": "concert_singer",
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "question": "What are  the different countries with singers above age 20?",
        "sql": "select distinct singer@country from singer where singer@age > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@country",
          "singer@age"
        ],
        "partial_match": [
          "singer_in_concert"
        ]
      }
    ]
  },
  {
    "id": 10,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "show all countries and the number of singers in each country .",
        "db_id": "concert_singer",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "Show all countries and the number of singers in each country.",
        "sql": "select singer@country , count ( * ) from singer group by singer@country",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@country"
        ],
        "partial_match": [
          "singer_in_concert"
        ]
      }
    ]
  },
  {
    "id": 11,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "how many singers are from each country ?",
        "db_id": "concert_singer",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "How many singers are from each country?",
        "sql": "select singer@country , count ( * ) from singer group by singer@country",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@country"
        ],
        "partial_match": [
          "singer_in_concert"
        ]
      }
    ]
  },
  {
    "id": 12,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "list all song names by singers above the average age .",
        "db_id": "concert_singer",
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "question": "List all song names by singers above the average age.",
        "sql": "select singer@song_name from singer where singer@age > ( select avg ( singer@age ) from singer )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium@name",
          "stadium@average",
          "singer",
          "singer@name",
          "singer@age"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer@song_name",
          "concert@concert_name"
        ]
      }
    ]
  },
  {
    "id": 13,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what are all the song names by singers who are older than average ?",
        "db_id": "concert_singer",
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "question": "What are all the song names by singers who are older than average?",
        "sql": "select singer@song_name from singer where singer@age > ( select avg ( singer@age ) from singer )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium@name",
          "stadium@average",
          "singer",
          "singer@name"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer@song_name",
          "concert@concert_name"
        ]
      }
    ]
  },
  {
    "id": 14,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "show location and name for all stadiums with a capacity between 5000 and 10000 .",
        "db_id": "concert_singer",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "sql": "select stadium@location , stadium@name from stadium where stadium@capacity between 'value' and 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium",
          "stadium@location",
          "stadium@name",
          "stadium@capacity",
          "singer@name"
        ],
        "partial_match": [
          "singer@song_name",
          "concert@concert_name"
        ]
      }
    ]
  },
  {
    "id": 15,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what are the locations and names of all stations with capacity between 5000 and 10000 ?",
        "db_id": "concert_singer",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "sql": "select stadium@location , stadium@name from stadium where stadium@capacity between 'value' and 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium@location",
          "stadium@name",
          "stadium@capacity",
          "singer@name"
        ],
        "partial_match": [
          "singer@song_name",
          "concert@concert_name"
        ]
      }
    ]
  },
  {
    "id": 16,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what is the maximum capacity and the average of all stadiums ?",
        "db_id": "concert_singer",
        "query": "select max(capacity), average from stadium",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "sql": "select max ( stadium@capacity ) , stadium@average from stadium",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium",
          "stadium@capacity",
          "stadium@average"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 17,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what is the average and maximum capacities for all stadiums ?",
        "db_id": "concert_singer",
        "query": "select avg(capacity) ,  max(capacity) from stadium",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "sql": "select avg ( stadium@capacity ) , max ( stadium@capacity ) from stadium",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium",
          "stadium@capacity",
          "stadium@average"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 18,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what is the name and capacity for the stadium with highest average attendance ?",
        "db_id": "concert_singer",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "sql": "select stadium@name , stadium@capacity from stadium order by stadium@average desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium",
          "stadium@name",
          "stadium@capacity",
          "stadium@highest",
          "stadium@average",
          "singer@name"
        ],
        "partial_match": [
          "singer@song_name",
          "concert@concert_name"
        ]
      }
    ]
  },
  {
    "id": 19,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what is the name and capacity for the stadium with the highest average attendance ?",
        "db_id": "concert_singer",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "sql": "select stadium@name , stadium@capacity from stadium order by stadium@average desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium",
          "stadium@name",
          "stadium@capacity",
          "stadium@highest",
          "stadium@average",
          "singer@name"
        ],
        "partial_match": [
          "singer@song_name",
          "concert@concert_name"
        ]
      }
    ]
  },
  {
    "id": 20,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "how many concerts are there in year 2014 or 2015 ?",
        "db_id": "concert_singer",
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "question": "How many concerts are there in year 2014 or 2015?",
        "sql": "select count ( * ) from concert where concert@year = 'value' or concert@year = 'value'",
        "value_match": [
          "singer@song_release_year",
          "concert@year"
        ],
        "value_alignment": [
          [
            [
              "2014",
              "2014"
            ]
          ],
          [
            [
              "2015",
              "2015"
            ]
          ]
        ],
        "exact_match": [
          "concert",
          "concert@year"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer_in_concert@concert_id",
          "singer@song_release_year",
          "concert@concert_id",
          "concert@concert_name"
        ]
      }
    ]
  },
  {
    "id": 21,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "how many concerts occurred in 2014 or 2015 ?",
        "db_id": "concert_singer",
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "question": "How many concerts occurred in 2014 or 2015?",
        "sql": "select count ( * ) from concert where concert@year = 'value' or concert@year = 'value'",
        "value_match": [
          "singer@song_release_year",
          "concert@year"
        ],
        "value_alignment": [
          [
            [
              "2014",
              "2014"
            ]
          ],
          [
            [
              "2015",
              "2015"
            ]
          ]
        ],
        "exact_match": [
          "concert"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer_in_concert@concert_id",
          "concert@concert_id",
          "concert@concert_name"
        ]
      }
    ]
  },
  {
    "id": 22,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "show the stadium name and the number of concerts in each stadium .",
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "sql": "select stadium@name , count ( * ) from concert join stadium on concert@stadium_id = stadium@stadium_id group by concert@stadium_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium",
          "stadium@name",
          "singer@name",
          "concert",
          "concert@concert_name"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer_in_concert@concert_id",
          "singer@song_name",
          "concert@concert_id"
        ]
      }
    ]
  },
  {
    "id": 23,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "for each stadium , how many concerts play there ?",
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "For each stadium, how many concerts play there?",
        "sql": "select stadium@name , count ( * ) from concert join stadium on concert@stadium_id = stadium@stadium_id group by concert@stadium_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium",
          "concert"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer_in_concert@concert_id",
          "concert@concert_id",
          "concert@concert_name"
        ]
      }
    ]
  },
  {
    "id": 24,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "show the stadium name and capacity with most number of concerts in year 2014 or after .",
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "sql": "select stadium@name , stadium@capacity from concert join stadium on concert@stadium_id = stadium@stadium_id where concert@year >= 'value' group by stadium@stadium_id order by count ( * ) desc limit 1",
        "value_match": [
          "singer@song_release_year",
          "concert@year"
        ],
        "value_alignment": [
          [
            [
              "2014",
              "2014"
            ]
          ]
        ],
        "exact_match": [
          "stadium",
          "stadium@name",
          "stadium@capacity",
          "singer@name",
          "concert",
          "concert@concert_name",
          "concert@year"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer_in_concert@concert_id",
          "singer@song_name",
          "singer@song_release_year",
          "concert@concert_id"
        ]
      }
    ]
  },
  {
    "id": 25,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what is the name and capacity of the stadium with the most concerts after 2013 ?",
        "db_id": "concert_singer",
        "query": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "sql": "select stadium@name , stadium@capacity from concert join stadium on concert@stadium_id = stadium@stadium_id where concert@year > 'value' group by stadium@stadium_id order by count ( * ) desc limit 1",
        "value_match": [
          "singer@song_release_year"
        ],
        "value_alignment": [
          [
            [
              "2013",
              "2013"
            ]
          ]
        ],
        "exact_match": [
          "stadium",
          "stadium@name",
          "stadium@capacity",
          "singer@name",
          "concert",
          "concert@concert_name"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer_in_concert@concert_id",
          "singer@song_name",
          "concert@concert_id"
        ]
      }
    ]
  },
  {
    "id": 26,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "which year has most number of concerts ?",
        "db_id": "concert_singer",
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year has most number of concerts?",
        "sql": "select concert@year from concert group by concert@year order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "concert",
          "concert@year"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer_in_concert@concert_id",
          "singer@song_release_year",
          "concert@concert_id",
          "concert@concert_name"
        ]
      }
    ]
  },
  {
    "id": 27,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what is the year that had the most concerts ?",
        "db_id": "concert_singer",
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the year that had the most concerts?",
        "sql": "select concert@year from concert group by concert@year order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "concert",
          "concert@year"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer_in_concert@concert_id",
          "singer@song_release_year",
          "concert@concert_id",
          "concert@concert_name"
        ]
      }
    ]
  },
  {
    "id": 28,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "show the stadium names without any concert .",
        "db_id": "concert_singer",
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "Show the stadium names without any concert.",
        "sql": "select stadium@name from stadium where stadium@stadium_id not in ( select concert@stadium_id from concert )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium",
          "stadium@name",
          "singer@name",
          "concert",
          "concert@concert_name"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer_in_concert@concert_id",
          "singer@song_name",
          "concert@concert_id"
        ]
      }
    ]
  },
  {
    "id": 29,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what are the names of the stadiums without any concerts ?",
        "db_id": "concert_singer",
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "What are the names of the stadiums without any concerts?",
        "sql": "select stadium@name from stadium where stadium@stadium_id not in ( select concert@stadium_id from concert )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium",
          "stadium@name",
          "singer@name",
          "concert",
          "concert@concert_name"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer_in_concert@concert_id",
          "singer@song_name",
          "concert@concert_id"
        ]
      }
    ]
  },
  {
    "id": 30,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "show countries where a singer above age 40 and a singer below 30 are from .",
        "db_id": "concert_singer",
        "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "sql": "select singer@country from singer where singer@age > 'value' intersect select singer@country from singer where singer@age < 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer_in_concert",
          "singer",
          "singer@country",
          "singer@age"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 31,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "show names for all stadiums except for stadiums having a concert in year 2014 .",
        "db_id": "concert_singer",
        "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "sql": "select stadium@name from stadium except select stadium@name from concert join stadium on concert@stadium_id = stadium@stadium_id where concert@year = 'value'",
        "value_match": [
          "singer@song_release_year",
          "concert@year"
        ],
        "value_alignment": [
          [
            [
              "2014",
              "2014"
            ]
          ]
        ],
        "exact_match": [
          "stadium",
          "stadium@name",
          "singer@name",
          "concert",
          "concert@concert_name",
          "concert@year"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer_in_concert@concert_id",
          "singer@song_name",
          "singer@song_release_year",
          "concert@concert_id"
        ]
      }
    ]
  },
  {
    "id": 32,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what are the names of all stadiums that did not have a concert in 2014 ?",
        "db_id": "concert_singer",
        "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "question": "What are the names of all stadiums that did not have a concert in 2014?",
        "sql": "select stadium@name from stadium except select stadium@name from concert join stadium on concert@stadium_id = stadium@stadium_id where concert@year = 'value'",
        "value_match": [
          "singer@song_release_year",
          "concert@year"
        ],
        "value_alignment": [
          [
            [
              "2014",
              "2014"
            ]
          ]
        ],
        "exact_match": [
          "stadium",
          "stadium@name",
          "singer@name",
          "concert",
          "concert@concert_name"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer_in_concert@concert_id",
          "singer@song_name",
          "concert@concert_id"
        ]
      }
    ]
  },
  {
    "id": 33,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "show the name and theme for all concerts and the number of singers in each concert .",
        "db_id": "concert_singer",
        "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "sql": "select concert@concert_name , concert@theme , count ( * ) from singer_in_concert join concert on singer_in_concert@concert_id = concert@concert_id group by concert@concert_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer_in_concert",
          "singer_in_concert@concert_id",
          "stadium@name",
          "singer",
          "singer@name",
          "concert",
          "concert@concert_id",
          "concert@concert_name",
          "concert@theme"
        ],
        "partial_match": [
          "singer@song_name"
        ]
      }
    ]
  },
  {
    "id": 34,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what are the names , themes , and number of singers for every concert ?",
        "db_id": "concert_singer",
        "query": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "question": "What are the names , themes , and number of singers for every concert ?",
        "sql": "select concert@concert_name , concert@theme , count ( * ) from singer_in_concert join concert on singer_in_concert@concert_id = concert@concert_id group by concert@concert_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer_in_concert",
          "stadium@name",
          "singer",
          "singer@name",
          "concert",
          "concert@concert_name",
          "concert@theme"
        ],
        "partial_match": [
          "singer_in_concert@concert_id",
          "singer@song_name",
          "concert@concert_id"
        ]
      }
    ]
  },
  {
    "id": 35,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "list singer names and number of concerts for each singer .",
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "List singer names and number of concerts for each singer.",
        "sql": "select singer@name , count ( * ) from singer_in_concert join singer on singer_in_concert@singer_id = singer@singer_id group by singer@singer_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer_in_concert",
          "stadium@name",
          "singer",
          "singer@name",
          "concert",
          "concert@concert_name"
        ],
        "partial_match": [
          "singer_in_concert@concert_id",
          "singer@song_name",
          "concert@concert_id"
        ]
      }
    ]
  },
  {
    "id": 36,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what are the names of the singers and number of concerts for each person ?",
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "What are the names of the singers and number of concerts for each person?",
        "sql": "select singer@name , count ( * ) from singer_in_concert join singer on singer_in_concert@singer_id = singer@singer_id group by singer@singer_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer_in_concert",
          "stadium@name",
          "singer",
          "singer@name",
          "concert",
          "concert@concert_name"
        ],
        "partial_match": [
          "singer_in_concert@concert_id",
          "singer@song_name",
          "concert@concert_id"
        ]
      }
    ]
  },
  {
    "id": 37,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "list all singer names in concerts in year 2014 .",
        "db_id": "concert_singer",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "question": "List all singer names in concerts in year 2014.",
        "sql": "select singer@name from singer_in_concert join singer on singer_in_concert@singer_id = singer@singer_id join concert on singer_in_concert@concert_id = concert@concert_id where concert@year = 'value'",
        "value_match": [
          "singer@song_release_year",
          "concert@year"
        ],
        "value_alignment": [
          [
            [
              "2014",
              "2014"
            ]
          ]
        ],
        "exact_match": [
          "singer_in_concert",
          "stadium@name",
          "singer",
          "singer@name",
          "concert",
          "concert@concert_name",
          "concert@year"
        ],
        "partial_match": [
          "singer_in_concert@concert_id",
          "singer@song_name",
          "singer@song_release_year",
          "concert@concert_id"
        ]
      }
    ]
  },
  {
    "id": 38,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what are the names of the singers who performed in a concert in 2014 ?",
        "db_id": "concert_singer",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "sql": "select singer@name from singer_in_concert join singer on singer_in_concert@singer_id = singer@singer_id join concert on singer_in_concert@concert_id = concert@concert_id where concert@year = 'value'",
        "value_match": [
          "singer@song_release_year",
          "concert@year"
        ],
        "value_alignment": [
          [
            [
              "2014",
              "2014"
            ]
          ]
        ],
        "exact_match": [
          "singer_in_concert",
          "stadium@name",
          "singer",
          "singer@name",
          "concert",
          "concert@concert_name"
        ],
        "partial_match": [
          "singer_in_concert@concert_id",
          "singer@song_name",
          "concert@concert_id"
        ]
      }
    ]
  },
  {
    "id": 39,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what is the name and nation of the singer who have a song having 'hey ' in its name ?",
        "db_id": "concert_singer",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "sql": "select singer@name , singer@country from singer where singer@song_name like 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium@name",
          "singer",
          "singer@name",
          "singer@song_name",
          "concert@concert_name"
        ],
        "partial_match": [
          "singer_in_concert"
        ]
      }
    ]
  },
  {
    "id": 40,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what is the name and country of origin of every singer who has a song with the word 'hey ' in its title ?",
        "db_id": "concert_singer",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "sql": "select singer@name , singer@country from singer where singer@song_name like 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium@name",
          "singer",
          "singer@name",
          "singer@country"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer@song_name",
          "concert@concert_name"
        ]
      }
    ]
  },
  {
    "id": 41,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015 .",
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "sql": "select stadium@name , stadium@location from concert join stadium on concert@stadium_id = stadium@stadium_id where concert@year = 'value' intersect select stadium@name , stadium@location from concert join stadium on concert@stadium_id = stadium@stadium_id where concert@year = 'value'",
        "value_match": [
          "singer@song_release_year",
          "concert@year"
        ],
        "value_alignment": [
          [
            [
              "2014",
              "2014"
            ]
          ],
          [
            [
              "2015",
              "2015"
            ]
          ]
        ],
        "exact_match": [
          "stadium",
          "stadium@location",
          "stadium@name",
          "singer@name",
          "concert",
          "concert@concert_name",
          "concert@year"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer_in_concert@concert_id",
          "singer@song_name",
          "singer@song_release_year",
          "concert@concert_id"
        ]
      }
    ]
  },
  {
    "id": 42,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015 ?",
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "sql": "select stadium@name , stadium@location from concert join stadium on concert@stadium_id = stadium@stadium_id where concert@year = 'value' intersect select stadium@name , stadium@location from concert join stadium on concert@stadium_id = stadium@stadium_id where concert@year = 'value'",
        "value_match": [
          "singer@song_release_year",
          "concert@year"
        ],
        "value_alignment": [
          [
            [
              "2014",
              "2014"
            ]
          ],
          [
            [
              "2015",
              "2015"
            ]
          ]
        ],
        "exact_match": [
          "stadium",
          "stadium@location",
          "stadium@name",
          "singer@name",
          "concert",
          "concert@concert_name"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer_in_concert@concert_id",
          "singer@song_name",
          "concert@concert_id"
        ]
      }
    ]
  },
  {
    "id": 43,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "find the number of concerts happened in the stadium with the highest capacity .",
        "db_id": "concert_singer",
        "query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "sql": "select count ( * ) from concert where concert@stadium_id = ( select stadium@stadium_id from stadium order by stadium@capacity desc limit 1 )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium",
          "stadium@capacity",
          "stadium@highest",
          "concert"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer_in_concert@concert_id",
          "concert@concert_id",
          "concert@concert_name"
        ]
      }
    ]
  },
  {
    "id": 44,
    "database_id": "concert_singer",
    "interaction": [
      {
        "utterance": "what are the number of concerts that occurred in the stadium with the largest capacity ?",
        "db_id": "concert_singer",
        "query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "sql": "select count ( * ) from concert where concert@stadium_id = ( select stadium@stadium_id from stadium order by stadium@capacity desc limit 1 )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "stadium",
          "stadium@capacity",
          "concert"
        ],
        "partial_match": [
          "singer_in_concert",
          "singer_in_concert@concert_id",
          "concert@concert_id",
          "concert@concert_name"
        ]
      }
    ]
  },
  {
    "id": 45,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the number of pets whose weight is heavier than 10 .",
        "db_id": "pets_1",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "sql": "select count ( * ) from pets where pets@weight > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "pets@weight"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 46,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "how many pets have a greater weight than 10 ?",
        "db_id": "pets_1",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "How many pets have a greater weight than 10?",
        "sql": "select count ( * ) from pets where pets@weight > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "pets@weight"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 47,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the weight of the youngest dog .",
        "db_id": "pets_1",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "Find the weight of the youngest dog.",
        "sql": "select pets@weight from pets order by pets@pet_age limit 1",
        "value_match": [
          "pets@pettype"
        ],
        "value_alignment": [
          [
            [
              "dog",
              "dog"
            ]
          ]
        ],
        "exact_match": [
          "pets@weight"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 48,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "how much does the youngest dog weigh ?",
        "db_id": "pets_1",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "How much does the youngest dog weigh?",
        "sql": "select pets@weight from pets order by pets@pet_age limit 1",
        "value_match": [
          "pets@pettype"
        ],
        "value_alignment": [
          [
            [
              "dog",
              "dog"
            ]
          ]
        ],
        "exact_match": [],
        "partial_match": [
          "pets@weight"
        ]
      }
    ]
  },
  {
    "id": 49,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the maximum weight for each type of pet . list the maximum weight and pet type .",
        "db_id": "pets_1",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "sql": "select max ( pets@weight ) , pets@pettype from pets group by pets@pettype",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "pets@pettype",
          "pets@weight"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 50,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "list the maximum weight and type for each type of pet .",
        "db_id": "pets_1",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "List the maximum weight and type for each type of pet.",
        "sql": "select max ( pets@weight ) , pets@pettype from pets group by pets@pettype",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "pets@pettype",
          "pets@weight"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 51,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find number of pets owned by students who are older than 20 .",
        "db_id": "pets_1",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "Find number of pets owned by students who are older than 20.",
        "sql": "select count ( * ) from student join has_pet on student@stuid = has_pet@stuid where student@age > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "student"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 52,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "how many pets are owned by students that have an age greater than 20 ?",
        "db_id": "pets_1",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "How many pets are owned by students that have an age greater than 20?",
        "sql": "select count ( * ) from student join has_pet on student@stuid = has_pet@stuid where student@age > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "student",
          "student@age"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 53,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the number of dog pets that are raised by female students ( with sex f ) .",
        "db_id": "pets_1",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "sql": "select count ( * ) from student join has_pet on student@stuid = has_pet@stuid join pets on has_pet@petid = pets@petid where student@sex = 'value' and pets@pettype = 'value'",
        "value_match": [
          "pets@pettype",
          "student@sex"
        ],
        "value_alignment": [
          [
            [
              "dog",
              "dog"
            ]
          ],
          [
            [
              "f",
              "f"
            ]
          ]
        ],
        "exact_match": [
          "pets",
          "student"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 54,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "how many dog pets are raised by female students ?",
        "db_id": "pets_1",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "How many dog pets are raised by female students?",
        "sql": "select count ( * ) from student join has_pet on student@stuid = has_pet@stuid join pets on has_pet@petid = pets@petid where student@sex = 'value' and pets@pettype = 'value'",
        "value_match": [
          "pets@pettype"
        ],
        "value_alignment": [
          [
            [
              "dog",
              "dog"
            ]
          ]
        ],
        "exact_match": [
          "pets",
          "student"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 55,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the number of distinct type of pets .",
        "db_id": "pets_1",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "Find the number of distinct type of pets.",
        "sql": "select count ( distinct pets@pettype ) from pets",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets"
        ],
        "partial_match": [
          "pets@pettype"
        ]
      }
    ]
  },
  {
    "id": 56,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "how many different types of pet are there ?",
        "db_id": "pets_1",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "How many different types of pet are there?",
        "sql": "select count ( distinct pets@pettype ) from pets",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets"
        ],
        "partial_match": [
          "pets@pettype"
        ]
      }
    ]
  },
  {
    "id": 57,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the first name of students who have cat or dog pet .",
        "db_id": "pets_1",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "Find the first name of students who have cat or dog pet.",
        "sql": "select distinct student@fname from student join has_pet on student@stuid = has_pet@stuid join pets on pets@petid = has_pet@petid where pets@pettype = 'value' or pets@pettype = 'value'",
        "value_match": [
          "pets@pettype"
        ],
        "value_alignment": [
          [
            [
              "cat",
              "cat"
            ]
          ],
          [
            [
              "dog",
              "dog"
            ]
          ]
        ],
        "exact_match": [
          "pets",
          "student",
          "student@fname"
        ],
        "partial_match": [
          "student@lname"
        ]
      }
    ]
  },
  {
    "id": 58,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "what are the first names of every student who has a cat or dog as a pet ?",
        "db_id": "pets_1",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "sql": "select distinct student@fname from student join has_pet on student@stuid = has_pet@stuid join pets on pets@petid = has_pet@petid where pets@pettype = 'value' or pets@pettype = 'value'",
        "value_match": [
          "pets@pettype"
        ],
        "value_alignment": [
          [
            [
              "cat",
              "cat"
            ]
          ],
          [
            [
              "dog",
              "dog"
            ]
          ]
        ],
        "exact_match": [
          "pets",
          "student",
          "student@fname"
        ],
        "partial_match": [
          "student@lname"
        ]
      }
    ]
  },
  {
    "id": 59,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the first name of students who have both cat and dog pets .",
        "db_id": "pets_1",
        "query": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "question": "Find the first name of students who have both cat and dog pets .",
        "sql": "select student@fname from student join has_pet on student@stuid = has_pet@stuid join pets on pets@petid = has_pet@petid where pets@pettype = 'value' intersect select student@fname from student join has_pet on student@stuid = has_pet@stuid join pets on pets@petid = has_pet@petid where pets@pettype = 'value'",
        "value_match": [
          "pets@pettype"
        ],
        "value_alignment": [
          [
            [
              "cat",
              "cat"
            ]
          ],
          [
            [
              "dog",
              "dog"
            ]
          ]
        ],
        "exact_match": [
          "pets",
          "student",
          "student@fname"
        ],
        "partial_match": [
          "student@lname"
        ]
      }
    ]
  },
  {
    "id": 60,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "what are the students ' first names who have both cats and dogs as pets ?",
        "db_id": "pets_1",
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "sql": "select student@fname from student join has_pet on student@stuid = has_pet@stuid join pets on pets@petid = has_pet@petid where pets@pettype = 'value' intersect select student@fname from student join has_pet on student@stuid = has_pet@stuid join pets on pets@petid = has_pet@petid where pets@pettype = 'value'",
        "value_match": [
          "pets@pettype"
        ],
        "value_alignment": [
          [
            [
              "cat",
              "cat"
            ]
          ],
          [
            [
              "dog",
              "dog"
            ]
          ]
        ],
        "exact_match": [
          "pets",
          "student",
          "student@fname"
        ],
        "partial_match": [
          "student@lname"
        ]
      }
    ]
  },
  {
    "id": 61,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the major and age of students who do not have a cat pet .",
        "db_id": "pets_1",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the major and age of students who do not have a cat pet.",
        "sql": "select student@major , student@age from student where student@stuid not in ( select student@stuid from student join has_pet on student@stuid = has_pet@stuid join pets on pets@petid = has_pet@petid where pets@pettype = 'value' )",
        "value_match": [
          "pets@pettype"
        ],
        "value_alignment": [
          [
            [
              "cat",
              "cat"
            ]
          ]
        ],
        "exact_match": [
          "pets",
          "student",
          "student@age",
          "student@major"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 62,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "what major is every student who does not own a cat as a pet , and also how old are they ?",
        "db_id": "pets_1",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "sql": "select student@major , student@age from student where student@stuid not in ( select student@stuid from student join has_pet on student@stuid = has_pet@stuid join pets on pets@petid = has_pet@petid where pets@pettype = 'value' )",
        "value_match": [
          "pets@pettype"
        ],
        "value_alignment": [
          [
            [
              "cat",
              "cat"
            ]
          ]
        ],
        "exact_match": [
          "pets",
          "student",
          "student@major"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 63,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the id of students who do not have a cat pet .",
        "db_id": "pets_1",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "question": "Find the id of students who do not have a cat pet.",
        "sql": "select student@stuid from student except select student@stuid from student join has_pet on student@stuid = has_pet@stuid join pets on pets@petid = has_pet@petid where pets@pettype = 'value'",
        "value_match": [
          "pets@pettype"
        ],
        "value_alignment": [
          [
            [
              "cat",
              "cat"
            ]
          ]
        ],
        "exact_match": [
          "pets",
          "student"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 64,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "what are the ids of the students who do not own cats as pets ?",
        "db_id": "pets_1",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "question": "What are the ids of the students who do not own cats as pets?",
        "sql": "select student@stuid from student except select student@stuid from student join has_pet on student@stuid = has_pet@stuid join pets on pets@petid = has_pet@petid where pets@pettype = 'value'",
        "value_match": [
          "pets@pettype"
        ],
        "value_alignment": [
          [
            [
              "cat",
              "cat"
            ]
          ]
        ],
        "exact_match": [
          "pets",
          "student"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 65,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the first name and age of students who have a dog but do not have a cat as a pet .",
        "db_id": "pets_1",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "sql": "select student@fname , student@age from student join has_pet on student@stuid = has_pet@stuid join pets on pets@petid = has_pet@petid where pets@pettype = 'value' and student@stuid not in ( select student@stuid from student join has_pet on student@stuid = has_pet@stuid join pets on pets@petid = has_pet@petid where pets@pettype = 'value' )",
        "value_match": [
          "pets@pettype"
        ],
        "value_alignment": [
          [
            [
              "dog",
              "dog"
            ]
          ],
          [
            [
              "cat",
              "cat"
            ]
          ]
        ],
        "exact_match": [
          "pets",
          "student",
          "student@fname",
          "student@age"
        ],
        "partial_match": [
          "student@lname"
        ]
      }
    ]
  },
  {
    "id": 66,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "what is the first name of every student who has a dog but does not have a cat ?",
        "db_id": "pets_1",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "sql": "select student@fname , student@age from student join has_pet on student@stuid = has_pet@stuid join pets on pets@petid = has_pet@petid where pets@pettype = 'value' and student@stuid not in ( select student@stuid from student join has_pet on student@stuid = has_pet@stuid join pets on pets@petid = has_pet@petid where pets@pettype = 'value' )",
        "value_match": [
          "pets@pettype"
        ],
        "value_alignment": [
          [
            [
              "dog",
              "dog"
            ]
          ],
          [
            [
              "cat",
              "cat"
            ]
          ]
        ],
        "exact_match": [
          "student",
          "student@fname"
        ],
        "partial_match": [
          "student@lname"
        ]
      }
    ]
  },
  {
    "id": 67,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the type and weight of the youngest pet .",
        "db_id": "pets_1",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "Find the type and weight of the youngest pet.",
        "sql": "select pets@pettype , pets@weight from pets order by pets@pet_age limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "pets@weight"
        ],
        "partial_match": [
          "pets@pettype"
        ]
      }
    ]
  },
  {
    "id": 68,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "what type of pet is the youngest animal , and how much does it weigh ?",
        "db_id": "pets_1",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "sql": "select pets@pettype , pets@weight from pets order by pets@pet_age limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets"
        ],
        "partial_match": [
          "pets@pettype",
          "pets@weight"
        ]
      }
    ]
  },
  {
    "id": 69,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the id and weight of all pets whose age is older than 1 .",
        "db_id": "pets_1",
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "sql": "select pets@petid , pets@weight from pets where pets@pet_age > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "pets@weight",
          "student@age"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 70,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "what is the id and weight of every pet who is older than 1 ?",
        "db_id": "pets_1",
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "question": "What is the id and weight of every pet who is older than 1?",
        "sql": "select pets@petid , pets@weight from pets where pets@pet_age > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "pets@weight"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 71,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the average and maximum age for each type of pet .",
        "db_id": "pets_1",
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average and maximum age for each type of pet.",
        "sql": "select avg ( pets@pet_age ) , max ( pets@pet_age ) , pets@pettype from pets group by pets@pettype",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "student@age"
        ],
        "partial_match": [
          "pets@pettype"
        ]
      }
    ]
  },
  {
    "id": 72,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "what is the average and maximum age for each pet type ?",
        "db_id": "pets_1",
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average and maximum age for each pet type?",
        "sql": "select avg ( pets@pet_age ) , max ( pets@pet_age ) , pets@pettype from pets group by pets@pettype",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "student@age"
        ],
        "partial_match": [
          "pets@pettype"
        ]
      }
    ]
  },
  {
    "id": 73,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the average weight for each pet type .",
        "db_id": "pets_1",
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average weight for each pet type.",
        "sql": "select avg ( pets@weight ) , pets@pettype from pets group by pets@pettype",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "pets@weight"
        ],
        "partial_match": [
          "pets@pettype"
        ]
      }
    ]
  },
  {
    "id": 74,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "what is the average weight for each type of pet ?",
        "db_id": "pets_1",
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average weight for each type of pet?",
        "sql": "select avg ( pets@weight ) , pets@pettype from pets group by pets@pettype",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "pets@weight"
        ],
        "partial_match": [
          "pets@pettype"
        ]
      }
    ]
  },
  {
    "id": 75,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the first name and age of students who have a pet .",
        "db_id": "pets_1",
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "Find the first name and age of students who have a pet.",
        "sql": "select distinct student@fname , student@age from student join has_pet on student@stuid = has_pet@stuid",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "student",
          "student@fname",
          "student@age"
        ],
        "partial_match": [
          "student@lname"
        ]
      }
    ]
  },
  {
    "id": 76,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "what are the different first names and ages of the students who do have pets ?",
        "db_id": "pets_1",
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "What are the different first names and ages of the students who do have pets?",
        "sql": "select distinct student@fname , student@age from student join has_pet on student@stuid = has_pet@stuid",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "student",
          "student@fname",
          "student@age"
        ],
        "partial_match": [
          "student@lname"
        ]
      }
    ]
  },
  {
    "id": 77,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the id of the pet owned by student whose last name is ‘smith’ .",
        "db_id": "pets_1",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "Find the id of the pet owned by student whose last name is ‘Smith’.",
        "sql": "select has_pet@petid from student join has_pet on student@stuid = has_pet@stuid where student@lname = 'value'",
        "value_match": [
          "student@lname"
        ],
        "value_alignment": [
          [
            [
              "smith",
              "smith"
            ]
          ]
        ],
        "exact_match": [
          "pets",
          "student",
          "student@lname"
        ],
        "partial_match": [
          "student@fname"
        ]
      }
    ]
  },
  {
    "id": 78,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "what is the id of the pet owned by the student whose last name is 'smith ' ?",
        "db_id": "pets_1",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "sql": "select has_pet@petid from student join has_pet on student@stuid = has_pet@stuid where student@lname = 'value'",
        "value_match": [
          "student@lname"
        ],
        "value_alignment": [
          [
            [
              "smith",
              "smith"
            ]
          ]
        ],
        "exact_match": [
          "pets",
          "student",
          "student@lname"
        ],
        "partial_match": [
          "student@fname"
        ]
      }
    ]
  },
  {
    "id": 79,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the number of pets for each student who has any pet and student id .",
        "db_id": "pets_1",
        "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "sql": "select count ( * ) , student@stuid from student join has_pet on student@stuid = has_pet@stuid group by student@stuid",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "student"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 80,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "for students who have pets , how many pets does each student have ? list their ids instead of names .",
        "db_id": "pets_1",
        "query": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "sql": "select count ( * ) , student@stuid from student join has_pet on student@stuid = has_pet@stuid group by student@stuid",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "student"
        ],
        "partial_match": [
          "student@lname",
          "student@fname"
        ]
      }
    ]
  },
  {
    "id": 81,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the first name and gender of student who have more than one pet .",
        "db_id": "pets_1",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "Find the first name and gender of student who have more than one pet.",
        "sql": "select student@fname , student@sex from student join has_pet on student@stuid = has_pet@stuid group by student@stuid having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "student",
          "student@fname"
        ],
        "partial_match": [
          "student@lname"
        ]
      }
    ]
  },
  {
    "id": 82,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "what is the first name and gender of the all the students who have more than one pet ?",
        "db_id": "pets_1",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "sql": "select student@fname , student@sex from student join has_pet on student@stuid = has_pet@stuid group by student@stuid having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "student",
          "student@fname"
        ],
        "partial_match": [
          "student@lname"
        ]
      }
    ]
  },
  {
    "id": 83,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the last name of the student who has a cat that is age 3 .",
        "db_id": "pets_1",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "question": "Find the last name of the student who has a cat that is age 3.",
        "sql": "select student@lname from student join has_pet on student@stuid = has_pet@stuid join pets on pets@petid = has_pet@petid where pets@pet_age = 'value' and pets@pettype = 'value'",
        "value_match": [
          "pets@pettype"
        ],
        "value_alignment": [
          [
            [
              "cat",
              "cat"
            ]
          ]
        ],
        "exact_match": [
          "student",
          "student@lname",
          "student@age"
        ],
        "partial_match": [
          "student@fname"
        ]
      }
    ]
  },
  {
    "id": 84,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "what is the last name of the student who has a cat that is 3 years old ?",
        "db_id": "pets_1",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "sql": "select student@lname from student join has_pet on student@stuid = has_pet@stuid join pets on pets@petid = has_pet@petid where pets@pet_age = 'value' and pets@pettype = 'value'",
        "value_match": [
          "pets@pettype"
        ],
        "value_alignment": [
          [
            [
              "cat",
              "cat"
            ]
          ]
        ],
        "exact_match": [
          "student",
          "student@lname"
        ],
        "partial_match": [
          "student@fname"
        ]
      }
    ]
  },
  {
    "id": 85,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "find the average age of students who do not have any pet .",
        "db_id": "pets_1",
        "query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "question": "Find the average age of students who do not have any pet .",
        "sql": "select avg ( student@age ) from student where student@stuid not in ( select has_pet@stuid from has_pet )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "student",
          "student@age"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 86,
    "database_id": "pets_1",
    "interaction": [
      {
        "utterance": "what is the average age for all students who do not own any pets ?",
        "db_id": "pets_1",
        "query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "question": "What is the average age for all students who do not own any pets ?",
        "sql": "select avg ( student@age ) from student where student@stuid not in ( select has_pet@stuid from has_pet )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "pets",
          "student",
          "student@age"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 87,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "how many continents are there ?",
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "question": "How many continents are there?",
        "sql": "select count ( * ) from continents",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "continents",
          "continents@continent",
          "countries@continent"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 88,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the number of continents ?",
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "question": "What is the number of continents?",
        "sql": "select count ( * ) from continents",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "continents",
          "continents@continent",
          "countries@continent"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 89,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "how many countries does each continent have ? list the continent id , continent name and the number of countries .",
        "db_id": "car_1",
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "sql": "select continents@contid , continents@continent , count ( * ) from continents join countries on continents@contid = countries@continent group by continents@contid",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "continents",
          "continents@continent",
          "countries",
          "countries@countryid",
          "countries@countryname",
          "countries@continent",
          "car_makers@country"
        ],
        "partial_match": [
          "car_makers@fullname",
          "model_list",
          "car_names"
        ]
      }
    ]
  },
  {
    "id": 90,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "for each continent , list its id , name , and how many countries it has ?",
        "db_id": "car_1",
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "For each continent, list its id, name, and how many countries it has?",
        "sql": "select continents@contid , continents@continent , count ( * ) from continents join countries on continents@contid = countries@continent group by continents@contid",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "continents",
          "continents@continent",
          "countries",
          "countries@countryname",
          "countries@continent",
          "car_makers@country"
        ],
        "partial_match": [
          "countries@countryid",
          "car_makers@fullname",
          "model_list",
          "car_names"
        ]
      }
    ]
  },
  {
    "id": 91,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "how many countries are listed ?",
        "db_id": "car_1",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many countries are listed?",
        "sql": "select count ( * ) from countries",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countries",
          "car_makers@country"
        ],
        "partial_match": [
          "countries@countryid",
          "countries@countryname",
          "model_list"
        ]
      }
    ]
  },
  {
    "id": 92,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "how many countries exist ?",
        "db_id": "car_1",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many countries exist?",
        "sql": "select count ( * ) from countries",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countries",
          "car_makers@country"
        ],
        "partial_match": [
          "countries@countryid",
          "countries@countryname"
        ]
      }
    ]
  },
  {
    "id": 93,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "how many models does each car maker produce ? list maker full name , id and the number .",
        "db_id": "car_1",
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "sql": "select car_makers@fullname , car_makers@id , count ( * ) from car_makers join model_list on car_makers@id = model_list@maker group by car_makers@id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "car_makers",
          "car_makers@maker",
          "car_makers@fullname",
          "model_list",
          "model_list@maker",
          "model_list@model",
          "car_names@model",
          "car_names@make"
        ],
        "partial_match": [
          "countries@countryname",
          "model_list@modelid",
          "car_names"
        ]
      }
    ]
  },
  {
    "id": 94,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the full name of each car maker , along with its id and how many models it produces ?",
        "db_id": "car_1",
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "sql": "select car_makers@fullname , car_makers@id , count ( * ) from car_makers join model_list on car_makers@id = model_list@maker group by car_makers@id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "car_makers@maker",
          "car_makers@fullname",
          "model_list@maker",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "countries@countryname",
          "car_makers",
          "model_list",
          "model_list@modelid",
          "car_names",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 95,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "which model of the car has the minimum horsepower ?",
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "Which model of the car has the minimum horsepower?",
        "sql": "select car_names@model from car_names join cars_data on car_names@makeid = cars_data@id order by cars_data@horsepower asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@horsepower",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "model_list",
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 96,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the model of the car with the smallest amount of horsepower ?",
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "sql": "select car_names@model from car_names join cars_data on car_names@makeid = cars_data@id order by cars_data@horsepower asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@horsepower",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "model_list",
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 97,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "find the model of the car whose weight is below the average weight .",
        "db_id": "car_1",
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "Find the model of the car whose weight is below the average weight.",
        "sql": "select car_names@model from car_names join cars_data on car_names@makeid = cars_data@id where cars_data@weight < ( select avg ( cars_data@weight ) from cars_data )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@weight",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "model_list",
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 98,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the model for the car with a weight smaller than the average ?",
        "db_id": "car_1",
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "What is the model for the car with a weight smaller than the average?",
        "sql": "select car_names@model from car_names join cars_data on car_names@makeid = cars_data@id where cars_data@weight < ( select avg ( cars_data@weight ) from cars_data )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@weight",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "model_list",
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 99,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "find the name of the makers that produced some cars in the year of 1970 ?",
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "sql": "select distinct car_makers@maker from car_makers join model_list on car_makers@id = model_list@maker join car_names on model_list@model = car_names@model join cars_data on car_names@makeid = cars_data@id where cars_data@year = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@year",
          "car_makers@maker",
          "model_list@maker"
        ],
        "partial_match": [
          "countries@countryname",
          "car_makers",
          "car_makers@fullname",
          "car_names",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 100,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the name of the different car makers who produced a car in 1970 ?",
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "sql": "select distinct car_makers@maker from car_makers join model_list on car_makers@id = model_list@maker join car_names on model_list@model = car_names@model join cars_data on car_names@makeid = cars_data@id where cars_data@year = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "car_makers@maker",
          "model_list@maker"
        ],
        "partial_match": [
          "countries@countryname",
          "car_makers",
          "car_makers@fullname",
          "car_names",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 101,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "find the make and production time of the cars that were produced in the earliest year ?",
        "db_id": "car_1",
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "sql": "select car_names@make , cars_data@year from cars_data join car_names on cars_data@id = car_names@makeid where cars_data@year = ( select min ( cars_data@year ) from cars_data )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@year",
          "car_names@make"
        ],
        "partial_match": [
          "car_makers",
          "car_makers@maker",
          "model_list@maker",
          "car_names@makeid"
        ]
      }
    ]
  },
  {
    "id": 102,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the maker of the carr produced in the earliest year and what year was it ?",
        "db_id": "car_1",
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "sql": "select car_names@make , cars_data@year from cars_data join car_names on cars_data@id = car_names@makeid where cars_data@year = ( select min ( cars_data@year ) from cars_data )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@year",
          "car_makers@maker",
          "model_list@maker"
        ],
        "partial_match": [
          "car_makers",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 103,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "which distinct car models are the produced after 1980 ?",
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "question": "Which distinct car models are the produced after 1980?",
        "sql": "select distinct model_list@model from model_list join car_names on model_list@model = car_names@model join cars_data on car_names@makeid = cars_data@id where cars_data@year > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "model_list",
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 104,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what are the different models for the cards produced after 1980 ?",
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "question": "What are the different models for the cards produced after 1980?",
        "sql": "select distinct model_list@model from model_list join car_names on model_list@model = car_names@model join cars_data on car_names@makeid = cars_data@id where cars_data@year > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "model_list",
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 105,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "how many car makers are there in each continents ? list the continent name and the count .",
        "db_id": "car_1",
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "sql": "select continents@continent , count ( * ) from continents join countries on continents@contid = countries@continent join car_makers on countries@countryid = car_makers@country group by continents@continent",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "continents",
          "continents@continent",
          "countries@countryname",
          "countries@continent",
          "car_makers@maker",
          "model_list@maker"
        ],
        "partial_match": [
          "countries",
          "countries@countryid",
          "car_makers",
          "car_makers@fullname",
          "car_makers@country",
          "model_list",
          "car_names",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 106,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the name of each continent and how many car makers are there in each one ?",
        "db_id": "car_1",
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "sql": "select continents@continent , count ( * ) from continents join countries on continents@contid = countries@continent join car_makers on countries@countryid = car_makers@country group by continents@continent",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "continents",
          "continents@continent",
          "countries@continent",
          "car_makers@maker",
          "model_list@maker"
        ],
        "partial_match": [
          "countries@countryname",
          "car_makers",
          "car_makers@fullname",
          "car_names",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 107,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "which of the countries has the most car makers ? list the country name .",
        "db_id": "car_1",
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "Which of the countries has the most car makers? List the country name.",
        "sql": "select countries@countryname from car_makers join countries on car_makers@country = countries@countryid group by car_makers@country order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countries",
          "countries@countryid",
          "countries@countryname",
          "car_makers@maker",
          "car_makers@country",
          "model_list@maker"
        ],
        "partial_match": [
          "car_makers",
          "car_makers@fullname",
          "model_list",
          "car_names",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 108,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the name of the country with the most car makers ?",
        "db_id": "car_1",
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "What is the name of the country with the most car makers?",
        "sql": "select countries@countryname from car_makers join countries on car_makers@country = countries@countryid group by car_makers@country order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countries",
          "countries@countryname",
          "car_makers@maker",
          "car_makers@country",
          "model_list@maker"
        ],
        "partial_match": [
          "countries@countryid",
          "car_makers",
          "car_makers@fullname",
          "car_names",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 109,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "how many car models are produced by each maker ? only list the count and the maker full name .",
        "db_id": "car_1",
        "query": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "sql": "select count ( * ) , car_makers@fullname from model_list join car_makers on model_list@maker = car_makers@id group by car_makers@id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countries@countryname",
          "car_makers",
          "car_makers@maker",
          "car_makers@fullname",
          "model_list",
          "model_list@maker",
          "model_list@model",
          "car_names@model",
          "car_names@make"
        ],
        "partial_match": [
          "countries",
          "countries@countryid",
          "car_makers@country",
          "model_list@modelid",
          "car_names"
        ]
      }
    ]
  },
  {
    "id": 110,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the number of car models that are produced by each maker and what is the id and full name of each maker ?",
        "db_id": "car_1",
        "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "sql": "select count ( * ) , car_makers@fullname , car_makers@id from model_list join car_makers on model_list@maker = car_makers@id group by car_makers@id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "car_makers",
          "car_makers@maker",
          "car_makers@fullname",
          "model_list@maker",
          "model_list@model",
          "car_names@model",
          "car_names@make"
        ],
        "partial_match": [
          "countries@countryname",
          "model_list",
          "model_list@modelid",
          "car_names"
        ]
      }
    ]
  },
  {
    "id": 111,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the accelerate of the car make amc hornet sportabout ( sw ) ?",
        "db_id": "car_1",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "sql": "select cars_data@accelerate from cars_data join car_names on cars_data@id = car_names@makeid where car_names@make = 'value'",
        "value_match": [
          "car_makers@maker",
          "model_list@model",
          "car_names@model",
          "car_names@make"
        ],
        "value_alignment": [
          [
            [
              "amc_hornet",
              "amc_hornet"
            ]
          ],
          [
            [
              "amc",
              "amc"
            ]
          ]
        ],
        "exact_match": [
          "cars_data@accelerate",
          "car_names@make"
        ],
        "partial_match": [
          "car_makers",
          "car_makers@maker",
          "model_list@maker",
          "car_names@makeid"
        ]
      }
    ]
  },
  {
    "id": 112,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "how much does the car accelerate that makes amc hornet sportabout ( sw ) ?",
        "db_id": "car_1",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "sql": "select cars_data@accelerate from cars_data join car_names on cars_data@id = car_names@makeid where car_names@make = 'value'",
        "value_match": [
          "car_makers@maker",
          "model_list@model",
          "car_names@model",
          "car_names@make"
        ],
        "value_alignment": [
          [
            [
              "amc_hornet",
              "amc_hornet"
            ]
          ],
          [
            [
              "amc",
              "amc"
            ]
          ]
        ],
        "exact_match": [
          "cars_data@accelerate",
          "car_names@make"
        ],
        "partial_match": [
          "car_makers",
          "car_makers@maker",
          "model_list@maker",
          "car_names@makeid"
        ]
      }
    ]
  },
  {
    "id": 113,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "how many car makers are there in france ?",
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "question": "How many car makers are there in france?",
        "sql": "select count ( * ) from car_makers join countries on car_makers@country = countries@countryid where countries@countryname = 'value'",
        "value_match": [
          "countries@countryname"
        ],
        "value_alignment": [
          [
            [
              "france",
              "france"
            ]
          ]
        ],
        "exact_match": [
          "car_makers@maker",
          "model_list@maker"
        ],
        "partial_match": [
          "car_makers",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 114,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the number of makers of care in france ?",
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "question": "What is the number of makers of care in France?",
        "sql": "select count ( * ) from car_makers join countries on car_makers@country = countries@countryid where countries@countryname = 'value'",
        "value_match": [
          "countries@countryname"
        ],
        "value_alignment": [
          [
            [
              "france",
              "france"
            ]
          ]
        ],
        "exact_match": [
          "car_makers@maker",
          "model_list@maker"
        ],
        "partial_match": [
          "car_makers",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 115,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "how many car models are produced in the usa ?",
        "db_id": "car_1",
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "How many car models are produced in the usa?",
        "sql": "select count ( * ) from model_list join car_makers on model_list@maker = car_makers@id join countries on car_makers@country = countries@countryid where countries@countryname = 'value'",
        "value_match": [
          "countries@countryname"
        ],
        "value_alignment": [
          [
            [
              "usa",
              "usa"
            ]
          ]
        ],
        "exact_match": [
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "model_list",
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 116,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the count of the car models produced in the united states ?",
        "db_id": "car_1",
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "What is the count of the car models produced in the United States?",
        "sql": "select count ( * ) from model_list join car_makers on model_list@maker = car_makers@id join countries on car_makers@country = countries@countryid where countries@countryname = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "countries",
          "countries@countryid",
          "countries@countryname",
          "car_makers@country",
          "model_list",
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 117,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the average miles per gallon ( mpg ) of the cars with 4 cylinders ?",
        "db_id": "car_1",
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "sql": "select avg ( cars_data@mpg ) from cars_data where cars_data@cylinders = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@mpg",
          "cars_data@cylinders"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 118,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the average miles per gallon of all the cards with 4 cylinders ?",
        "db_id": "car_1",
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "sql": "select avg ( cars_data@mpg ) from cars_data where cars_data@cylinders = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@cylinders"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 119,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "db_id": "car_1",
        "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "sql": "select min ( cars_data@weight ) from cars_data where cars_data@cylinders = 'value' and cars_data@year = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@cylinders",
          "cars_data@weight"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 120,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "db_id": "car_1",
        "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "sql": "select min ( cars_data@weight ) from cars_data where cars_data@cylinders = 'value' and cars_data@year = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@cylinders",
          "cars_data@weight"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 121,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what are all the makers and models ?",
        "db_id": "car_1",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are all the makers and models?",
        "sql": "select model_list@maker , model_list@model from model_list",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "car_makers@maker",
          "model_list@maker",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "car_makers",
          "model_list",
          "model_list@modelid",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 122,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what are the makers and models ?",
        "db_id": "car_1",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are the makers and models?",
        "sql": "select model_list@maker , model_list@model from model_list",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "car_makers@maker",
          "model_list@maker",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "car_makers",
          "model_list",
          "model_list@modelid",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 123,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what are the countries having at least one car maker ? list name and id .",
        "db_id": "car_1",
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the countries having at least one car maker? List name and id.",
        "sql": "select countries@countryname , countries@countryid from countries join car_makers on countries@countryid = car_makers@country group by countries@countryid having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countries",
          "countries@countryname",
          "car_makers@maker",
          "car_makers@country",
          "model_list@maker"
        ],
        "partial_match": [
          "countries@countryid",
          "car_makers",
          "car_makers@fullname",
          "model_list",
          "car_names",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 124,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what are the names and ids of all countries with at least one car maker ?",
        "db_id": "car_1",
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the names and ids of all countries with at least one car maker?",
        "sql": "select countries@countryname , countries@countryid from countries join car_makers on countries@countryid = car_makers@country group by countries@countryid having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countries",
          "countries@countryname",
          "car_makers@maker",
          "car_makers@country",
          "model_list@maker"
        ],
        "partial_match": [
          "countries@countryid",
          "car_makers",
          "car_makers@fullname",
          "car_names",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 125,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the number of the cars with horsepower more than 150 ?",
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of the cars with horsepower more than 150?",
        "sql": "select count ( * ) from cars_data where cars_data@horsepower > 'value'",
        "value_match": [
          "cars_data@horsepower"
        ],
        "value_alignment": [
          [
            [
              "150",
              "150"
            ]
          ]
        ],
        "exact_match": [
          "cars_data@horsepower"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 126,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the number of cars with a horsepower greater than 150 ?",
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of cars with a horsepower greater than 150?",
        "sql": "select count ( * ) from cars_data where cars_data@horsepower > 'value'",
        "value_match": [
          "cars_data@horsepower"
        ],
        "value_alignment": [
          [
            [
              "150",
              "150"
            ]
          ]
        ],
        "exact_match": [
          "cars_data@horsepower"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 127,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the average weight of cars each year ?",
        "db_id": "car_1",
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "question": "What is the average weight of cars each year?",
        "sql": "select avg ( cars_data@weight ) , cars_data@year from cars_data group by cars_data@year",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@weight",
          "cars_data@year"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 128,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the average weight and year for each year ?",
        "db_id": "car_1",
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "question": "What is the average weight and year for each year?",
        "sql": "select avg ( cars_data@weight ) , cars_data@year from cars_data group by cars_data@year",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@weight",
          "cars_data@year"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 129,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "which countries in europe have at least 3 car manufacturers ?",
        "db_id": "car_1",
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "sql": "select countries@countryname from countries join continents on countries@continent = continents@contid join car_makers on countries@countryid = car_makers@country where continents@continent = 'value' group by countries@countryname having count ( * ) >= 'value'",
        "value_match": [
          "continents@continent"
        ],
        "value_alignment": [
          [
            [
              "europe",
              "europe"
            ]
          ]
        ],
        "exact_match": [
          "countries",
          "car_makers@country"
        ],
        "partial_match": [
          "countries@countryid",
          "countries@countryname"
        ]
      }
    ]
  },
  {
    "id": 130,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what are the names of all european countries with at least 3 manufacturers ?",
        "db_id": "car_1",
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "sql": "select countries@countryname from countries join continents on countries@continent = continents@contid join car_makers on countries@countryid = car_makers@country where continents@continent = 'value' group by countries@countryname having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countries",
          "countries@countryname",
          "car_makers@country"
        ],
        "partial_match": [
          "countries@countryid",
          "car_makers@fullname",
          "car_names"
        ]
      }
    ]
  },
  {
    "id": 131,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the maximum horsepower and the make of the car models with 3 cylinders ?",
        "db_id": "car_1",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "sql": "select cars_data@horsepower , car_names@make from car_names join cars_data on car_names@makeid = cars_data@id where cars_data@cylinders = 'value' order by cars_data@horsepower desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@cylinders",
          "cars_data@horsepower",
          "model_list@model",
          "car_names@model",
          "car_names@make"
        ],
        "partial_match": [
          "car_makers",
          "car_makers@maker",
          "model_list",
          "model_list@modelid",
          "model_list@maker",
          "car_names@makeid"
        ]
      }
    ]
  },
  {
    "id": 132,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the largest amount of horsepower for the models with 3 cylinders and what make is it ?",
        "db_id": "car_1",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "sql": "select cars_data@horsepower , car_names@make from car_names join cars_data on car_names@makeid = cars_data@id where cars_data@cylinders = 'value' order by cars_data@horsepower desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@cylinders",
          "cars_data@horsepower",
          "model_list@model",
          "car_names@model",
          "car_names@make"
        ],
        "partial_match": [
          "car_makers",
          "car_makers@maker",
          "model_list",
          "model_list@modelid",
          "model_list@maker",
          "car_names@makeid"
        ]
      }
    ]
  },
  {
    "id": 133,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "which model saves the most gasoline ? that is to say , have the maximum miles per gallon .",
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "sql": "select car_names@model from car_names join cars_data on car_names@makeid = cars_data@id order by cars_data@mpg desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "model_list",
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 134,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the car model with the highest mpg ?",
        "db_id": "car_1",
        "query": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "question": "What is the car model with the highest mpg ?",
        "sql": "select car_names@model from car_names join cars_data on car_names@makeid = cars_data@id order by cars_data@mpg desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@mpg",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "model_list",
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 135,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the average horsepower of the cars before 1980 ?",
        "db_id": "car_1",
        "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
        "question": "What is the average horsepower of the cars before 1980?",
        "sql": "select avg ( cars_data@horsepower ) from cars_data where cars_data@year < 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@horsepower"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 136,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the average horsepower for all cars produced before 1980 ?",
        "db_id": "car_1",
        "query": "select avg(horsepower) from cars_data where year  <  1980;",
        "question": "What is the average horsepower for all cars produced before 1980 ?",
        "sql": "select avg ( cars_data@horsepower ) from cars_data where cars_data@year < 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@horsepower"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 137,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the average edispl of the cars of model volvo ?",
        "db_id": "car_1",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "question": "What is the average edispl of the cars of model volvo?",
        "sql": "select avg ( cars_data@edispl ) from car_names join cars_data on car_names@makeid = cars_data@id where car_names@model = 'value'",
        "value_match": [
          "car_makers@maker",
          "model_list@model",
          "car_makers@fullname",
          "car_names@model"
        ],
        "value_alignment": [
          [
            [
              "volvo",
              "volvo"
            ]
          ]
        ],
        "exact_match": [
          "cars_data@edispl",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "model_list",
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 138,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the average edispl for all volvos ?",
        "db_id": "car_1",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "question": "What is the average edispl for all volvos?",
        "sql": "select avg ( cars_data@edispl ) from car_names join cars_data on car_names@makeid = cars_data@id where car_names@model = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@edispl"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 139,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the maximum accelerate for different number of cylinders ?",
        "db_id": "car_1",
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "sql": "select max ( cars_data@accelerate ) , cars_data@cylinders from cars_data group by cars_data@cylinders",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@cylinders",
          "cars_data@accelerate"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 140,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the maximum accelerate for all the different cylinders ?",
        "db_id": "car_1",
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "sql": "select max ( cars_data@accelerate ) , cars_data@cylinders from cars_data group by cars_data@cylinders",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@cylinders",
          "cars_data@accelerate"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 141,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "which model has the most version ( make ) of cars ?",
        "db_id": "car_1",
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which model has the most version(make) of cars?",
        "sql": "select car_names@model from car_names group by car_names@model order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "model_list@model",
          "car_names@model",
          "car_names@make"
        ],
        "partial_match": [
          "car_makers",
          "car_makers@maker",
          "model_list",
          "model_list@modelid",
          "model_list@maker",
          "car_names@makeid"
        ]
      }
    ]
  },
  {
    "id": 142,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what model has the most different versions ?",
        "db_id": "car_1",
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "What model has the most different versions?",
        "sql": "select car_names@model from car_names group by car_names@model order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "model_list",
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 143,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "how many cars have more than 4 cylinders ?",
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "How many cars have more than 4 cylinders?",
        "sql": "select count ( * ) from cars_data where cars_data@cylinders > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@cylinders"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 144,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the number of cars with more than 4 cylinders ?",
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "What is the number of cars with more than 4 cylinders?",
        "sql": "select count ( * ) from cars_data where cars_data@cylinders > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@cylinders"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 145,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "how many cars were produced in 1980 ?",
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "question": "how many cars were produced in 1980?",
        "sql": "select count ( * ) from cars_data where cars_data@year = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [],
        "partial_match": []
      }
    ]
  },
  {
    "id": 146,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "in 1980 , how many cars were made ?",
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "question": "In 1980, how many cars were made?",
        "sql": "select count ( * ) from cars_data where cars_data@year = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "car_names@make"
        ],
        "partial_match": [
          "car_makers",
          "car_makers@maker",
          "model_list@maker",
          "car_names@makeid"
        ]
      }
    ]
  },
  {
    "id": 147,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "how many car models were produced by the maker with full name american motor company ?",
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "sql": "select count ( * ) from car_makers join model_list on car_makers@id = model_list@maker where car_makers@fullname = 'value'",
        "value_match": [
          "car_makers@fullname"
        ],
        "value_alignment": [
          [
            [
              "american_motor_company",
              "american_motor_company"
            ]
          ]
        ],
        "exact_match": [
          "car_makers@maker",
          "car_makers@fullname",
          "model_list@maker",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "countries@countryname",
          "car_makers",
          "model_list",
          "model_list@modelid",
          "car_names",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 148,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the number of car models created by the car maker american motor company ?",
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "sql": "select count ( * ) from car_makers join model_list on car_makers@id = model_list@maker where car_makers@fullname = 'value'",
        "value_match": [
          "car_makers@fullname"
        ],
        "value_alignment": [
          [
            [
              "american_motor_company",
              "american_motor_company"
            ]
          ]
        ],
        "exact_match": [
          "car_makers@maker",
          "model_list@maker",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "car_makers",
          "model_list",
          "model_list@modelid",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 149,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "which makers designed more than 3 car models ? list full name and the id .",
        "db_id": "car_1",
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "sql": "select car_makers@fullname , car_makers@id from car_makers join model_list on car_makers@id = model_list@maker group by car_makers@id having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "car_makers@maker",
          "car_makers@fullname",
          "model_list",
          "model_list@maker",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "countries@countryname",
          "car_makers",
          "model_list@modelid",
          "car_names",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 150,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what are the names and ids of all makers with more than 3 models ?",
        "db_id": "car_1",
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the names and ids of all makers with more than 3 models?",
        "sql": "select car_makers@fullname , car_makers@id from car_makers join model_list on car_makers@id = model_list@maker group by car_makers@id having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "car_makers@maker",
          "model_list@maker",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "countries@countryname",
          "car_makers",
          "car_makers@fullname",
          "model_list",
          "model_list@modelid",
          "car_names",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 151,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "which distinctive models are produced by maker with the full name general motors or weighing more than 3500 ?",
        "db_id": "car_1",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "sql": "select distinct model_list@model from car_names join model_list on car_names@model = model_list@model join car_makers on model_list@maker = car_makers@id join cars_data on car_names@makeid = cars_data@id where car_makers@fullname = 'value' or cars_data@weight > 'value'",
        "value_match": [
          "car_makers@fullname"
        ],
        "value_alignment": [
          [
            [
              "general_motors",
              "general_motors"
            ]
          ]
        ],
        "exact_match": [
          "car_makers@maker",
          "car_makers@fullname",
          "model_list@maker",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "cars_data@weight",
          "countries@countryname",
          "car_makers",
          "model_list",
          "model_list@modelid",
          "car_names",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 152,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what are the different models created by either the car maker general motors or weighed more than 3500 ?",
        "db_id": "car_1",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "sql": "select distinct model_list@model from car_names join model_list on car_names@model = model_list@model join car_makers on model_list@maker = car_makers@id join cars_data on car_names@makeid = cars_data@id where car_makers@fullname = 'value' or cars_data@weight > 'value'",
        "value_match": [
          "car_makers@fullname"
        ],
        "value_alignment": [
          [
            [
              "general_motors",
              "general_motors"
            ]
          ]
        ],
        "exact_match": [
          "car_makers@maker",
          "model_list@maker",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "cars_data@weight",
          "car_makers",
          "model_list",
          "model_list@modelid",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 153,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "in which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "db_id": "car_1",
        "query": "select distinct year from cars_data where weight between 3000 and 4000;",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "sql": "select distinct cars_data@year from cars_data where cars_data@weight between 'value' and 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@year"
        ],
        "partial_match": [
          "cars_data@weight"
        ]
      }
    ]
  },
  {
    "id": 154,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "db_id": "car_1",
        "query": "select distinct year from cars_data where weight between 3000 and 4000;",
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "sql": "select distinct cars_data@year from cars_data where cars_data@weight between 'value' and 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@weight",
          "cars_data@year"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 155,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the horsepower of the car with the largest accelerate ?",
        "db_id": "car_1",
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "question": "What is the horsepower of the car with the largest accelerate?",
        "sql": "select cars_data@horsepower from cars_data order by cars_data@accelerate desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@horsepower",
          "cars_data@accelerate"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 156,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the horsepower of the car with the greatest accelerate ?",
        "db_id": "car_1",
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "sql": "select cars_data@horsepower from cars_data order by cars_data@accelerate desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@horsepower",
          "cars_data@accelerate"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 157,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "for model volvo , how many cylinders does the car with the least accelerate have ?",
        "db_id": "car_1",
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "sql": "select cars_data@cylinders from cars_data join car_names on cars_data@id = car_names@makeid where car_names@model = 'value' order by cars_data@accelerate asc limit 1",
        "value_match": [
          "car_makers@maker",
          "model_list@model",
          "car_makers@fullname",
          "car_names@model"
        ],
        "value_alignment": [
          [
            [
              "volvo",
              "volvo"
            ]
          ]
        ],
        "exact_match": [
          "cars_data@cylinders",
          "cars_data@accelerate",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "model_list",
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 158,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "for a volvo model , how many cylinders does the version with least accelerate have ?",
        "db_id": "car_1",
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "sql": "select cars_data@cylinders from cars_data join car_names on cars_data@id = car_names@makeid where car_names@model = 'value' order by cars_data@accelerate asc limit 1",
        "value_match": [
          "car_makers@maker",
          "model_list@model",
          "car_makers@fullname",
          "car_names@model"
        ],
        "value_alignment": [
          [
            [
              "volvo",
              "volvo"
            ]
          ]
        ],
        "exact_match": [
          "cars_data@cylinders",
          "cars_data@accelerate",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "model_list",
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 159,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "how many cars have a larger accelerate than the car with the largest horsepower ?",
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "sql": "select count ( * ) from cars_data where cars_data@accelerate > ( select cars_data@accelerate from cars_data order by cars_data@horsepower desc limit 1 )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@horsepower",
          "cars_data@accelerate"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 160,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the number of cars with a greater accelerate than the one with the most horsepower ?",
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "sql": "select count ( * ) from cars_data where cars_data@accelerate > ( select cars_data@accelerate from cars_data order by cars_data@horsepower desc limit 1 )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@horsepower",
          "cars_data@accelerate"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 161,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "how many countries has more than 2 car makers ?",
        "db_id": "car_1",
        "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "question": "How many countries has more than 2 car makers ?",
        "sql": "select count ( * ) from countries join car_makers on countries@countryid = car_makers@country group by countries@countryid having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countries",
          "car_makers@maker",
          "car_makers@country",
          "model_list@maker"
        ],
        "partial_match": [
          "countries@countryid",
          "countries@countryname",
          "car_makers",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 162,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the number of countries with more than 2 car makers ?",
        "db_id": "car_1",
        "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "question": "What is the number of countries with more than 2 car makers ?",
        "sql": "select count ( * ) from countries join car_makers on countries@countryid = car_makers@country group by countries@countryid having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countries",
          "car_makers@maker",
          "car_makers@country",
          "model_list@maker"
        ],
        "partial_match": [
          "countries@countryid",
          "countries@countryname",
          "car_makers",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 163,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "how many cars has over 6 cylinders ?",
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "How many cars has over 6 cylinders?",
        "sql": "select count ( * ) from cars_data where cars_data@cylinders > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@cylinders"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 164,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the number of carsw ith over 6 cylinders ?",
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "What is the number of carsw ith over 6 cylinders?",
        "sql": "select count ( * ) from cars_data where cars_data@cylinders > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@cylinders"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 165,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "for the cars with 4 cylinders , which model has the largest horsepower ?",
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "sql": "select car_names@model from car_names join cars_data on car_names@makeid = cars_data@id where cars_data@cylinders = 'value' order by cars_data@horsepower desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@cylinders",
          "cars_data@horsepower",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "model_list",
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 166,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "for all of the 4 cylinder cars , which model has the most horsepower ?",
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "sql": "select car_names@model from car_names join cars_data on car_names@makeid = cars_data@id where cars_data@cylinders = 'value' order by cars_data@horsepower desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@cylinders",
          "cars_data@horsepower",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "model_list",
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 167,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "among the cars with more than lowest horsepower , which ones do not have more than 3 cylinders ? list the car makeid and make name .",
        "db_id": "car_1",
        "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "sql": "select car_names@makeid , car_names@make from cars_data join car_names on cars_data@id = car_names@makeid where cars_data@horsepower > ( select min ( cars_data@horsepower ) from cars_data ) and cars_data@cylinders <= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@cylinders",
          "cars_data@horsepower",
          "car_names@make"
        ],
        "partial_match": [
          "countries@countryname",
          "car_makers",
          "car_makers@maker",
          "car_makers@fullname",
          "model_list",
          "model_list@maker",
          "car_names",
          "car_names@makeid"
        ]
      }
    ]
  },
  {
    "id": 168,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "db_id": "car_1",
        "query": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "sql": "select car_names@makeid , car_names@make from cars_data join car_names on cars_data@id = car_names@makeid where cars_data@horsepower > ( select min ( cars_data@horsepower ) from cars_data ) and cars_data@cylinders < 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@cylinders",
          "cars_data@horsepower",
          "car_names@make"
        ],
        "partial_match": [
          "countries@countryname",
          "car_makers",
          "car_makers@maker",
          "car_makers@fullname",
          "model_list@maker",
          "car_names",
          "car_names@makeid"
        ]
      }
    ]
  },
  {
    "id": 169,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "db_id": "car_1",
        "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "sql": "select max ( cars_data@mpg ) from cars_data where cars_data@cylinders = 'value' or cars_data@year < 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@cylinders"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 170,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "db_id": "car_1",
        "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "sql": "select max ( cars_data@mpg ) from cars_data where cars_data@cylinders = 'value' or cars_data@year < 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cars_data@mpg",
          "cars_data@cylinders"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 171,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "which models are lighter than 3500 but not built by the 'ford motor company ' ?",
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "sql": "select distinct model_list@model from model_list join car_names on model_list@model = car_names@model join cars_data on car_names@makeid = cars_data@id join car_makers on model_list@maker = car_makers@id where cars_data@weight < 'value' and car_makers@fullname != 'value'",
        "value_match": [
          "car_makers@maker",
          "model_list@model",
          "car_makers@fullname",
          "car_names@model"
        ],
        "value_alignment": [
          [
            [
              "ford_motor_company",
              "ford_motor_company"
            ]
          ],
          [
            [
              "ford",
              "ford"
            ]
          ]
        ],
        "exact_match": [
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "model_list",
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 172,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what are the different models wthat are lighter than 3500 but were not built by the ford motor company ?",
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "sql": "select distinct model_list@model from model_list join car_names on model_list@model = car_names@model join cars_data on car_names@makeid = cars_data@id join car_makers on model_list@maker = car_makers@id where cars_data@weight < 'value' and car_makers@fullname != 'value'",
        "value_match": [
          "car_makers@maker",
          "model_list@model",
          "car_makers@fullname",
          "car_names@model"
        ],
        "value_alignment": [
          [
            [
              "ford_motor_company",
              "ford_motor_company"
            ]
          ],
          [
            [
              "ford",
              "ford"
            ]
          ]
        ],
        "exact_match": [
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "model_list",
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 173,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what are the name of the countries where there is not a single car maker ?",
        "db_id": "car_1",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "question": "What are the name of the countries where there is not a single car maker?",
        "sql": "select countries@countryname from countries except select countries@countryname from countries join car_makers on countries@countryid = car_makers@country",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countries",
          "countries@countryname",
          "car_makers@maker",
          "car_makers@country",
          "model_list@maker"
        ],
        "partial_match": [
          "countries@countryid",
          "car_makers",
          "car_makers@fullname",
          "car_names",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 174,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what are the names of the countries with no car makers ?",
        "db_id": "car_1",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "question": "What are the names of the countries with no car makers?",
        "sql": "select countries@countryname from countries except select countries@countryname from countries join car_makers on countries@countryid = car_makers@country",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countries",
          "countries@countryname",
          "car_makers@maker",
          "car_makers@country",
          "model_list@maker"
        ],
        "partial_match": [
          "countries@countryid",
          "car_makers",
          "car_makers@fullname",
          "car_names",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 175,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "which are the car makers which produce at least 2 models and more than 3 car makers ? list the id and the maker .",
        "db_id": "car_1",
        "query": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "sql": "select car_makers@id , car_makers@maker from car_makers join model_list on car_makers@id = model_list@maker group by car_makers@id having count ( * ) >= 'value' intersect select car_makers@id , car_makers@maker from car_makers join model_list on car_makers@id = model_list@maker join car_names on model_list@model = car_names@model group by car_makers@id having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "car_makers",
          "car_makers@maker",
          "model_list",
          "model_list@maker",
          "model_list@model",
          "car_names@model",
          "car_names@make"
        ],
        "partial_match": [
          "model_list@modelid"
        ]
      }
    ]
  },
  {
    "id": 176,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars ?",
        "db_id": "car_1",
        "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "sql": "select car_makers@id , car_makers@maker from car_makers join model_list on car_makers@id = model_list@maker group by car_makers@id having count ( * ) >= 'value' intersect select car_makers@id , car_makers@maker from car_makers join model_list on car_makers@id = model_list@maker join car_names on model_list@model = car_names@model group by car_makers@id having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "car_makers",
          "car_makers@maker",
          "model_list@maker",
          "model_list@model",
          "car_names@model",
          "car_names@make"
        ],
        "partial_match": [
          "model_list",
          "model_list@modelid",
          "car_names@makeid"
        ]
      }
    ]
  },
  {
    "id": 177,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what are the id and names of the countries which have more than 3 car makers or produce the 'fiat ' model ?",
        "db_id": "car_1",
        "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "sql": "select countries@countryid , countries@countryname from countries join car_makers on countries@countryid = car_makers@country group by countries@countryid having count ( * ) > 'value' union select countries@countryid , countries@countryname from countries join car_makers on countries@countryid = car_makers@country join model_list on car_makers@id = model_list@maker where model_list@model = 'value'",
        "value_match": [
          "car_makers@maker",
          "model_list@model",
          "car_makers@fullname",
          "car_names@model"
        ],
        "value_alignment": [
          [
            [
              "fiat",
              "fiat"
            ]
          ]
        ],
        "exact_match": [
          "countries",
          "countries@countryname",
          "car_makers@maker",
          "car_makers@country",
          "model_list@maker",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "countries@countryid",
          "car_makers",
          "car_makers@fullname",
          "model_list",
          "model_list@modelid",
          "car_names",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 178,
    "database_id": "car_1",
    "interaction": [
      {
        "utterance": "what are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "db_id": "car_1",
        "query": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "sql": "select countries@countryid , countries@countryname from countries join car_makers on countries@countryid = car_makers@country group by countries@countryid having count ( * ) > 'value' union select countries@countryid , countries@countryname from countries join car_makers on countries@countryid = car_makers@country join model_list on car_makers@id = model_list@maker where model_list@model = 'value'",
        "value_match": [
          "car_makers@maker",
          "model_list@model",
          "car_makers@fullname",
          "car_names@model"
        ],
        "value_alignment": [
          [
            [
              "fiat",
              "fiat"
            ]
          ]
        ],
        "exact_match": [
          "countries",
          "countries@countryname",
          "car_makers@maker",
          "car_makers@country",
          "model_list@maker",
          "model_list@model",
          "car_names@model"
        ],
        "partial_match": [
          "countries@countryid",
          "car_makers",
          "car_makers@fullname",
          "model_list",
          "model_list@modelid",
          "car_names",
          "car_names@make"
        ]
      }
    ]
  },
  {
    "id": 179,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "which country does airline `` jetblue airways '' belong to ?",
        "db_id": "flight_2",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "sql": "select airlines@country from airlines where airlines@airline = 'value'",
        "value_match": [
          "airlines@abbreviation",
          "airlines@airline"
        ],
        "value_alignment": [
          [
            [
              "jetblue_airways",
              "jetblue_airways"
            ]
          ],
          [
            [
              "jetblue",
              "jetblue"
            ]
          ]
        ],
        "exact_match": [
          "flights@airline",
          "airlines",
          "airlines@country",
          "airports@country"
        ],
        "partial_match": [
          "airlines@uid",
          "airlines@airline",
          "airports@countryabbrev"
        ]
      }
    ]
  },
  {
    "id": 180,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what country is jetblue airways affiliated with ?",
        "db_id": "flight_2",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What country is Jetblue Airways affiliated with?",
        "sql": "select airlines@country from airlines where airlines@airline = 'value'",
        "value_match": [
          "airlines@abbreviation",
          "airlines@airline"
        ],
        "value_alignment": [
          [
            [
              "jetblue_airways",
              "jetblue_airways"
            ]
          ],
          [
            [
              "jetblue",
              "jetblue"
            ]
          ]
        ],
        "exact_match": [
          "airlines@country",
          "airports@country"
        ],
        "partial_match": [
          "airports@countryabbrev"
        ]
      }
    ]
  },
  {
    "id": 181,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what is the abbreviation of airline `` jetblue airways '' ?",
        "db_id": "flight_2",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "sql": "select airlines@abbreviation from airlines where airlines@airline = 'value'",
        "value_match": [
          "airlines@abbreviation",
          "airlines@airline"
        ],
        "value_alignment": [
          [
            [
              "jetblue_airways",
              "jetblue_airways"
            ]
          ],
          [
            [
              "jetblue",
              "jetblue"
            ]
          ]
        ],
        "exact_match": [
          "flights@airline",
          "airlines",
          "airlines@abbreviation"
        ],
        "partial_match": [
          "airlines@uid",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 182,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "which abbreviation corresponds to jetblue airways ?",
        "db_id": "flight_2",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "sql": "select airlines@abbreviation from airlines where airlines@airline = 'value'",
        "value_match": [
          "airlines@abbreviation",
          "airlines@airline"
        ],
        "value_alignment": [
          [
            [
              "jetblue_airways",
              "jetblue_airways"
            ]
          ],
          [
            [
              "jetblue",
              "jetblue"
            ]
          ]
        ],
        "exact_match": [
          "airlines@abbreviation"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 183,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "list all airline names and their abbreviations in `` usa '' .",
        "db_id": "flight_2",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "List all airline names and their abbreviations in \"USA\".",
        "sql": "select airlines@airline , airlines@abbreviation from airlines where airlines@country = 'value'",
        "value_match": [
          "airlines@country"
        ],
        "value_alignment": [
          [
            [
              "usa",
              "usa"
            ]
          ]
        ],
        "exact_match": [
          "flights@airline",
          "airlines",
          "airlines@airline",
          "airlines@abbreviation"
        ],
        "partial_match": [
          "airlines@uid",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 184,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what are the airline names and abbreviations for airlines in the usa ?",
        "db_id": "flight_2",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "sql": "select airlines@airline , airlines@abbreviation from airlines where airlines@country = 'value'",
        "value_match": [
          "airlines@country"
        ],
        "value_alignment": [
          [
            [
              "usa",
              "usa"
            ]
          ]
        ],
        "exact_match": [
          "flights@airline",
          "airlines",
          "airlines@uid",
          "airlines@airline",
          "airlines@abbreviation"
        ],
        "partial_match": [
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 185,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "list the airport code and name in the city of anthony .",
        "db_id": "flight_2",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "question": "List the airport code and name in the city of Anthony.",
        "sql": "select airports@airportcode , airports@airportname from airports where airports@city = 'value'",
        "value_match": [
          "airports@city",
          "airports@airportname"
        ],
        "value_alignment": [
          [
            [
              "anthony",
              "anthony"
            ]
          ]
        ],
        "exact_match": [
          "airports",
          "airports@city",
          "airports@airportcode",
          "airports@airportname"
        ],
        "partial_match": [
          "flights@sourceairport",
          "flights@destairport",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 186,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "give the airport code and airport name corresonding to the city anthony .",
        "db_id": "flight_2",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "sql": "select airports@airportcode , airports@airportname from airports where airports@city = 'value'",
        "value_match": [
          "airports@city",
          "airports@airportname"
        ],
        "value_alignment": [
          [
            [
              "anthony",
              "anthony"
            ]
          ]
        ],
        "exact_match": [
          "flights@sourceairport",
          "flights@destairport",
          "airports",
          "airports@city",
          "airports@airportcode",
          "airports@airportname"
        ],
        "partial_match": [
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 187,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "how many airlines do we have ?",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES",
        "question": "How many airlines do we have?",
        "sql": "select count ( * ) from airlines",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights@airline",
          "airlines"
        ],
        "partial_match": [
          "airlines@uid",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 188,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what is the total number of airlines ?",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES",
        "question": "What is the total number of airlines?",
        "sql": "select count ( * ) from airlines",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights@airline",
          "airlines"
        ],
        "partial_match": [
          "flights@flightno",
          "airlines@uid",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 189,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "how many airports do we have ?",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRPORTS",
        "question": "How many airports do we have?",
        "sql": "select count ( * ) from airports",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "airports"
        ],
        "partial_match": [
          "flights@sourceairport",
          "flights@destairport",
          "airports@airportcode",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 190,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "return the number of airports .",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRPORTS",
        "question": "Return the number of  airports.",
        "sql": "select count ( * ) from airports",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "airports"
        ],
        "partial_match": [
          "flights@flightno",
          "flights@sourceairport",
          "flights@destairport",
          "airports@airportcode",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 191,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "how many flights do we have ?",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS",
        "question": "How many flights do we have?",
        "sql": "select count ( * ) from flights",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights"
        ],
        "partial_match": [
          "flights@flightno"
        ]
      }
    ]
  },
  {
    "id": 192,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "return the number of flights .",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS",
        "question": "Return the number of flights.",
        "sql": "select count ( * ) from flights",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights",
          "flights@flightno"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 193,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "which airline has abbreviation 'ual ' ?",
        "db_id": "flight_2",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Which airline has abbreviation 'UAL'?",
        "sql": "select airlines@airline from airlines where airlines@abbreviation = 'value'",
        "value_match": [
          "airlines@abbreviation"
        ],
        "value_alignment": [
          [
            [
              "ual",
              "ual"
            ]
          ]
        ],
        "exact_match": [
          "flights@airline",
          "airlines",
          "airlines@abbreviation"
        ],
        "partial_match": [
          "airlines@uid",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 194,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "give the airline with abbreviation 'ual ' .",
        "db_id": "flight_2",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Give the airline with abbreviation 'UAL'.",
        "sql": "select airlines@airline from airlines where airlines@abbreviation = 'value'",
        "value_match": [
          "airlines@abbreviation"
        ],
        "value_alignment": [
          [
            [
              "ual",
              "ual"
            ]
          ]
        ],
        "exact_match": [
          "flights@airline",
          "airlines",
          "airlines@abbreviation"
        ],
        "partial_match": [
          "airlines@uid",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 195,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "how many airlines are from usa ?",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "How many airlines are from USA?",
        "sql": "select count ( * ) from airlines where airlines@country = 'value'",
        "value_match": [
          "airlines@country"
        ],
        "value_alignment": [
          [
            [
              "usa",
              "usa"
            ]
          ]
        ],
        "exact_match": [
          "flights@airline",
          "airlines"
        ],
        "partial_match": [
          "airlines@uid",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 196,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "return the number of airlines in the usa .",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "Return the number of airlines in the USA.",
        "sql": "select count ( * ) from airlines where airlines@country = 'value'",
        "value_match": [
          "airlines@country"
        ],
        "value_alignment": [
          [
            [
              "usa",
              "usa"
            ]
          ]
        ],
        "exact_match": [
          "flights@airline",
          "airlines"
        ],
        "partial_match": [
          "flights@flightno",
          "airlines@uid",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 197,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "which city and country is the alton airport at ?",
        "db_id": "flight_2",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Which city and country is the Alton airport at?",
        "sql": "select airports@city , airports@country from airports where airports@airportname = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "airlines@country",
          "airports",
          "airports@city",
          "airports@country"
        ],
        "partial_match": [
          "flights@sourceairport",
          "flights@destairport",
          "airports@airportcode",
          "airports@airportname",
          "airports@countryabbrev"
        ]
      }
    ]
  },
  {
    "id": 198,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "give the city and country for the alton airport .",
        "db_id": "flight_2",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Give the city and country for the Alton airport.",
        "sql": "select airports@city , airports@country from airports where airports@airportname = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "airlines@country",
          "airports",
          "airports@city",
          "airports@country"
        ],
        "partial_match": [
          "flights@sourceairport",
          "flights@destairport",
          "airports@airportcode",
          "airports@airportname",
          "airports@countryabbrev"
        ]
      }
    ]
  },
  {
    "id": 199,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what is the airport name for airport 'ako ' ?",
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "What is the airport name for airport 'AKO'?",
        "sql": "select airports@airportname from airports where airports@airportcode = 'value'",
        "value_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "ako",
              "ako"
            ]
          ]
        ],
        "exact_match": [
          "flights@sourceairport",
          "flights@destairport",
          "airports",
          "airports@airportcode",
          "airports@airportname"
        ],
        "partial_match": [
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 200,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "return the name of the airport with code 'ako ' .",
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "Return the name of the airport with code 'AKO'.",
        "sql": "select airports@airportname from airports where airports@airportcode = 'value'",
        "value_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "ako",
              "ako"
            ]
          ]
        ],
        "exact_match": [
          "airports",
          "airports@airportcode",
          "airports@airportname"
        ],
        "partial_match": [
          "flights@sourceairport",
          "flights@destairport",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 201,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what are airport names at city 'aberdeen ' ?",
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "question": "What are airport names at City 'Aberdeen'?",
        "sql": "select airports@airportname from airports where airports@city = 'value'",
        "value_match": [
          "airports@city"
        ],
        "value_alignment": [
          [
            [
              "aberdeen",
              "aberdeen"
            ]
          ]
        ],
        "exact_match": [
          "airports",
          "airports@city",
          "airports@airportname"
        ],
        "partial_match": [
          "flights@sourceairport",
          "flights@destairport",
          "airlines@airline",
          "airports@airportcode"
        ]
      }
    ]
  },
  {
    "id": 202,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what are the names of airports in aberdeen ?",
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "question": "What are the names of airports in Aberdeen?",
        "sql": "select airports@airportname from airports where airports@city = 'value'",
        "value_match": [
          "airports@city"
        ],
        "value_alignment": [
          [
            [
              "aberdeen",
              "aberdeen"
            ]
          ]
        ],
        "exact_match": [
          "airports",
          "airports@airportname"
        ],
        "partial_match": [
          "flights@sourceairport",
          "flights@destairport",
          "airlines@airline",
          "airports@airportcode"
        ]
      }
    ]
  },
  {
    "id": 203,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "how many flights depart from 'apg ' ?",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "How many flights depart from 'APG'?",
        "sql": "select count ( * ) from flights where flights@sourceairport = 'value'",
        "value_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "apg",
              "apg"
            ]
          ]
        ],
        "exact_match": [
          "flights"
        ],
        "partial_match": [
          "flights@flightno"
        ]
      }
    ]
  },
  {
    "id": 204,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "count the number of flights departing from 'apg ' .",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Count the number of flights departing from 'APG'.",
        "sql": "select count ( * ) from flights where flights@sourceairport = 'value'",
        "value_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "apg",
              "apg"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@flightno"
        ],
        "partial_match": [
          "airlines@country",
          "airports@country",
          "airports@countryabbrev"
        ]
      }
    ]
  },
  {
    "id": 205,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "how many flights have destination ato ?",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "How many flights have destination ATO?",
        "sql": "select count ( * ) from flights where flights@destairport = 'value'",
        "value_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "ato",
              "ato"
            ]
          ]
        ],
        "exact_match": [
          "flights"
        ],
        "partial_match": [
          "flights@flightno",
          "flights@destairport"
        ]
      }
    ]
  },
  {
    "id": 206,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "count the number of flights into ato .",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "Count the number of flights into ATO.",
        "sql": "select count ( * ) from flights where flights@destairport = 'value'",
        "value_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "ato",
              "ato"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@flightno"
        ],
        "partial_match": [
          "airlines@country",
          "airports@country",
          "airports@countryabbrev"
        ]
      }
    ]
  },
  {
    "id": 207,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "how many flights depart from city aberdeen ?",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "How many flights depart from City Aberdeen?",
        "sql": "select count ( * ) from flights join airports on flights@sourceairport = airports@airportcode where airports@city = 'value'",
        "value_match": [
          "airports@city"
        ],
        "value_alignment": [
          [
            [
              "aberdeen",
              "aberdeen"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "airports@city"
        ],
        "partial_match": [
          "flights@flightno"
        ]
      }
    ]
  },
  {
    "id": 208,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "return the number of flights departing from aberdeen .",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Return the number of flights departing from Aberdeen.",
        "sql": "select count ( * ) from flights join airports on flights@sourceairport = airports@airportcode where airports@city = 'value'",
        "value_match": [
          "airports@city"
        ],
        "value_alignment": [
          [
            [
              "aberdeen",
              "aberdeen"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@flightno"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 209,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "how many flights arriving in aberdeen city ?",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "How many flights arriving in Aberdeen city?",
        "sql": "select count ( * ) from flights join airports on flights@destairport = airports@airportcode where airports@city = 'value'",
        "value_match": [
          "airports@city"
        ],
        "value_alignment": [
          [
            [
              "aberdeen",
              "aberdeen"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "airports@city"
        ],
        "partial_match": [
          "flights@flightno"
        ]
      }
    ]
  },
  {
    "id": 210,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "return the number of flights arriving in aberdeen .",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Return the number of flights arriving in Aberdeen.",
        "sql": "select count ( * ) from flights join airports on flights@destairport = airports@airportcode where airports@city = 'value'",
        "value_match": [
          "airports@city"
        ],
        "value_alignment": [
          [
            [
              "aberdeen",
              "aberdeen"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@flightno"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 211,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "how many flights depart from city 'aberdeen ' and have destination city 'ashley ' ?",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "sql": "select count ( * ) from flights join airports on flights@destairport = airports@airportcode join airports on flights@sourceairport = airports@airportcode where airports@city = 'value' and airports@city = 'value'",
        "value_match": [
          "airports@airportname",
          "airports@city"
        ],
        "value_alignment": [
          [
            [
              "aberdeen",
              "aberdeen"
            ]
          ],
          [
            [
              "ashley",
              "ashley"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "airports@city"
        ],
        "partial_match": [
          "flights@flightno",
          "flights@destairport"
        ]
      }
    ]
  },
  {
    "id": 212,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "how many flights fly from aberdeen to ashley ?",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights fly from Aberdeen to Ashley?",
        "sql": "select count ( * ) from flights join airports on flights@destairport = airports@airportcode join airports on flights@sourceairport = airports@airportcode where airports@city = 'value' and airports@city = 'value'",
        "value_match": [
          "airports@airportname",
          "airports@city"
        ],
        "value_alignment": [
          [
            [
              "aberdeen",
              "aberdeen"
            ]
          ],
          [
            [
              "ashley",
              "ashley"
            ]
          ]
        ],
        "exact_match": [
          "flights"
        ],
        "partial_match": [
          "flights@flightno"
        ]
      }
    ]
  },
  {
    "id": 213,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "how many flights does airline 'jetblue airways ' have ?",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "sql": "select count ( * ) from flights join airlines on flights@airline = airlines@uid where airlines@airline = 'value'",
        "value_match": [
          "airlines@abbreviation",
          "airlines@airline"
        ],
        "value_alignment": [
          [
            [
              "jetblue_airways",
              "jetblue_airways"
            ]
          ],
          [
            [
              "jetblue",
              "jetblue"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@airline",
          "airlines"
        ],
        "partial_match": [
          "flights@flightno",
          "airlines@uid",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 214,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "give the number of jetblue airways flights .",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "Give the number of Jetblue Airways flights.",
        "sql": "select count ( * ) from flights join airlines on flights@airline = airlines@uid where airlines@airline = 'value'",
        "value_match": [
          "airlines@abbreviation",
          "airlines@airline"
        ],
        "value_alignment": [
          [
            [
              "jetblue_airways",
              "jetblue_airways"
            ]
          ],
          [
            [
              "jetblue",
              "jetblue"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@flightno"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 215,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "how many 'united airlines ' flights go to airport 'asy ' ?",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "sql": "select count ( * ) from airlines join flights on flights@airline = airlines@uid where airlines@airline = 'value' and flights@destairport = 'value'",
        "value_match": [
          "airlines@airline",
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "united_airlines",
              "united_airlines"
            ]
          ],
          [
            [
              "asy",
              "asy"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@airline",
          "airlines",
          "airports"
        ],
        "partial_match": [
          "flights@flightno",
          "flights@sourceairport",
          "flights@destairport",
          "airlines@uid",
          "airlines@airline",
          "airports@airportcode",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 216,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "count the number of united airlines flights arriving in asy airport .",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "sql": "select count ( * ) from airlines join flights on flights@airline = airlines@uid where airlines@airline = 'value' and flights@destairport = 'value'",
        "value_match": [
          "airlines@airline",
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "united_airlines",
              "united_airlines"
            ]
          ],
          [
            [
              "asy",
              "asy"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@airline",
          "flights@flightno",
          "airlines",
          "airports"
        ],
        "partial_match": [
          "flights@sourceairport",
          "flights@destairport",
          "airlines@uid",
          "airlines@airline",
          "airlines@country",
          "airports@airportcode",
          "airports@airportname",
          "airports@country",
          "airports@countryabbrev"
        ]
      }
    ]
  },
  {
    "id": 217,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "how many 'united airlines ' flights depart from airport 'ahd ' ?",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "sql": "select count ( * ) from airlines join flights on flights@airline = airlines@uid where airlines@airline = 'value' and flights@sourceairport = 'value'",
        "value_match": [
          "airlines@airline",
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "united_airlines",
              "united_airlines"
            ]
          ],
          [
            [
              "ahd",
              "ahd"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@airline",
          "airlines",
          "airports"
        ],
        "partial_match": [
          "flights@flightno",
          "flights@sourceairport",
          "flights@destairport",
          "airlines@uid",
          "airlines@airline",
          "airports@airportcode",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 218,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "return the number of united airlines flights leaving from ahd airport .",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "sql": "select count ( * ) from airlines join flights on flights@airline = airlines@uid where airlines@airline = 'value' and flights@sourceairport = 'value'",
        "value_match": [
          "airlines@airline",
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "united_airlines",
              "united_airlines"
            ]
          ],
          [
            [
              "ahd",
              "ahd"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@airline",
          "flights@flightno",
          "airlines",
          "airports"
        ],
        "partial_match": [
          "flights@sourceairport",
          "flights@destairport",
          "airlines@uid",
          "airlines@airline",
          "airports@airportcode",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 219,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "how many united airlines flights go to city 'aberdeen ' ?",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "sql": "select count ( * ) from flights join airports on flights@destairport = airports@airportcode join airlines on airlines@uid = flights@airline where airports@city = 'value' and airlines@airline = 'value'",
        "value_match": [
          "airlines@airline",
          "airports@city"
        ],
        "value_alignment": [
          [
            [
              "united_airlines",
              "united_airlines"
            ]
          ],
          [
            [
              "aberdeen",
              "aberdeen"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@airline",
          "airlines",
          "airports@city"
        ],
        "partial_match": [
          "flights@flightno",
          "airlines@uid",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 220,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "count the number of united airlines flights that arrive in aberdeen .",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "sql": "select count ( * ) from flights join airports on flights@destairport = airports@airportcode join airlines on airlines@uid = flights@airline where airports@city = 'value' and airlines@airline = 'value'",
        "value_match": [
          "airlines@airline",
          "airports@city"
        ],
        "value_alignment": [
          [
            [
              "united_airlines",
              "united_airlines"
            ]
          ],
          [
            [
              "aberdeen",
              "aberdeen"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@airline",
          "flights@flightno",
          "airlines"
        ],
        "partial_match": [
          "airlines@uid",
          "airlines@airline",
          "airlines@country",
          "airports@country",
          "airports@countryabbrev"
        ]
      }
    ]
  },
  {
    "id": 221,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "which city has most number of arriving flights ?",
        "db_id": "flight_2",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has most number of arriving flights?",
        "sql": "select airports@city from airports join flights on airports@airportcode = flights@destairport group by airports@city order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights",
          "flights@flightno",
          "airports@city"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 222,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "which city has the most frequent destination airport ?",
        "db_id": "flight_2",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has the most frequent destination airport?",
        "sql": "select airports@city from airports join flights on airports@airportcode = flights@destairport group by airports@city order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights@destairport",
          "airports",
          "airports@city"
        ],
        "partial_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 223,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "which city has most number of departing flights ?",
        "db_id": "flight_2",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has most number of departing flights?",
        "sql": "select airports@city from airports join flights on airports@airportcode = flights@sourceairport group by airports@city order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights",
          "flights@flightno",
          "airports@city"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 224,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "which city is the most frequent source airport ?",
        "db_id": "flight_2",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city is the most frequent source airport?",
        "sql": "select airports@city from airports join flights on airports@airportcode = flights@sourceairport group by airports@city order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "airports",
          "airports@city"
        ],
        "partial_match": [
          "flights@sourceairport",
          "flights@destairport",
          "airports@airportcode",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 225,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what is the code of airport that has the highest number of flights ?",
        "db_id": "flight_2",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of airport that has the highest number of flights?",
        "sql": "select airports@airportcode from airports join flights on airports@airportcode = flights@destairport or t1.airportcode = t2.sourceairport group by airports@airportcode order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights",
          "flights@flightno",
          "airports",
          "airports@airportcode"
        ],
        "partial_match": [
          "flights@sourceairport",
          "flights@destairport",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 226,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what is the airport code of the airport with the most flights ?",
        "db_id": "flight_2",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the airport code of the airport with the most flights?",
        "sql": "select airports@airportcode from airports join flights on airports@airportcode = flights@destairport or t1.airportcode = t2.sourceairport group by airports@airportcode order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights",
          "flights@sourceairport",
          "flights@destairport",
          "airports",
          "airports@airportcode",
          "airports@airportname"
        ],
        "partial_match": [
          "flights@flightno"
        ]
      }
    ]
  },
  {
    "id": 227,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what is the code of airport that has fewest number of flights ?",
        "db_id": "flight_2",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "What is the code of airport that has fewest number of flights?",
        "sql": "select airports@airportcode from airports join flights on airports@airportcode = flights@destairport or t1.airportcode = t2.sourceairport group by airports@airportcode order by count ( * ) limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights",
          "flights@flightno",
          "airports",
          "airports@airportcode"
        ],
        "partial_match": [
          "flights@sourceairport",
          "flights@destairport",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 228,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "give the code of the airport with the least flights .",
        "db_id": "flight_2",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "Give the code of the airport with the least flights.",
        "sql": "select airports@airportcode from airports join flights on airports@airportcode = flights@destairport or t1.airportcode = t2.sourceairport group by airports@airportcode order by count ( * ) limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights",
          "airports",
          "airports@airportcode"
        ],
        "partial_match": [
          "flights@flightno",
          "flights@sourceairport",
          "flights@destairport",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 229,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "which airline has most number of flights ?",
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "Which airline has most number of flights?",
        "sql": "select airlines@airline from airlines join flights on airlines@uid = flights@airline group by airlines@airline order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights",
          "flights@airline",
          "flights@flightno",
          "airlines"
        ],
        "partial_match": [
          "airlines@uid",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 230,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what airline serves the most flights ?",
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "What airline serves the most flights?",
        "sql": "select airlines@airline from airlines join flights on airlines@uid = flights@airline group by airlines@airline order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights",
          "flights@airline",
          "airlines"
        ],
        "partial_match": [
          "flights@flightno",
          "airlines@uid",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 231,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "find the abbreviation and country of the airline that has fewest number of flights ?",
        "db_id": "flight_2",
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "sql": "select airlines@abbreviation , airlines@country from airlines join flights on airlines@uid = flights@airline group by airlines@airline order by count ( * ) limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights",
          "flights@airline",
          "flights@flightno",
          "airlines",
          "airlines@abbreviation",
          "airlines@country",
          "airports@country"
        ],
        "partial_match": [
          "airlines@uid",
          "airlines@airline",
          "airports@countryabbrev"
        ]
      }
    ]
  },
  {
    "id": 232,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what is the abbreviation of the airilne has the fewest flights and what country is it in ?",
        "db_id": "flight_2",
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "sql": "select airlines@abbreviation , airlines@country from airlines join flights on airlines@uid = flights@airline group by airlines@airline order by count ( * ) limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights",
          "airlines@abbreviation",
          "airlines@country",
          "airports@country"
        ],
        "partial_match": [
          "flights@flightno",
          "airports@countryabbrev"
        ]
      }
    ]
  },
  {
    "id": 233,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what are airlines that have some flight departing from airport 'ahd ' ?",
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "sql": "select airlines@airline from airlines join flights on airlines@uid = flights@airline where flights@sourceairport = 'value'",
        "value_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "ahd",
              "ahd"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@airline",
          "airlines",
          "airports"
        ],
        "partial_match": [
          "flights@flightno",
          "flights@sourceairport",
          "flights@destairport",
          "airlines@uid",
          "airlines@airline",
          "airports@airportcode",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 234,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "which airlines have a flight with source airport ahd ?",
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "Which airlines have a flight with source airport AHD?",
        "sql": "select airlines@airline from airlines join flights on airlines@uid = flights@airline where flights@sourceairport = 'value'",
        "value_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "ahd",
              "ahd"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@airline",
          "airlines",
          "airports"
        ],
        "partial_match": [
          "flights@flightno",
          "flights@sourceairport",
          "flights@destairport",
          "airlines@uid",
          "airlines@airline",
          "airports@airportcode",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 235,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what are airlines that have flights arriving at airport 'ahd ' ?",
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "sql": "select airlines@airline from airlines join flights on airlines@uid = flights@airline where flights@destairport = 'value'",
        "value_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "ahd",
              "ahd"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@airline",
          "airlines",
          "airports"
        ],
        "partial_match": [
          "flights@flightno",
          "flights@sourceairport",
          "flights@destairport",
          "airlines@uid",
          "airlines@airline",
          "airports@airportcode",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 236,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "which airlines have a flight with destination airport ahd ?",
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "Which airlines have a flight with destination airport AHD?",
        "sql": "select airlines@airline from airlines join flights on airlines@uid = flights@airline where flights@destairport = 'value'",
        "value_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "ahd",
              "ahd"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@airline",
          "flights@destairport",
          "airlines",
          "airports"
        ],
        "partial_match": [
          "flights@flightno",
          "flights@sourceairport",
          "airlines@uid",
          "airlines@airline",
          "airports@airportcode",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 237,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "find all airlines that have flights from both airports 'apg ' and 'cvo ' .",
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "sql": "select airlines@airline from airlines join flights on airlines@uid = flights@airline where flights@sourceairport = 'value' intersect select airlines@airline from airlines join flights on airlines@uid = flights@airline where flights@sourceairport = 'value'",
        "value_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "apg",
              "apg"
            ]
          ],
          [
            [
              "cvo",
              "cvo"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@airline",
          "airlines",
          "airports"
        ],
        "partial_match": [
          "flights@flightno",
          "flights@sourceairport",
          "flights@destairport",
          "airlines@uid",
          "airlines@airline",
          "airports@airportcode",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 238,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "which airlines have departing flights from both apg and cvo airports ?",
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "sql": "select airlines@airline from airlines join flights on airlines@uid = flights@airline where flights@sourceairport = 'value' intersect select airlines@airline from airlines join flights on airlines@uid = flights@airline where flights@sourceairport = 'value'",
        "value_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "apg",
              "apg"
            ]
          ],
          [
            [
              "cvo",
              "cvo"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@airline",
          "airlines",
          "airports"
        ],
        "partial_match": [
          "flights@flightno",
          "flights@sourceairport",
          "flights@destairport",
          "airlines@uid",
          "airlines@airline",
          "airports@airportcode",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 239,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "find all airlines that have flights from airport 'cvo ' but not from 'apg ' .",
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "sql": "select airlines@airline from airlines join flights on airlines@uid = flights@airline where flights@sourceairport = 'value' except select airlines@airline from airlines join flights on airlines@uid = flights@airline where flights@sourceairport = 'value'",
        "value_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "cvo",
              "cvo"
            ]
          ],
          [
            [
              "apg",
              "apg"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@airline",
          "airlines",
          "airports"
        ],
        "partial_match": [
          "flights@flightno",
          "flights@sourceairport",
          "flights@destairport",
          "airlines@uid",
          "airlines@airline",
          "airports@airportcode",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 240,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "which airlines have departures from cvo but not from apg airports ?",
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "sql": "select airlines@airline from airlines join flights on airlines@uid = flights@airline where flights@sourceairport = 'value' except select airlines@airline from airlines join flights on airlines@uid = flights@airline where flights@sourceairport = 'value'",
        "value_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "cvo",
              "cvo"
            ]
          ],
          [
            [
              "apg",
              "apg"
            ]
          ]
        ],
        "exact_match": [
          "flights@airline",
          "airlines",
          "airports"
        ],
        "partial_match": [
          "flights@sourceairport",
          "flights@destairport",
          "airlines@uid",
          "airlines@airline",
          "airports@airportcode",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 241,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "find all airlines that have at least 10 flights .",
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Find all airlines that have at least 10 flights.",
        "sql": "select airlines@airline from airlines join flights on airlines@uid = flights@airline group by airlines@airline having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights",
          "flights@airline",
          "airlines"
        ],
        "partial_match": [
          "flights@flightno",
          "airlines@uid",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 242,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "which airlines have at least 10 flights ?",
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Which airlines have at least 10 flights?",
        "sql": "select airlines@airline from airlines join flights on airlines@uid = flights@airline group by airlines@airline having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights",
          "flights@airline",
          "airlines"
        ],
        "partial_match": [
          "flights@flightno",
          "airlines@uid",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 243,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "find all airlines that have fewer than 200 flights .",
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Find all airlines that have fewer than 200 flights.",
        "sql": "select airlines@airline from airlines join flights on airlines@uid = flights@airline group by airlines@airline having count ( * ) < 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights",
          "flights@airline",
          "airlines"
        ],
        "partial_match": [
          "flights@flightno",
          "airlines@uid",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 244,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "which airlines have less than 200 flights ?",
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Which airlines have less than 200 flights?",
        "sql": "select airlines@airline from airlines join flights on airlines@uid = flights@airline group by airlines@airline having count ( * ) < 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights",
          "flights@airline",
          "airlines"
        ],
        "partial_match": [
          "flights@flightno",
          "airlines@uid",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 245,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what are flight numbers of airline `` united airlines '' ?",
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "sql": "select flights@flightno from flights join airlines on airlines@uid = flights@airline where airlines@airline = 'value'",
        "value_match": [
          "airlines@airline"
        ],
        "value_alignment": [
          [
            [
              "united_airlines",
              "united_airlines"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@airline",
          "flights@flightno",
          "airlines"
        ],
        "partial_match": [
          "airlines@uid",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 246,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "which flight numbers correspond to united airlines flights ?",
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "question": "Which flight numbers correspond to United Airlines flights?",
        "sql": "select flights@flightno from flights join airlines on airlines@uid = flights@airline where airlines@airline = 'value'",
        "value_match": [
          "airlines@airline"
        ],
        "value_alignment": [
          [
            [
              "united_airlines",
              "united_airlines"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@airline",
          "flights@flightno",
          "airlines"
        ],
        "partial_match": [
          "airlines@uid",
          "airlines@airline"
        ]
      }
    ]
  },
  {
    "id": 247,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what are flight numbers of flights departing from airport `` apg '' ?",
        "db_id": "flight_2",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "sql": "select flights@flightno from flights where flights@sourceairport = 'value'",
        "value_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "apg",
              "apg"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@flightno",
          "airports"
        ],
        "partial_match": [
          "flights@sourceairport",
          "flights@destairport",
          "airports@airportcode",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 248,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "give the flight numbers of flights leaving from apg .",
        "db_id": "flight_2",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights leaving from APG.",
        "sql": "select flights@flightno from flights where flights@sourceairport = 'value'",
        "value_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "apg",
              "apg"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@flightno"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 249,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what are flight numbers of flights arriving at airport `` apg '' ?",
        "db_id": "flight_2",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "sql": "select flights@flightno from flights where flights@destairport = 'value'",
        "value_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "apg",
              "apg"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@flightno",
          "airports"
        ],
        "partial_match": [
          "flights@sourceairport",
          "flights@destairport",
          "airports@airportcode",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 250,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "give the flight numbers of flights landing at apg .",
        "db_id": "flight_2",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights landing at APG.",
        "sql": "select flights@flightno from flights where flights@destairport = 'value'",
        "value_match": [
          "flights@sourceairport",
          "airports@airportcode",
          "flights@destairport"
        ],
        "value_alignment": [
          [
            [
              "apg",
              "apg"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@flightno"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 251,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what are flight numbers of flights departing from city `` aberdeen `` ?",
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "sql": "select flights@flightno from flights join airports on flights@sourceairport = airports@airportcode where airports@city = 'value'",
        "value_match": [
          "airports@city"
        ],
        "value_alignment": [
          [
            [
              "aberdeen",
              "aberdeen"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@flightno",
          "airports@city"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 252,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "give the flight numbers of flights leaving from aberdeen .",
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "sql": "select flights@flightno from flights join airports on flights@sourceairport = airports@airportcode where airports@city = 'value'",
        "value_match": [
          "airports@city"
        ],
        "value_alignment": [
          [
            [
              "aberdeen",
              "aberdeen"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@flightno"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 253,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "what are flight numbers of flights arriving at city `` aberdeen '' ?",
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "sql": "select flights@flightno from flights join airports on flights@destairport = airports@airportcode where airports@city = 'value'",
        "value_match": [
          "airports@city"
        ],
        "value_alignment": [
          [
            [
              "aberdeen",
              "aberdeen"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@flightno",
          "airports@city"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 254,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "give the flight numbers of flights arriving in aberdeen .",
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "sql": "select flights@flightno from flights join airports on flights@destairport = airports@airportcode where airports@city = 'value'",
        "value_match": [
          "airports@city"
        ],
        "value_alignment": [
          [
            [
              "aberdeen",
              "aberdeen"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@flightno"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 255,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "find the number of flights landing in the city of aberdeen or abilene .",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "sql": "select count ( * ) from flights join airports on flights@destairport = airports@airportcode where airports@city = 'value' or airports@city = 'value'",
        "value_match": [
          "airports@city"
        ],
        "value_alignment": [
          [
            [
              "aberdeen",
              "aberdeen"
            ]
          ],
          [
            [
              "abilene",
              "abilene"
            ]
          ]
        ],
        "exact_match": [
          "flights",
          "flights@flightno",
          "airports@city"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 256,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "how many flights land in aberdeen or abilene ?",
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "How many flights land in Aberdeen or Abilene?",
        "sql": "select count ( * ) from flights join airports on flights@destairport = airports@airportcode where airports@city = 'value' or airports@city = 'value'",
        "value_match": [
          "airports@city"
        ],
        "value_alignment": [
          [
            [
              "aberdeen",
              "aberdeen"
            ]
          ],
          [
            [
              "abilene",
              "abilene"
            ]
          ]
        ],
        "exact_match": [
          "flights"
        ],
        "partial_match": [
          "flights@flightno"
        ]
      }
    ]
  },
  {
    "id": 257,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "find the name of airports which do not have any flight in and out .",
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Find the name of airports which do not have any flight in and out.",
        "sql": "select airports@airportname from airports where airports@airportcode not in ( select flights@sourceairport from flights union select flights@destairport from flights )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights",
          "airports",
          "airports@airportname"
        ],
        "partial_match": [
          "flights@flightno",
          "flights@sourceairport",
          "flights@destairport",
          "airlines@airline",
          "airports@airportcode"
        ]
      }
    ]
  },
  {
    "id": 258,
    "database_id": "flight_2",
    "interaction": [
      {
        "utterance": "which airports do not have departing or arriving flights ?",
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Which airports do not have departing or arriving flights?",
        "sql": "select airports@airportname from airports where airports@airportcode not in ( select flights@sourceairport from flights union select flights@destairport from flights )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "flights",
          "airports"
        ],
        "partial_match": [
          "flights@flightno",
          "flights@sourceairport",
          "flights@destairport",
          "airports@airportcode",
          "airports@airportname"
        ]
      }
    ]
  },
  {
    "id": 259,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "how many employees are there ?",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) FROM employee",
        "question": "How many employees are there?",
        "sql": "select count ( * ) from employee",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee"
        ],
        "partial_match": [
          "evaluation@employee_id",
          "employee@employee_id",
          "hiring@employee_id"
        ]
      }
    ]
  },
  {
    "id": 260,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "count the number of employees",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) FROM employee",
        "question": "Count the number of employees",
        "sql": "select count ( * ) from employee",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee"
        ],
        "partial_match": [
          "evaluation@employee_id",
          "employee@employee_id",
          "shop@number_products",
          "hiring@employee_id"
        ]
      }
    ]
  },
  {
    "id": 261,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "sort employee names by their age in ascending order .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM employee ORDER BY age",
        "question": "Sort employee names by their age in ascending order.",
        "sql": "select employee@name from employee order by employee@age",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee",
          "employee@name",
          "employee@age",
          "shop@name"
        ],
        "partial_match": [
          "evaluation@employee_id",
          "employee@employee_id",
          "shop@manager_name",
          "hiring@employee_id"
        ]
      }
    ]
  },
  {
    "id": 262,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "list the names of employees and sort in ascending order of age .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM employee ORDER BY age",
        "question": "List the names of employees and sort in ascending order of age.",
        "sql": "select employee@name from employee order by employee@age",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee",
          "employee@name",
          "employee@age",
          "shop@name"
        ],
        "partial_match": [
          "evaluation@employee_id",
          "employee@employee_id",
          "shop@manager_name",
          "hiring@employee_id"
        ]
      }
    ]
  },
  {
    "id": 263,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "what is the number of employees from each city ?",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "question": "What is the number of employees from each city?",
        "sql": "select count ( * ) , employee@city from employee group by employee@city",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee",
          "employee@city"
        ],
        "partial_match": [
          "evaluation@employee_id",
          "employee@employee_id",
          "shop@number_products",
          "hiring@employee_id"
        ]
      }
    ]
  },
  {
    "id": 264,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "count the number of employees for each city .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "question": "Count the number of employees for each city.",
        "sql": "select count ( * ) , employee@city from employee group by employee@city",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee",
          "employee@city"
        ],
        "partial_match": [
          "evaluation@employee_id",
          "employee@employee_id",
          "shop@number_products",
          "hiring@employee_id"
        ]
      }
    ]
  },
  {
    "id": 265,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "which cities do more than one employee under age 30 come from ?",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Which cities do more than one employee under age 30 come from?",
        "sql": "select employee@city from employee where employee@age < 'value' group by employee@city having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee",
          "employee@age",
          "employee@city"
        ],
        "partial_match": [
          "evaluation@employee_id",
          "employee@employee_id",
          "hiring@employee_id"
        ]
      }
    ]
  },
  {
    "id": 266,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "find the cities that have more than one employee under age 30 .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Find the cities that have more than one employee under age 30.",
        "sql": "select employee@city from employee where employee@age < 'value' group by employee@city having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee",
          "employee@age",
          "employee@city"
        ],
        "partial_match": [
          "evaluation@employee_id",
          "employee@employee_id",
          "hiring@employee_id"
        ]
      }
    ]
  },
  {
    "id": 267,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "find the number of shops in each location .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "question": "Find the number of shops in each location.",
        "sql": "select count ( * ) , shop@location from shop group by shop@location",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "shop",
          "shop@location"
        ],
        "partial_match": [
          "shop@number_products"
        ]
      }
    ]
  },
  {
    "id": 268,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "how many shops are there in each location ?",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "question": "How many shops are there in each location?",
        "sql": "select count ( * ) , shop@location from shop group by shop@location",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "shop",
          "shop@location"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 269,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "find the manager name and district of the shop whose number of products is the largest .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "sql": "select shop@manager_name , shop@district from shop order by shop@number_products desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee@name",
          "shop",
          "shop@name",
          "shop@district",
          "shop@number_products",
          "shop@manager_name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 270,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "what are the manager name and district of the shop that sells the largest number of products ?",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "sql": "select shop@manager_name , shop@district from shop order by shop@number_products desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee@name",
          "shop",
          "shop@name",
          "shop@district",
          "shop@number_products",
          "shop@manager_name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 271,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "find the minimum and maximum number of products of all stores .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "find the minimum and maximum number of products of all stores.",
        "sql": "select min ( shop@number_products ) , max ( shop@number_products ) from shop",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "shop@number_products"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 272,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "what are the minimum and maximum number of products across all the shops ?",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "What are the minimum and maximum number of products across all the shops?",
        "sql": "select min ( shop@number_products ) , max ( shop@number_products ) from shop",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "shop",
          "shop@number_products"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 273,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "return the name , location and district of all shops in descending order of number of products .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "sql": "select shop@name , shop@location , shop@district from shop order by shop@number_products desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee@name",
          "shop",
          "shop@name",
          "shop@location",
          "shop@district",
          "shop@number_products"
        ],
        "partial_match": [
          "shop@manager_name"
        ]
      }
    ]
  },
  {
    "id": 274,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "sort all the shops by number products in descending order , and return the name , location and district of each shop .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "sql": "select shop@name , shop@location , shop@district from shop order by shop@number_products desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee@name",
          "shop",
          "shop@name",
          "shop@location",
          "shop@district",
          "shop@number_products"
        ],
        "partial_match": [
          "shop@manager_name"
        ]
      }
    ]
  },
  {
    "id": 275,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "find the names of stores whose number products is more than the average number of products .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "sql": "select shop@name from shop where shop@number_products > ( select avg ( shop@number_products ) from shop )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee@name",
          "shop@name",
          "shop@number_products"
        ],
        "partial_match": [
          "shop@manager_name"
        ]
      }
    ]
  },
  {
    "id": 276,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "which shops ' number products is above the average ? give me the shop names .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "sql": "select shop@name from shop where shop@number_products > ( select avg ( shop@number_products ) from shop )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee@name",
          "shop",
          "shop@name",
          "shop@number_products"
        ],
        "partial_match": [
          "shop@manager_name"
        ]
      }
    ]
  },
  {
    "id": 277,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "find the name of employee who was awarded the most times in the evaluation .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "sql": "select employee@name from employee join evaluation on employee@employee_id = evaluation@employee_id group by evaluation@employee_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "evaluation",
          "employee",
          "employee@name",
          "shop@name"
        ],
        "partial_match": [
          "evaluation@employee_id",
          "evaluation@year_awarded",
          "employee@employee_id",
          "shop@manager_name",
          "hiring@employee_id",
          "hiring@is_full_time"
        ]
      }
    ]
  },
  {
    "id": 278,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "which employee received the most awards in evaluations ? give me the employee name .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "sql": "select employee@name from employee join evaluation on employee@employee_id = evaluation@employee_id group by evaluation@employee_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "evaluation",
          "evaluation@employee_id",
          "employee",
          "employee@employee_id",
          "employee@name",
          "shop@name",
          "hiring@employee_id"
        ],
        "partial_match": [
          "evaluation@year_awarded",
          "shop@manager_name"
        ]
      }
    ]
  },
  {
    "id": 279,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "find the name of the employee who got the highest one time bonus .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "question": "Find the name of the employee who got the highest one time bonus.",
        "sql": "select employee@name from employee join evaluation on employee@employee_id = evaluation@employee_id order by evaluation@bonus desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee",
          "employee@name",
          "shop@name"
        ],
        "partial_match": [
          "evaluation@employee_id",
          "evaluation@bonus",
          "employee@employee_id",
          "shop@manager_name",
          "hiring@employee_id",
          "hiring@is_full_time"
        ]
      }
    ]
  },
  {
    "id": 280,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "which employee received the biggest bonus ? give me the employee name .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "question": "Which employee received the biggest bonus? Give me the employee name.",
        "sql": "select employee@name from employee join evaluation on employee@employee_id = evaluation@employee_id order by evaluation@bonus desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "evaluation@employee_id",
          "employee",
          "employee@employee_id",
          "employee@name",
          "shop@name",
          "hiring@employee_id"
        ],
        "partial_match": [
          "evaluation@bonus",
          "shop@manager_name"
        ]
      }
    ]
  },
  {
    "id": 281,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "find the names of employees who never won any award in the evaluation .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "sql": "select employee@name from employee where employee@employee_id not in ( select evaluation@employee_id from evaluation )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "evaluation",
          "employee",
          "employee@name",
          "shop@name"
        ],
        "partial_match": [
          "evaluation@employee_id",
          "evaluation@year_awarded",
          "employee@employee_id",
          "shop@manager_name",
          "hiring@employee_id"
        ]
      }
    ]
  },
  {
    "id": 282,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "what are the names of the employees who never received any evaluation ?",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "question": "What are the names of the employees who never received any evaluation?",
        "sql": "select employee@name from employee where employee@employee_id not in ( select evaluation@employee_id from evaluation )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "evaluation",
          "employee",
          "employee@name",
          "shop@name"
        ],
        "partial_match": [
          "evaluation@employee_id",
          "employee@employee_id",
          "shop@manager_name",
          "hiring@employee_id"
        ]
      }
    ]
  },
  {
    "id": 283,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "what is the name of the shop that is hiring the largest number of employees ?",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the shop that is hiring the largest number of employees?",
        "sql": "select shop@name from hiring join shop on hiring@shop_id = shop@shop_id group by hiring@shop_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee",
          "employee@name",
          "shop",
          "shop@name"
        ],
        "partial_match": [
          "evaluation@employee_id",
          "employee@employee_id",
          "shop@number_products",
          "shop@manager_name",
          "hiring@employee_id"
        ]
      }
    ]
  },
  {
    "id": 284,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "which shop has the most employees ? give me the shop name .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which shop has the most employees? Give me the shop name.",
        "sql": "select shop@name from hiring join shop on hiring@shop_id = shop@shop_id group by hiring@shop_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee",
          "employee@name",
          "shop",
          "shop@name"
        ],
        "partial_match": [
          "evaluation@employee_id",
          "employee@employee_id",
          "shop@manager_name",
          "hiring@employee_id"
        ]
      }
    ]
  },
  {
    "id": 285,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "find the name of the shops that do not hire any employee .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Find the name of the shops that do not hire any employee.",
        "sql": "select shop@name from shop where shop@shop_id not in ( select hiring@shop_id from hiring )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee",
          "employee@name",
          "shop",
          "shop@name"
        ],
        "partial_match": [
          "evaluation@employee_id",
          "employee@employee_id",
          "shop@manager_name",
          "hiring@employee_id"
        ]
      }
    ]
  },
  {
    "id": 286,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "which shops run with no employees ? find the shop names",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Which shops run with no employees? Find the shop names",
        "sql": "select shop@name from shop where shop@shop_id not in ( select hiring@shop_id from hiring )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee",
          "employee@name",
          "shop",
          "shop@name"
        ],
        "partial_match": [
          "evaluation@employee_id",
          "employee@employee_id",
          "shop@manager_name",
          "hiring@employee_id"
        ]
      }
    ]
  },
  {
    "id": 287,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "find the number of employees hired in each shop ; show the shop name as well .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "sql": "select count ( * ) , shop@name from hiring join shop on hiring@shop_id = shop@shop_id group by shop@name",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee",
          "employee@name",
          "shop",
          "shop@name"
        ],
        "partial_match": [
          "evaluation@employee_id",
          "employee@employee_id",
          "shop@number_products",
          "shop@manager_name",
          "hiring@employee_id"
        ]
      }
    ]
  },
  {
    "id": 288,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "for each shop , return the number of employees working there and the name of the shop .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "sql": "select count ( * ) , shop@name from hiring join shop on hiring@shop_id = shop@shop_id group by shop@name",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "employee",
          "employee@name",
          "shop",
          "shop@name"
        ],
        "partial_match": [
          "evaluation@employee_id",
          "employee@employee_id",
          "shop@number_products",
          "shop@manager_name",
          "hiring@employee_id"
        ]
      }
    ]
  },
  {
    "id": 289,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "what is total bonus given in all evaluations ?",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT sum(bonus) FROM evaluation",
        "question": "What is total bonus given in all evaluations?",
        "sql": "select sum ( evaluation@bonus ) from evaluation",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "evaluation"
        ],
        "partial_match": [
          "evaluation@bonus"
        ]
      }
    ]
  },
  {
    "id": 290,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "find the total amount of bonus given in all the evaluations .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT sum(bonus) FROM evaluation",
        "question": "Find the total amount of bonus given in all the evaluations.",
        "sql": "select sum ( evaluation@bonus ) from evaluation",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "evaluation"
        ],
        "partial_match": [
          "evaluation@bonus"
        ]
      }
    ]
  },
  {
    "id": 291,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "give me all the information about hiring .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT * FROM hiring",
        "question": "Give me all the information about hiring.",
        "sql": "select * from hiring",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [],
        "partial_match": []
      }
    ]
  },
  {
    "id": 292,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "what is all the information about hiring ?",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT * FROM hiring",
        "question": "What is all the information about hiring?",
        "sql": "select * from hiring",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [],
        "partial_match": []
      }
    ]
  },
  {
    "id": 293,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "which district has both stores with less than 3000 products and stores with more than 10000 products ?",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "sql": "select shop@district from shop where shop@number_products < 'value' intersect select shop@district from shop where shop@number_products > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "shop@district",
          "shop@number_products"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 294,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "sql": "select shop@district from shop where shop@number_products < 'value' intersect select shop@district from shop where shop@number_products > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "shop",
          "shop@district",
          "shop@number_products"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 295,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "how many different store locations are there ?",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(DISTINCT LOCATION) FROM shop",
        "question": "How many different store locations are there?",
        "sql": "select count ( distinct shop@location ) from shop",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "shop@location"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 296,
    "database_id": "employee_hire_evaluation",
    "interaction": [
      {
        "utterance": "count the number of distinct store locations .",
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(DISTINCT LOCATION) FROM shop",
        "question": "Count the number of distinct store locations.",
        "sql": "select count ( distinct shop@location ) from shop",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "shop@location"
        ],
        "partial_match": [
          "shop@number_products"
        ]
      }
    ]
  },
  {
    "id": 297,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "how many documents do we have ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Documents",
        "question": "How many documents do we have?",
        "sql": "select count ( * ) from documents",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "documents"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 298,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "count the number of documents .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Documents",
        "question": "Count the number of documents.",
        "sql": "select count ( * ) from documents",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "documents"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "templates@version_number",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 299,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "list document ids , document names , and document descriptions for all documents .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "sql": "select documents@document_id , documents@document_name , documents@document_description from documents",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "paragraphs@document_id",
          "documents",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ],
        "partial_match": [
          "ref_template_types@template_type_description"
        ]
      }
    ]
  },
  {
    "id": 300,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the ids , names , and descriptions for all documents ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "What are the ids, names, and descriptions for all documents?",
        "sql": "select documents@document_id , documents@document_name , documents@document_description from documents",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "documents",
          "documents@document_name",
          "documents@document_description"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "ref_template_types@template_type_description",
          "documents@document_id"
        ]
      }
    ]
  },
  {
    "id": 301,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what is the document name and template id for document with description with the letter 'w ' in it ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "sql": "select documents@document_name , documents@template_id from documents where documents@document_description like 'value'",
        "value_match": [
          "documents@document_description",
          "templates@template_details"
        ],
        "value_alignment": [
          [
            [
              "w",
              "w"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "paragraphs@document_id",
          "ref_template_types@template_type_description",
          "templates",
          "documents",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ],
        "partial_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ]
      }
    ]
  },
  {
    "id": 302,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "return the names and template ids for documents that contain the letter w in their description .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "sql": "select documents@document_name , documents@template_id from documents where documents@document_description like 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types@template_type_description",
          "templates",
          "documents",
          "documents@document_name",
          "documents@document_description"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "ref_template_types",
          "ref_template_types@template_type_code",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id"
        ]
      }
    ]
  },
  {
    "id": 303,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what is the document id , template id and description for document named `` robbin cv '' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "sql": "select documents@document_id , documents@template_id , documents@document_description from documents where documents@document_name = 'value'",
        "value_match": [
          "templates@template_details",
          "ref_template_types@template_type_code",
          "documents@document_name",
          "templates@template_type_code",
          "ref_template_types@template_type_description"
        ],
        "value_alignment": [
          [
            [
              "robbin_cv",
              "robbin_cv"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "cv",
              "cv"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "paragraphs@document_id",
          "ref_template_types@template_type_description",
          "templates",
          "documents",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ],
        "partial_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ]
      }
    ]
  },
  {
    "id": 304,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "return the document id , template id , and description for the document with the name robbin cv .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "sql": "select documents@document_id , documents@template_id , documents@document_description from documents where documents@document_name = 'value'",
        "value_match": [
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "documents@document_name",
          "templates@template_type_code"
        ],
        "value_alignment": [
          [
            [
              "robbin_cv",
              "robbin_cv"
            ]
          ],
          [
            [
              "cv",
              "cv"
            ]
          ]
        ],
        "exact_match": [
          "paragraphs@document_id",
          "ref_template_types@template_type_description",
          "templates",
          "documents",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ],
        "partial_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ]
      }
    ]
  },
  {
    "id": 305,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "how many different templates do all document use ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "How many different templates do all document use?",
        "sql": "select count ( distinct documents@template_id ) from documents",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "templates",
          "documents"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 306,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "count the number of different templates used for documents .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "Count the number of different templates used for documents.",
        "sql": "select count ( distinct documents@template_id ) from documents",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "templates",
          "documents"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates@template_id",
          "templates@version_number",
          "templates@template_type_code",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 307,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "how many documents are using the template with type code 'ppt ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "How many documents are using the template with type code 'PPT'?",
        "sql": "select count ( * ) from documents join templates on documents@template_id = templates@template_id where templates@template_type_code = 'value'",
        "value_match": [
          "templates@template_details",
          "templates@template_type_code",
          "ref_template_types@template_type_code"
        ],
        "value_alignment": [
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "ppt",
              "ppt"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_type_code",
          "documents"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "templates@template_id",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 308,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "count the number of documents that use the ppt template type .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "Count the number of documents that use the PPT template type.",
        "sql": "select count ( * ) from documents join templates on documents@template_id = templates@template_id where templates@template_type_code = 'value'",
        "value_match": [
          "ref_template_types@template_type_code",
          "templates@template_type_code"
        ],
        "value_alignment": [
          [
            [
              "ppt",
              "ppt"
            ]
          ]
        ],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_type_code",
          "documents"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "templates@template_id",
          "templates@version_number",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 309,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "show all template ids and number of documents using each template .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "Show all template ids and number of documents using each template.",
        "sql": "select documents@template_id , count ( * ) from documents group by documents@template_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents",
          "documents@template_id"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "templates@version_number",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 310,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are all different template ids used for documents , and how many times were each of them used ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "sql": "select documents@template_id , count ( * ) from documents group by documents@template_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "templates",
          "documents"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 311,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what is the id and type code for the template used by the most documents ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and type code for the template used by the most documents?",
        "sql": "select documents@template_id , templates@template_type_code from documents join templates on documents@template_id = templates@template_id group by documents@template_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_type_code",
          "documents"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "templates@template_id",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 312,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "return the id and type code of the template that is used for the greatest number of documents .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "sql": "select documents@template_id , templates@template_type_code from documents join templates on documents@template_id = templates@template_id group by documents@template_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_type_code",
          "documents"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "templates@template_id",
          "templates@version_number",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 313,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "show ids for all templates that are used by more than one document .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "Show ids for all templates that are used by more than one document.",
        "sql": "select documents@template_id from documents group by documents@template_id having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "templates",
          "documents"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 314,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the template ids of any templates used in more than a single document ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "What are the template ids of any templates used in more than a single document?",
        "sql": "select documents@template_id from documents group by documents@template_id having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents",
          "documents@template_id"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 315,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "show ids for all templates not used by any document .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "Show ids for all templates not used by any document.",
        "sql": "select templates@template_id from templates except select documents@template_id from documents",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "templates",
          "documents"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 316,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the ids for templates that are not used in any documents ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "What are the ids for templates that are not used in any documents?",
        "sql": "select templates@template_id from templates except select documents@template_id from documents",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "templates",
          "documents"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 317,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "how many templates do we have ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Templates",
        "question": "How many templates do we have?",
        "sql": "select count ( * ) from templates",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "templates"
        ],
        "partial_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ]
      }
    ]
  },
  {
    "id": 318,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "count the number of templates .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Templates",
        "question": "Count the number of templates.",
        "sql": "select count ( * ) from templates",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "templates"
        ],
        "partial_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates@template_id",
          "templates@version_number",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ]
      }
    ]
  },
  {
    "id": 319,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "show template ids , version numbers , and template type codes for all templates .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "sql": "select templates@template_id , templates@version_number , templates@template_type_code from templates",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@version_number",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 320,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the ids , version numbers , and type codes for each template ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "question": "What are the ids, version numbers, and type codes for each template?",
        "sql": "select templates@template_id , templates@version_number , templates@template_type_code from templates",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@version_number",
          "templates@template_type_code"
        ],
        "partial_match": [
          "templates@template_id",
          "templates@template_details",
          "documents@template_id"
        ]
      }
    ]
  },
  {
    "id": 321,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "show all distinct template type codes for all templates .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "Show all distinct template type codes for all templates.",
        "sql": "select distinct templates@template_type_code from templates",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 322,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the different template type codes ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "What are the different template type codes?",
        "sql": "select distinct templates@template_type_code from templates",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_type_code"
        ],
        "partial_match": [
          "templates@template_id",
          "templates@template_details",
          "documents@template_id"
        ]
      }
    ]
  },
  {
    "id": 323,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the ids of templates with template type code pp or ppt ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "question": "What are the ids of templates with template type code PP or PPT?",
        "sql": "select templates@template_id from templates where templates@template_type_code = 'value' or templates@template_type_code = 'value'",
        "value_match": [
          "ref_template_types@template_type_code",
          "templates@template_type_code"
        ],
        "value_alignment": [
          [
            [
              "pp",
              "pp"
            ]
          ],
          [
            [
              "ppt",
              "ppt"
            ]
          ]
        ],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 324,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "return the ids of templates that have the code pp or ppt .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "question": "Return the ids of templates that have the code PP or PPT.",
        "sql": "select templates@template_id from templates where templates@template_type_code = 'value' or templates@template_type_code = 'value'",
        "value_match": [
          "ref_template_types@template_type_code",
          "templates@template_type_code"
        ],
        "value_alignment": [
          [
            [
              "pp",
              "pp"
            ]
          ],
          [
            [
              "ppt",
              "ppt"
            ]
          ]
        ],
        "exact_match": [
          "ref_template_types@template_type_code",
          "templates",
          "templates@template_type_code"
        ],
        "partial_match": [
          "ref_template_types",
          "ref_template_types@template_type_description",
          "templates@template_id",
          "templates@template_details",
          "documents@template_id"
        ]
      }
    ]
  },
  {
    "id": 325,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "how many templates have template type code cv ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "How many templates have template type code CV?",
        "sql": "select count ( * ) from templates where templates@template_type_code = 'value'",
        "value_match": [
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates@template_type_code"
        ],
        "value_alignment": [
          [
            [
              "cv",
              "cv"
            ]
          ]
        ],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 326,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "count the number of templates of the type cv .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "Count the number of templates of the type CV.",
        "sql": "select count ( * ) from templates where templates@template_type_code = 'value'",
        "value_match": [
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates@template_type_code"
        ],
        "value_alignment": [
          [
            [
              "cv",
              "cv"
            ]
          ]
        ],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_type_code"
        ],
        "partial_match": [
          "templates@template_id",
          "templates@version_number",
          "templates@template_details",
          "documents@template_id"
        ]
      }
    ]
  },
  {
    "id": 327,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what is the version number and template type code for the template with version number later than 5 ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "sql": "select templates@version_number , templates@template_type_code from templates where templates@version_number > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@version_number",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 328,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "return the version numbers and template type codes of templates with a version number greater than 5 .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "sql": "select templates@version_number , templates@template_type_code from templates where templates@version_number > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@version_number",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 329,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "show all template type codes and number of templates for each .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "Show all template type codes and number of templates for each.",
        "sql": "select templates@template_type_code , count ( * ) from templates group by templates@template_type_code",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ],
        "partial_match": [
          "templates@version_number"
        ]
      }
    ]
  },
  {
    "id": 330,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the different template type codes , and how many templates correspond to each ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "sql": "select templates@template_type_code , count ( * ) from templates group by templates@template_type_code",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 331,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "which template type code has most number of templates ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which template type code has most number of templates?",
        "sql": "select templates@template_type_code from templates group by templates@template_type_code order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ],
        "partial_match": [
          "templates@version_number"
        ]
      }
    ]
  },
  {
    "id": 332,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "return the type code of the template type that the most templates belong to .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the type code of the template type that the most templates belong to.",
        "sql": "select templates@template_type_code from templates group by templates@template_type_code order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 333,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "show all template type codes with less than three templates .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "Show all template type codes with less than three templates.",
        "sql": "select templates@template_type_code from templates group by templates@template_type_code having count ( * ) < 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 334,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the codes of template types that have fewer than 3 templates ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "sql": "select templates@template_type_code from templates group by templates@template_type_code having count ( * ) < 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 335,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what the smallest version number and its template type code ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "question": "What the smallest version number and its template type code?",
        "sql": "select min ( templates@version_number ) , templates@template_type_code from templates",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@version_number",
          "templates@template_type_code"
        ],
        "partial_match": [
          "templates@template_id",
          "templates@template_details",
          "documents@template_id"
        ]
      }
    ]
  },
  {
    "id": 336,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "return the lowest version number , along with its corresponding template type code .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "sql": "select min ( templates@version_number ) , templates@template_type_code from templates",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@version_number",
          "templates@template_type_code"
        ],
        "partial_match": [
          "templates@template_id",
          "templates@template_details",
          "documents@template_id"
        ]
      }
    ]
  },
  {
    "id": 337,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what is the template type code of the template used by document with the name `` data base '' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "sql": "select templates@template_type_code from templates join documents on templates@template_id = documents@template_id where documents@document_name = 'value'",
        "value_match": [
          "templates@template_details",
          "documents@document_name"
        ],
        "value_alignment": [
          [
            [
              "data_base",
              "data_base"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents",
          "documents@template_id",
          "documents@document_name"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "documents@document_id",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 338,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "return the template type code of the template that is used by a document named data base .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "sql": "select templates@template_type_code from templates join documents on templates@template_id = documents@template_id where documents@document_name = 'value'",
        "value_match": [
          "documents@document_name"
        ],
        "value_alignment": [
          [
            [
              "data_base",
              "data_base"
            ]
          ]
        ],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents",
          "documents@template_id",
          "documents@document_name"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "documents@document_id",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 339,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "show all document names using templates with template type code bk .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "Show all document names using templates with template type code BK.",
        "sql": "select documents@document_name from templates join documents on templates@template_id = documents@template_id where templates@template_type_code = 'value'",
        "value_match": [
          "ref_template_types@template_type_code",
          "templates@template_type_code"
        ],
        "value_alignment": [
          [
            [
              "bk",
              "bk"
            ]
          ]
        ],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents",
          "documents@template_id",
          "documents@document_name"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "documents@document_id",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 340,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the names of documents that use templates with the code bk ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "What are the names of documents that use templates with the code BK?",
        "sql": "select documents@document_name from templates join documents on templates@template_id = documents@template_id where templates@template_type_code = 'value'",
        "value_match": [
          "ref_template_types@template_type_code",
          "templates@template_type_code"
        ],
        "value_alignment": [
          [
            [
              "bk",
              "bk"
            ]
          ]
        ],
        "exact_match": [
          "ref_template_types@template_type_code",
          "templates",
          "templates@template_type_code",
          "documents",
          "documents@document_name"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "ref_template_types",
          "ref_template_types@template_type_description",
          "templates@template_id",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 341,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "show all template type codes and the number of documents using each type .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "Show all template type codes and the number of documents using each type.",
        "sql": "select templates@template_type_code , count ( * ) from templates join documents on templates@template_id = documents@template_id group by templates@template_type_code",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_type_code",
          "documents"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "templates@template_id",
          "templates@version_number",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 342,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the different template type codes , and how many documents use each type ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "What are the different template type codes, and how many documents use each type?",
        "sql": "select templates@template_type_code , count ( * ) from templates join documents on templates@template_id = documents@template_id group by templates@template_type_code",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_type_code",
          "documents"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "templates@template_id",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 343,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "which template type code is used by most number of documents ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which template type code is used by most number of documents?",
        "sql": "select templates@template_type_code from templates join documents on templates@template_id = documents@template_id group by templates@template_type_code order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_type_code",
          "documents"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "templates@template_id",
          "templates@version_number",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 344,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "return the code of the template type that is most commonly used in documents .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the code of the template type that is most commonly used in documents.",
        "sql": "select templates@template_type_code from templates join documents on templates@template_id = documents@template_id group by templates@template_type_code order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_type_code",
          "documents"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "templates@template_id",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 345,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "show all template type codes that are not used by any document .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "question": "Show all template type codes that are not used by any document.",
        "sql": "select templates@template_type_code from templates except select templates@template_type_code from templates join documents on templates@template_id = documents@template_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_type_code",
          "documents"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "templates@template_id",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 346,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the codes of template types that are not used for any document ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "question": "What are the codes of template types that are not used for any document?",
        "sql": "select templates@template_type_code from templates except select templates@template_type_code from templates join documents on templates@template_id = documents@template_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_type_code",
          "documents"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "templates@template_id",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 347,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "show all template type codes and descriptions .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "Show all template type codes and descriptions.",
        "sql": "select ref_template_types@template_type_code , ref_template_types@template_type_description from ref_template_types",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_type_code"
        ],
        "partial_match": [
          "templates@template_id",
          "templates@template_details",
          "documents@template_id",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 348,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the type codes and descriptions for all template types ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "What are the type codes and descriptions for all template types?",
        "sql": "select ref_template_types@template_type_code , ref_template_types@template_type_description from ref_template_types",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_type_code"
        ],
        "partial_match": [
          "templates@template_id",
          "templates@template_details",
          "documents@template_id",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 349,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what is the template type descriptions for template type code `` ad '' .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "question": "What is the template type descriptions for template type code \"AD\".",
        "sql": "select ref_template_types@template_type_description from ref_template_types where ref_template_types@template_type_code = 'value'",
        "value_match": [
          "templates@template_details",
          "templates@template_type_code",
          "ref_template_types@template_type_code"
        ],
        "value_alignment": [
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "ad",
              "ad"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ],
        "partial_match": [
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 350,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "return the template type description of the template type with the code ad .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "question": "Return the template type description of the template type with the code AD.",
        "sql": "select ref_template_types@template_type_description from ref_template_types where ref_template_types@template_type_code = 'value'",
        "value_match": [
          "ref_template_types@template_type_code",
          "templates@template_type_code"
        ],
        "value_alignment": [
          [
            [
              "ad",
              "ad"
            ]
          ]
        ],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ],
        "partial_match": [
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 351,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what is the template type code for template type description `` book '' .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "What is the template type code for template type description \"Book\".",
        "sql": "select ref_template_types@template_type_code from ref_template_types where ref_template_types@template_type_description = 'value'",
        "value_match": [
          "templates@template_details",
          "ref_template_types@template_type_description"
        ],
        "value_alignment": [
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "book",
              "book"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ],
        "partial_match": [
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 352,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "return the type code of the template type with the description `` book '' .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "Return the type code of the template type with the description \"Book\".",
        "sql": "select ref_template_types@template_type_code from ref_template_types where ref_template_types@template_type_description = 'value'",
        "value_match": [
          "templates@template_details",
          "ref_template_types@template_type_description"
        ],
        "value_alignment": [
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "book",
              "book"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_type_code"
        ],
        "partial_match": [
          "templates@template_id",
          "templates@template_details",
          "documents@template_id",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 353,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the distinct template type descriptions for the templates ever used by any document ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "sql": "select distinct ref_template_types@template_type_description from ref_template_types join templates on ref_template_types@template_type_code = templates@template_type_code join documents on templates@template_id = documents@template_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents",
          "documents@template_id",
          "documents@document_description"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "documents@document_id",
          "documents@document_name"
        ]
      }
    ]
  },
  {
    "id": 354,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "return the different descriptions for templates that have been used in a document .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "Return the different descriptions for templates that have been used in a document.",
        "sql": "select distinct ref_template_types@template_type_description from ref_template_types join templates on ref_template_types@template_type_code = templates@template_type_code join documents on templates@template_id = documents@template_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ref_template_types@template_type_description",
          "templates",
          "documents",
          "documents@document_description"
        ],
        "partial_match": [
          "paragraphs@document_id",
          "ref_template_types",
          "ref_template_types@template_type_code",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@document_id",
          "documents@template_id",
          "documents@document_name"
        ]
      }
    ]
  },
  {
    "id": 355,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the template ids with template type description `` presentation '' .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "What are the template ids with template type description \"Presentation\".",
        "sql": "select templates@template_id from ref_template_types join templates on ref_template_types@template_type_code = templates@template_type_code where ref_template_types@template_type_description = 'value'",
        "value_match": [
          "templates@template_details",
          "ref_template_types@template_type_description"
        ],
        "value_alignment": [
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "presentation",
              "presentation"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "ref_template_types@template_type_description",
          "templates",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id"
        ],
        "partial_match": [
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 356,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "return the ids corresponding to templates with the description 'presentation ' .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "sql": "select templates@template_id from ref_template_types join templates on ref_template_types@template_type_code = templates@template_type_code where ref_template_types@template_type_description = 'value'",
        "value_match": [
          "templates@template_details",
          "ref_template_types@template_type_description"
        ],
        "value_alignment": [
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "presentation",
              "presentation"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "ref_template_types@template_type_description",
          "templates"
        ],
        "partial_match": [
          "ref_template_types",
          "ref_template_types@template_type_code",
          "templates@template_id",
          "templates@template_type_code",
          "templates@template_details",
          "documents@template_id",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 357,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "how many paragraphs in total ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Paragraphs",
        "question": "How many paragraphs in total?",
        "sql": "select count ( * ) from paragraphs",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "paragraphs"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@paragraph_text"
        ]
      }
    ]
  },
  {
    "id": 358,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "count the number of paragraphs .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Paragraphs",
        "question": "Count the number of paragraphs.",
        "sql": "select count ( * ) from paragraphs",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "paragraphs"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@paragraph_text",
          "templates@version_number"
        ]
      }
    ]
  },
  {
    "id": 359,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "how many paragraphs for the document with name 'summer show ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "sql": "select count ( * ) from paragraphs join documents on paragraphs@document_id = documents@document_id where documents@document_name = 'value'",
        "value_match": [
          "templates@template_details",
          "documents@document_name"
        ],
        "value_alignment": [
          [
            [
              "summer_show",
              "summer_show"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "paragraphs",
          "documents",
          "documents@document_name"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@document_id",
          "paragraphs@paragraph_text",
          "documents@document_id",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 360,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "count the number of paragraphs in the document named 'summer show ' .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "sql": "select count ( * ) from paragraphs join documents on paragraphs@document_id = documents@document_id where documents@document_name = 'value'",
        "value_match": [
          "templates@template_details",
          "documents@document_name"
        ],
        "value_alignment": [
          [
            [
              "summer_show",
              "summer_show"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "paragraphs",
          "documents",
          "documents@document_name"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@document_id",
          "paragraphs@paragraph_text",
          "templates@version_number",
          "documents@document_id",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 361,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "show paragraph details for paragraph with text 'korea ' .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select other_details from paragraphs where paragraph_text like 'korea'",
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "sql": "select paragraphs@other_details from paragraphs where paragraphs@paragraph_text like 'value'",
        "value_match": [
          "paragraphs@paragraph_text",
          "templates@template_details"
        ],
        "value_alignment": [
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "korea",
              "korea"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "paragraphs",
          "paragraphs@paragraph_id",
          "paragraphs@paragraph_text"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 362,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the details for the paragraph that includes the text 'korea ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select other_details from paragraphs where paragraph_text like 'korea'",
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "sql": "select paragraphs@other_details from paragraphs where paragraphs@paragraph_text like 'value'",
        "value_match": [
          "paragraphs@paragraph_text",
          "templates@template_details"
        ],
        "value_alignment": [
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "korea",
              "korea"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "paragraphs",
          "paragraphs@paragraph_text"
        ],
        "partial_match": [
          "paragraphs@paragraph_id"
        ]
      }
    ]
  },
  {
    "id": 363,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "show all paragraph ids and texts for the document with name 'welcome to ny ' .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "sql": "select paragraphs@paragraph_id , paragraphs@paragraph_text from paragraphs join documents on paragraphs@document_id = documents@document_id where documents@document_name = 'value'",
        "value_match": [
          "templates@template_details",
          "documents@document_name"
        ],
        "value_alignment": [
          [
            [
              "welcome_to_ny",
              "welcome_to_ny"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "paragraphs",
          "paragraphs@paragraph_text",
          "documents",
          "documents@document_name"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@document_id",
          "documents@document_id",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 364,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the ids and texts of paragraphs in the document titled 'welcome to ny ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "sql": "select paragraphs@paragraph_id , paragraphs@paragraph_text from paragraphs join documents on paragraphs@document_id = documents@document_id where documents@document_name = 'value'",
        "value_match": [
          "templates@template_details",
          "documents@document_name"
        ],
        "value_alignment": [
          [
            [
              "welcome_to_ny",
              "welcome_to_ny"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "paragraphs",
          "paragraphs@paragraph_text",
          "documents"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@document_id",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 365,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "show all paragraph texts for the document `` customer reviews '' .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "sql": "select paragraphs@paragraph_text from paragraphs join documents on paragraphs@document_id = documents@document_id where documents@document_name = 'value'",
        "value_match": [
          "templates@template_details",
          "documents@document_name"
        ],
        "value_alignment": [
          [
            [
              "customer_reviews",
              "customer_reviews"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "paragraphs",
          "paragraphs@paragraph_text",
          "documents"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@document_id",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 366,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the paragraph texts for the document with the name 'customer reviews ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "sql": "select paragraphs@paragraph_text from paragraphs join documents on paragraphs@document_id = documents@document_id where documents@document_name = 'value'",
        "value_match": [
          "templates@template_details",
          "documents@document_name"
        ],
        "value_alignment": [
          [
            [
              "customer_reviews",
              "customer_reviews"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "paragraphs",
          "paragraphs@paragraph_text",
          "documents",
          "documents@document_name"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@document_id",
          "documents@document_id",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 367,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "show all document ids and the number of paragraphs in each document . order by document id .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "sql": "select paragraphs@document_id , count ( * ) from paragraphs group by paragraphs@document_id order by paragraphs@document_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "paragraphs",
          "paragraphs@document_id",
          "documents",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@paragraph_text",
          "templates@version_number"
        ]
      }
    ]
  },
  {
    "id": 368,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "return the different document ids along with the number of paragraphs corresponding to each , ordered by id .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "sql": "select paragraphs@document_id , count ( * ) from paragraphs group by paragraphs@document_id order by paragraphs@document_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "paragraphs",
          "documents"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@document_id",
          "paragraphs@paragraph_text",
          "templates@version_number",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 369,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "show all document ids , names and the number of paragraphs in each document .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "sql": "select paragraphs@document_id , documents@document_name , count ( * ) from paragraphs join documents on paragraphs@document_id = documents@document_id group by paragraphs@document_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "paragraphs",
          "paragraphs@document_id",
          "documents",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@paragraph_text",
          "templates@version_number"
        ]
      }
    ]
  },
  {
    "id": 370,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the ids and names of each document , as well as the number of paragraphs in each ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "sql": "select paragraphs@document_id , documents@document_name , count ( * ) from paragraphs join documents on paragraphs@document_id = documents@document_id group by paragraphs@document_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "paragraphs",
          "documents",
          "documents@document_name"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@document_id",
          "paragraphs@paragraph_text",
          "templates@version_number",
          "documents@document_id",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 371,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "list all document ids with at least two paragraphs .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "question": "List all document ids with at least two paragraphs.",
        "sql": "select paragraphs@document_id from paragraphs group by paragraphs@document_id having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "paragraphs",
          "documents"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@document_id",
          "paragraphs@paragraph_text",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 372,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the ids of documents that have 2 or more paragraphs ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "sql": "select paragraphs@document_id from paragraphs group by paragraphs@document_id having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "paragraphs",
          "documents"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@document_id",
          "paragraphs@paragraph_text",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 373,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what is the document id and name with greatest number of paragraphs ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the document id and name with greatest number of paragraphs?",
        "sql": "select paragraphs@document_id , documents@document_name from paragraphs join documents on paragraphs@document_id = documents@document_id group by paragraphs@document_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "paragraphs",
          "documents",
          "documents@document_name"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@document_id",
          "paragraphs@paragraph_text",
          "templates@version_number",
          "documents@document_id",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 374,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "return the id and name of the document with the most paragraphs .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and name of the document with the most paragraphs.",
        "sql": "select paragraphs@document_id , documents@document_name from paragraphs join documents on paragraphs@document_id = documents@document_id group by paragraphs@document_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "paragraphs",
          "documents",
          "documents@document_name"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@document_id",
          "paragraphs@paragraph_text",
          "documents@document_id",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 375,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what is the document id with least number of paragraphs ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the document id with least number of paragraphs?",
        "sql": "select paragraphs@document_id from paragraphs group by paragraphs@document_id order by count ( * ) asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "paragraphs",
          "documents"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@document_id",
          "paragraphs@paragraph_text",
          "templates@version_number",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 376,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "return the id of the document with the fewest paragraphs .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Return the id of the document with the fewest paragraphs.",
        "sql": "select paragraphs@document_id from paragraphs group by paragraphs@document_id order by count ( * ) asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "paragraphs",
          "documents"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@document_id",
          "paragraphs@paragraph_text",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 377,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what is the document id with 1 to 2 paragraphs ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "question": "What is the document id with 1 to 2 paragraphs?",
        "sql": "select paragraphs@document_id from paragraphs group by paragraphs@document_id having count ( * ) between 'value' and 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "paragraphs",
          "documents"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@document_id",
          "paragraphs@paragraph_text",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 378,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "give the ids of documents that have between one and two paragraphs .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "question": "Give the ids of documents that have between one and two paragraphs.",
        "sql": "select paragraphs@document_id from paragraphs group by paragraphs@document_id having count ( * ) between 'value' and 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "paragraphs",
          "documents"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@document_id",
          "paragraphs@paragraph_text",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 379,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "show the document id with paragraph text 'brazil ' and 'ireland ' .",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "sql": "select paragraphs@document_id from paragraphs where paragraphs@paragraph_text = 'value' intersect select paragraphs@document_id from paragraphs where paragraphs@paragraph_text = 'value'",
        "value_match": [
          "paragraphs@paragraph_text",
          "templates@template_details"
        ],
        "value_alignment": [
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "brazil",
              "brazil"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "ireland",
              "ireland"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "paragraphs",
          "paragraphs@paragraph_text",
          "documents"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@document_id",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 380,
    "database_id": "cre_Doc_Template_Mgt",
    "interaction": [
      {
        "utterance": "what are the ids of documents that contain the paragraph text 'brazil ' and 'ireland ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "sql": "select paragraphs@document_id from paragraphs where paragraphs@paragraph_text = 'value' intersect select paragraphs@document_id from paragraphs where paragraphs@paragraph_text = 'value'",
        "value_match": [
          "paragraphs@paragraph_text",
          "templates@template_details"
        ],
        "value_alignment": [
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "brazil",
              "brazil"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "",
              ""
            ]
          ],
          [
            [
              "ireland",
              "ireland"
            ]
          ],
          [
            [
              "",
              ""
            ]
          ]
        ],
        "exact_match": [
          "paragraphs",
          "paragraphs@paragraph_text",
          "documents"
        ],
        "partial_match": [
          "paragraphs@paragraph_id",
          "paragraphs@document_id",
          "documents@document_id",
          "documents@document_name",
          "documents@document_description"
        ]
      }
    ]
  },
  {
    "id": 381,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "how many teachers are there ?",
        "db_id": "course_teach",
        "query": "SELECT count(*) FROM teacher",
        "question": "How many teachers are there?",
        "sql": "select count ( * ) from teacher",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "teacher"
        ],
        "partial_match": [
          "course_arrange@teacher_id",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 382,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "what is the total count of teachers ?",
        "db_id": "course_teach",
        "query": "SELECT count(*) FROM teacher",
        "question": "What is the total count of teachers?",
        "sql": "select count ( * ) from teacher",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "teacher"
        ],
        "partial_match": [
          "course_arrange@teacher_id",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 383,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "list the names of teachers in ascending order of age .",
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "List the names of teachers in ascending order of age.",
        "sql": "select teacher@name from teacher order by teacher@age asc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "teacher",
          "teacher@name",
          "teacher@age"
        ],
        "partial_match": [
          "course_arrange@teacher_id",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 384,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "what are the names of the teachers ordered by ascending age ?",
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "What are the names of the teachers ordered by ascending age?",
        "sql": "select teacher@name from teacher order by teacher@age asc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "teacher",
          "teacher@name",
          "teacher@age"
        ],
        "partial_match": [
          "course_arrange@teacher_id",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 385,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "what are the age and hometown of teachers ?",
        "db_id": "course_teach",
        "query": "SELECT Age ,  Hometown FROM teacher",
        "question": "What are the age and hometown of teachers?",
        "sql": "select teacher@age , teacher@hometown from teacher",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "teacher",
          "teacher@age",
          "teacher@hometown"
        ],
        "partial_match": [
          "course_arrange@teacher_id",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 386,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "what is the age and hometown of every teacher ?",
        "db_id": "course_teach",
        "query": "SELECT Age ,  Hometown FROM teacher",
        "question": "What is the age and hometown of every teacher?",
        "sql": "select teacher@age , teacher@hometown from teacher",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "teacher",
          "teacher@age",
          "teacher@hometown"
        ],
        "partial_match": [
          "course_arrange@teacher_id",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 387,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "list the name of teachers whose hometown is not `` little lever urban district '' .",
        "db_id": "course_teach",
        "query": "select name from teacher where hometown != \"little lever urban district\"",
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "sql": "select teacher@name from teacher where teacher@hometown != 'value'",
        "value_match": [
          "teacher@hometown"
        ],
        "value_alignment": [
          [
            [
              "little_lever_urban_district",
              "little_lever_urban_district"
            ]
          ]
        ],
        "exact_match": [
          "teacher",
          "teacher@name",
          "teacher@hometown"
        ],
        "partial_match": [
          "course_arrange@teacher_id",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 388,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "what are the names of the teachers whose hometown is not `` little lever urban district '' ?",
        "db_id": "course_teach",
        "query": "select name from teacher where hometown != \"little lever urban district\"",
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "sql": "select teacher@name from teacher where teacher@hometown != 'value'",
        "value_match": [
          "teacher@hometown"
        ],
        "value_alignment": [
          [
            [
              "little_lever_urban_district",
              "little_lever_urban_district"
            ]
          ]
        ],
        "exact_match": [
          "teacher",
          "teacher@name",
          "teacher@hometown"
        ],
        "partial_match": [
          "course_arrange@teacher_id",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 389,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "show the name of teachers aged either 32 or 33 ?",
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "Show the name of teachers aged either 32 or 33?",
        "sql": "select teacher@name from teacher where teacher@age = 'value' or teacher@age = 'value'",
        "value_match": [
          "teacher@age"
        ],
        "value_alignment": [
          [
            [
              "32",
              "32"
            ]
          ],
          [
            [
              "33",
              "33"
            ]
          ]
        ],
        "exact_match": [
          "teacher",
          "teacher@name"
        ],
        "partial_match": [
          "course_arrange@teacher_id",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 390,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "what are the names of the teachers who are aged either 32 or 33 ?",
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "sql": "select teacher@name from teacher where teacher@age = 'value' or teacher@age = 'value'",
        "value_match": [
          "teacher@age"
        ],
        "value_alignment": [
          [
            [
              "32",
              "32"
            ]
          ],
          [
            [
              "33",
              "33"
            ]
          ]
        ],
        "exact_match": [
          "teacher",
          "teacher@name"
        ],
        "partial_match": [
          "course_arrange@teacher_id",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 391,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "what is the hometown of the youngest teacher ?",
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "question": "What is the hometown of the youngest teacher?",
        "sql": "select teacher@hometown from teacher order by teacher@age asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "teacher",
          "teacher@hometown"
        ],
        "partial_match": [
          "course_arrange@teacher_id",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 392,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "where is the youngest teacher from ?",
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "question": "Where is the youngest teacher from?",
        "sql": "select teacher@hometown from teacher order by teacher@age asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "teacher"
        ],
        "partial_match": [
          "course_arrange@teacher_id",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 393,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "show different hometown of teachers and the number of teachers from each hometown .",
        "db_id": "course_teach",
        "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "sql": "select teacher@hometown , count ( * ) from teacher group by teacher@hometown",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "course_arrange@teacher_id",
          "teacher",
          "teacher@teacher_id",
          "teacher@hometown"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 394,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "for each hometown , how many teachers are there ?",
        "db_id": "course_teach",
        "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "For each hometown, how many teachers are there?",
        "sql": "select teacher@hometown , count ( * ) from teacher group by teacher@hometown",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "teacher",
          "teacher@hometown"
        ],
        "partial_match": [
          "course_arrange@teacher_id",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 395,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "list the most common hometown of teachers .",
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common hometown of teachers.",
        "sql": "select teacher@hometown from teacher group by teacher@hometown order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "teacher",
          "teacher@hometown"
        ],
        "partial_match": [
          "course_arrange@teacher_id",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 396,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "what is the most commmon hometowns for teachers ?",
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most commmon hometowns for teachers?",
        "sql": "select teacher@hometown from teacher group by teacher@hometown order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "teacher",
          "teacher@hometown"
        ],
        "partial_match": [
          "course_arrange@teacher_id",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 397,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "show the hometowns shared by at least two teachers .",
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "question": "Show the hometowns shared by at least two teachers.",
        "sql": "select teacher@hometown from teacher group by teacher@hometown having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "teacher",
          "teacher@hometown"
        ],
        "partial_match": [
          "course_arrange@teacher_id",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 398,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "what are the towns from which at least two teachers come from ?",
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "question": "What are the towns from which at least two teachers come from?",
        "sql": "select teacher@hometown from teacher group by teacher@hometown having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "teacher"
        ],
        "partial_match": [
          "course_arrange@teacher_id",
          "teacher@teacher_id",
          "teacher@hometown"
        ]
      }
    ]
  },
  {
    "id": 399,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "show names of teachers and the courses they are arranged to teach .",
        "db_id": "course_teach",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "sql": "select teacher@name , course@course from course_arrange join course on course_arrange@course_id = course@course_id join teacher on course_arrange@teacher_id = teacher@teacher_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "course_arrange",
          "course_arrange@teacher_id",
          "course",
          "course@course",
          "teacher",
          "teacher@teacher_id",
          "teacher@name"
        ],
        "partial_match": [
          "course_arrange@course_id",
          "course@course_id"
        ]
      }
    ]
  },
  {
    "id": 400,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "what is the name of each teacher and what course they teach ?",
        "db_id": "course_teach",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "question": "What is the name of each teacher and what course they teach?",
        "sql": "select teacher@name , course@course from course_arrange join course on course_arrange@course_id = course@course_id join teacher on course_arrange@teacher_id = teacher@teacher_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "course_arrange@teacher_id",
          "course",
          "course@course",
          "teacher",
          "teacher@teacher_id",
          "teacher@name"
        ],
        "partial_match": [
          "course_arrange",
          "course_arrange@course_id",
          "course@course_id"
        ]
      }
    ]
  },
  {
    "id": 401,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher 's name .",
        "db_id": "course_teach",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "sql": "select teacher@name , course@course from course_arrange join course on course_arrange@course_id = course@course_id join teacher on course_arrange@teacher_id = teacher@teacher_id order by teacher@name",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "course_arrange",
          "course_arrange@teacher_id",
          "course",
          "course@course",
          "teacher",
          "teacher@teacher_id",
          "teacher@name"
        ],
        "partial_match": [
          "course_arrange@course_id",
          "course@course_id"
        ]
      }
    ]
  },
  {
    "id": 402,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "what are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher ?",
        "db_id": "course_teach",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "sql": "select teacher@name , course@course from course_arrange join course on course_arrange@course_id = course@course_id join teacher on course_arrange@teacher_id = teacher@teacher_id order by teacher@name",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "course_arrange@teacher_id",
          "course",
          "course@course",
          "teacher",
          "teacher@teacher_id",
          "teacher@name"
        ],
        "partial_match": [
          "course_arrange",
          "course_arrange@course_id",
          "course@course_id"
        ]
      }
    ]
  },
  {
    "id": 403,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "show the name of the teacher for the math course .",
        "db_id": "course_teach",
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "question": "Show the name of the teacher for the math course.",
        "sql": "select teacher@name from course_arrange join course on course_arrange@course_id = course@course_id join teacher on course_arrange@teacher_id = teacher@teacher_id where course@course = 'value'",
        "value_match": [
          "course@course"
        ],
        "value_alignment": [
          [
            [
              "math",
              "math"
            ]
          ]
        ],
        "exact_match": [
          "course",
          "course@course",
          "teacher",
          "teacher@name"
        ],
        "partial_match": [
          "course_arrange",
          "course_arrange@course_id",
          "course_arrange@teacher_id",
          "course@course_id",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 404,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "what are the names of the people who teach math courses ?",
        "db_id": "course_teach",
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "question": "What are the names of the people who teach math courses?",
        "sql": "select teacher@name from course_arrange join course on course_arrange@course_id = course@course_id join teacher on course_arrange@teacher_id = teacher@teacher_id where course@course = 'value'",
        "value_match": [
          "course@course"
        ],
        "value_alignment": [
          [
            [
              "math",
              "math"
            ]
          ]
        ],
        "exact_match": [
          "course",
          "course@course",
          "teacher@name"
        ],
        "partial_match": [
          "course_arrange",
          "course_arrange@course_id",
          "course_arrange@teacher_id",
          "course@course_id",
          "teacher",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 405,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "show names of teachers and the number of courses they teach .",
        "db_id": "course_teach",
        "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "question": "Show names of teachers and the number of courses they teach.",
        "sql": "select teacher@name , count ( * ) from course_arrange join teacher on course_arrange@teacher_id = teacher@teacher_id group by teacher@name",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "course_arrange@teacher_id",
          "course",
          "course@course",
          "teacher",
          "teacher@teacher_id",
          "teacher@name"
        ],
        "partial_match": [
          "course_arrange",
          "course_arrange@course_id",
          "course@course_id"
        ]
      }
    ]
  },
  {
    "id": 406,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "what are the names of the teachers and how many courses do they teach ?",
        "db_id": "course_teach",
        "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "question": "What are the names of the teachers and how many courses do they teach?",
        "sql": "select teacher@name , count ( * ) from course_arrange join teacher on course_arrange@teacher_id = teacher@teacher_id group by teacher@name",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "course_arrange@teacher_id",
          "course",
          "course@course",
          "teacher",
          "teacher@teacher_id",
          "teacher@name"
        ],
        "partial_match": [
          "course_arrange",
          "course_arrange@course_id",
          "course@course_id"
        ]
      }
    ]
  },
  {
    "id": 407,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "show names of teachers that teach at least two courses .",
        "db_id": "course_teach",
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "Show names of teachers that teach at least two courses.",
        "sql": "select teacher@name from course_arrange join teacher on course_arrange@teacher_id = teacher@teacher_id group by teacher@name having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "course_arrange@teacher_id",
          "course",
          "course@course",
          "teacher",
          "teacher@teacher_id",
          "teacher@name"
        ],
        "partial_match": [
          "course_arrange",
          "course_arrange@course_id",
          "course@course_id"
        ]
      }
    ]
  },
  {
    "id": 408,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "what are the names of the teachers who teach at least two courses ?",
        "db_id": "course_teach",
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "What are the names of the teachers who teach at least two courses?",
        "sql": "select teacher@name from course_arrange join teacher on course_arrange@teacher_id = teacher@teacher_id group by teacher@name having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "course_arrange@teacher_id",
          "course",
          "course@course",
          "teacher",
          "teacher@teacher_id",
          "teacher@name"
        ],
        "partial_match": [
          "course_arrange",
          "course_arrange@course_id",
          "course@course_id"
        ]
      }
    ]
  },
  {
    "id": 409,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "list the names of teachers who have not been arranged to teach courses .",
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "sql": "select teacher@name from teacher where teacher@teacher_id not in ( select course_arrange@teacher_id from course_arrange )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "course_arrange",
          "course_arrange@teacher_id",
          "course",
          "course@course",
          "teacher",
          "teacher@teacher_id",
          "teacher@name"
        ],
        "partial_match": [
          "course_arrange@course_id",
          "course@course_id"
        ]
      }
    ]
  },
  {
    "id": 410,
    "database_id": "course_teach",
    "interaction": [
      {
        "utterance": "what are the names of the teachers whose courses have not been arranged ?",
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "sql": "select teacher@name from teacher where teacher@teacher_id not in ( select course_arrange@teacher_id from course_arrange )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "course_arrange",
          "course",
          "course@course",
          "teacher",
          "teacher@name"
        ],
        "partial_match": [
          "course_arrange@course_id",
          "course_arrange@teacher_id",
          "course@course_id",
          "teacher@teacher_id"
        ]
      }
    ]
  },
  {
    "id": 411,
    "database_id": "museum_visit",
    "interaction": [
      {
        "utterance": "how many visitors below age 30 are there ?",
        "db_id": "museum_visit",
        "query": "SELECT count(*) FROM visitor WHERE age  <  30",
        "question": "How many visitors below age 30 are there?",
        "sql": "select count ( * ) from visitor where visitor@age < 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "visitor@age"
        ],
        "partial_match": [
          "visit"
        ]
      }
    ]
  },
  {
    "id": 412,
    "database_id": "museum_visit",
    "interaction": [
      {
        "utterance": "find the names of the visitors whose membership level is higher than 4 , and order the results by the level from high to low .",
        "db_id": "museum_visit",
        "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "sql": "select visitor@name from visitor where visitor@level_of_membership > 'value' order by visitor@level_of_membership desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "museum@name",
          "visitor@name",
          "visitor@level_of_membership"
        ],
        "partial_match": [
          "visit"
        ]
      }
    ]
  },
  {
    "id": 413,
    "database_id": "museum_visit",
    "interaction": [
      {
        "utterance": "what is the average age of the visitors whose membership level is not higher than 4 ?",
        "db_id": "museum_visit",
        "query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "sql": "select avg ( visitor@age ) from visitor where visitor@level_of_membership <= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "visitor@level_of_membership",
          "visitor@age"
        ],
        "partial_match": [
          "visit"
        ]
      }
    ]
  },
  {
    "id": 414,
    "database_id": "museum_visit",
    "interaction": [
      {
        "utterance": "find the name and membership level of the visitors whose membership level is higher than 4 , and sort by their age from old to young .",
        "db_id": "museum_visit",
        "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "sql": "select visitor@name , visitor@level_of_membership from visitor where visitor@level_of_membership > 'value' order by visitor@age desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "museum@name",
          "visitor@name",
          "visitor@level_of_membership",
          "visitor@age"
        ],
        "partial_match": [
          "visit"
        ]
      }
    ]
  },
  {
    "id": 415,
    "database_id": "museum_visit",
    "interaction": [
      {
        "utterance": "find the id and name of the museum that has the most staff members ?",
        "db_id": "museum_visit",
        "query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "question": "Find the id and name of the museum that has the most staff members?",
        "sql": "select museum@museum_id , museum@name from museum order by museum@num_of_staff desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "museum",
          "museum@name",
          "visitor@name"
        ],
        "partial_match": [
          "visit@museum_id",
          "museum@museum_id",
          "museum@num_of_staff",
          "visitor@level_of_membership"
        ]
      }
    ]
  },
  {
    "id": 416,
    "database_id": "museum_visit",
    "interaction": [
      {
        "utterance": "find the average number of staff working for the museums that were open before 2009 .",
        "db_id": "museum_visit",
        "query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "sql": "select avg ( museum@num_of_staff ) from museum where museum@open_year < 'value'",
        "value_match": [
          "museum@open_year"
        ],
        "value_alignment": [
          [
            [
              "2009",
              "2009"
            ]
          ]
        ],
        "exact_match": [
          "museum"
        ],
        "partial_match": [
          "visit@museum_id",
          "museum@museum_id",
          "museum@num_of_staff",
          "museum@open_year"
        ]
      }
    ]
  },
  {
    "id": 417,
    "database_id": "museum_visit",
    "interaction": [
      {
        "utterance": "what are the opening year and staff number of the museum named plaza museum ?",
        "db_id": "museum_visit",
        "query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "sql": "select museum@num_of_staff , museum@open_year from museum where museum@name = 'value'",
        "value_match": [
          "museum@name"
        ],
        "value_alignment": [
          [
            [
              "plaza_museum",
              "plaza_museum"
            ]
          ]
        ],
        "exact_match": [
          "visit@museum_id",
          "museum",
          "museum@museum_id",
          "museum@name",
          "museum@open_year",
          "visitor@name"
        ],
        "partial_match": [
          "museum@num_of_staff"
        ]
      }
    ]
  },
  {
    "id": 418,
    "database_id": "museum_visit",
    "interaction": [
      {
        "utterance": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010 .",
        "db_id": "museum_visit",
        "query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "sql": "select museum@name from museum where museum@num_of_staff > ( select min ( museum@num_of_staff ) from museum where museum@open_year > 'value' )",
        "value_match": [
          "museum@open_year"
        ],
        "value_alignment": [
          [
            [
              "2010",
              "2010"
            ]
          ]
        ],
        "exact_match": [
          "visit@museum_id",
          "museum",
          "museum@museum_id",
          "museum@name",
          "museum@num_of_staff",
          "visitor@name"
        ],
        "partial_match": [
          "museum@open_year"
        ]
      }
    ]
  },
  {
    "id": 419,
    "database_id": "museum_visit",
    "interaction": [
      {
        "utterance": "find the id , name and age for visitors who visited some museums more than once .",
        "db_id": "museum_visit",
        "query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
        "question": "find the id, name and age for visitors who visited some museums more than once.",
        "sql": "select visitor@id , visitor@name , visitor@age from visitor join visit on visitor@id = visit@visitor_id group by visitor@id having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "visit",
          "museum",
          "museum@name",
          "visitor@name",
          "visitor@age"
        ],
        "partial_match": [
          "visit@museum_id",
          "museum@museum_id"
        ]
      }
    ]
  },
  {
    "id": 420,
    "database_id": "museum_visit",
    "interaction": [
      {
        "utterance": "what are the id , name and membership level of visitors who have spent the largest amount of money in total in all museum tickets ?",
        "db_id": "museum_visit",
        "query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "sql": "select visit@visitor_id , visitor@name , visitor@level_of_membership from visitor join visit on visitor@id = visit@visitor_id group by visit@visitor_id order by sum ( visit@total_spent ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "museum",
          "museum@name",
          "visitor@name",
          "visitor@level_of_membership"
        ],
        "partial_match": [
          "visit",
          "visit@museum_id",
          "visit@num_of_ticket",
          "visit@total_spent",
          "museum@museum_id"
        ]
      }
    ]
  },
  {
    "id": 421,
    "database_id": "museum_visit",
    "interaction": [
      {
        "utterance": "what are the id and name of the museum visited most times ?",
        "db_id": "museum_visit",
        "query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the id and name of the museum visited most times?",
        "sql": "select visit@museum_id , museum@name from museum join visit on museum@museum_id = visit@museum_id group by visit@museum_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "visit",
          "museum",
          "museum@name",
          "visitor@name"
        ],
        "partial_match": [
          "visit@museum_id",
          "museum@museum_id"
        ]
      }
    ]
  },
  {
    "id": 422,
    "database_id": "museum_visit",
    "interaction": [
      {
        "utterance": "what is the name of the museum that had no visitor yet ?",
        "db_id": "museum_visit",
        "query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "question": "What is the name of the museum that had no visitor yet?",
        "sql": "select museum@name from museum where museum@museum_id not in ( select visit@museum_id from visit )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "museum",
          "museum@name",
          "visitor@name"
        ],
        "partial_match": [
          "visit",
          "visit@museum_id",
          "museum@museum_id"
        ]
      }
    ]
  },
  {
    "id": 423,
    "database_id": "museum_visit",
    "interaction": [
      {
        "utterance": "find the name and age of the visitor who bought the most tickets at once .",
        "db_id": "museum_visit",
        "query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "sql": "select visitor@name , visitor@age from visitor join visit on visitor@id = visit@visitor_id order by visit@num_of_ticket desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "museum@name",
          "visitor@name",
          "visitor@age"
        ],
        "partial_match": [
          "visit",
          "visit@num_of_ticket"
        ]
      }
    ]
  },
  {
    "id": 424,
    "database_id": "museum_visit",
    "interaction": [
      {
        "utterance": "what are the average and maximum number of tickets bought in all visits ?",
        "db_id": "museum_visit",
        "query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "sql": "select avg ( visit@num_of_ticket ) , max ( visit@num_of_ticket ) from visit",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "visit"
        ],
        "partial_match": [
          "visit@num_of_ticket"
        ]
      }
    ]
  },
  {
    "id": 425,
    "database_id": "museum_visit",
    "interaction": [
      {
        "utterance": "what is the total ticket expense of the visitors whose membership level is 1 ?",
        "db_id": "museum_visit",
        "query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "sql": "select sum ( visit@total_spent ) from visitor join visit on visitor@id = visit@visitor_id where visitor@level_of_membership = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "visitor@level_of_membership"
        ],
        "partial_match": [
          "visit",
          "visit@num_of_ticket",
          "visit@total_spent"
        ]
      }
    ]
  },
  {
    "id": 426,
    "database_id": "museum_visit",
    "interaction": [
      {
        "utterance": "what is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011 ?",
        "db_id": "museum_visit",
        "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "sql": "select visitor@name from visitor join visit on visitor@id = visit@visitor_id join museum on museum@museum_id = visit@museum_id where museum@open_year < 'value' intersect select visitor@name from visitor join visit on visitor@id = visit@visitor_id join museum on museum@museum_id = visit@museum_id where museum@open_year > 'value'",
        "value_match": [
          "museum@open_year"
        ],
        "value_alignment": [
          [
            [
              "2009",
              "2009"
            ]
          ],
          [
            [
              "2011",
              "2011"
            ]
          ]
        ],
        "exact_match": [
          "visit",
          "visit@museum_id",
          "museum",
          "museum@museum_id",
          "museum@name",
          "museum@open_year",
          "visitor@name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 427,
    "database_id": "museum_visit",
    "interaction": [
      {
        "utterance": "find the number of visitors who did not visit any museum opened after 2010 .",
        "db_id": "museum_visit",
        "query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "sql": "select count ( * ) from visitor where visitor@id not in ( select visit@visitor_id from museum join visit on museum@museum_id = visit@museum_id where museum@open_year > 'value' )",
        "value_match": [
          "museum@open_year"
        ],
        "value_alignment": [
          [
            [
              "2010",
              "2010"
            ]
          ]
        ],
        "exact_match": [
          "visit",
          "museum"
        ],
        "partial_match": [
          "visit@museum_id",
          "museum@museum_id",
          "museum@open_year"
        ]
      }
    ]
  },
  {
    "id": 428,
    "database_id": "museum_visit",
    "interaction": [
      {
        "utterance": "how many museums were opened after 2013 or before 2008 ?",
        "db_id": "museum_visit",
        "query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "question": "How many museums were opened after 2013 or before 2008?",
        "sql": "select count ( * ) from museum where museum@open_year > 'value' or museum@open_year < 'value'",
        "value_match": [
          "museum@open_year"
        ],
        "value_alignment": [
          [
            [
              "2008",
              "2008"
            ]
          ]
        ],
        "exact_match": [
          "museum"
        ],
        "partial_match": [
          "visit@museum_id",
          "museum@museum_id",
          "museum@open_year"
        ]
      }
    ]
  },
  {
    "id": 429,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the total number of players .",
        "db_id": "wta_1",
        "query": "SELECT count(*) FROM players",
        "question": "Find the total number of players.",
        "sql": "select count ( * ) from players",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "players"
        ],
        "partial_match": [
          "rankings@player_id",
          "players@player_id"
        ]
      }
    ]
  },
  {
    "id": 430,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "how many players are there ?",
        "db_id": "wta_1",
        "query": "SELECT count(*) FROM players",
        "question": "How many players are there?",
        "sql": "select count ( * ) from players",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "players"
        ],
        "partial_match": [
          "rankings@player_id",
          "players@player_id"
        ]
      }
    ]
  },
  {
    "id": 431,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the total number of matches .",
        "db_id": "wta_1",
        "query": "SELECT count(*) FROM matches",
        "question": "Find the total number of matches.",
        "sql": "select count ( * ) from matches",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "matches"
        ],
        "partial_match": [
          "matches@match_num"
        ]
      }
    ]
  },
  {
    "id": 432,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "count the number of matches .",
        "db_id": "wta_1",
        "query": "SELECT count(*) FROM matches",
        "question": "Count the number of matches.",
        "sql": "select count ( * ) from matches",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "matches"
        ],
        "partial_match": [
          "players@country_code",
          "matches@match_num"
        ]
      }
    ]
  },
  {
    "id": 433,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "list the first name and birth date of all players from the country with code usa .",
        "db_id": "wta_1",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "question": "List the first name and birth date of all players from the country with code USA.",
        "sql": "select players@first_name , players@birth_date from players where players@country_code = 'value'",
        "value_match": [
          "matches@loser_ioc",
          "matches@winner_ioc",
          "players@country_code"
        ],
        "value_alignment": [
          [
            [
              "usa",
              "usa"
            ]
          ]
        ],
        "exact_match": [
          "players",
          "players@first_name",
          "players@birth_date",
          "players@country_code"
        ],
        "partial_match": [
          "rankings@ranking_date",
          "rankings@player_id",
          "players@player_id",
          "players@last_name",
          "matches@loser_name",
          "matches@tourney_date",
          "matches@tourney_name",
          "matches@winner_name"
        ]
      }
    ]
  },
  {
    "id": 434,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what are the first names and birth dates of players from the usa ?",
        "db_id": "wta_1",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "question": "What are the first names and birth dates of players from the USA?",
        "sql": "select players@first_name , players@birth_date from players where players@country_code = 'value'",
        "value_match": [
          "matches@loser_ioc",
          "matches@winner_ioc",
          "players@country_code"
        ],
        "value_alignment": [
          [
            [
              "usa",
              "usa"
            ]
          ]
        ],
        "exact_match": [
          "players",
          "players@first_name",
          "players@birth_date"
        ],
        "partial_match": [
          "rankings@ranking_date",
          "rankings@player_id",
          "players@player_id",
          "players@last_name",
          "matches@loser_name",
          "matches@tourney_date",
          "matches@tourney_name",
          "matches@winner_name"
        ]
      }
    ]
  },
  {
    "id": 435,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the average age of losers and winners of all matches .",
        "db_id": "wta_1",
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "question": "Find the average age of losers and winners of all matches.",
        "sql": "select avg ( matches@loser_age ) , avg ( matches@winner_age ) from matches",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "matches"
        ],
        "partial_match": [
          "matches@loser_age",
          "matches@loser_entry",
          "matches@loser_hand",
          "matches@loser_ht",
          "matches@loser_id",
          "matches@loser_ioc",
          "matches@loser_name",
          "matches@loser_rank",
          "matches@loser_rank_points",
          "matches@loser_seed",
          "matches@match_num",
          "matches@winner_age",
          "matches@winner_entry",
          "matches@winner_hand",
          "matches@winner_ht",
          "matches@winner_id",
          "matches@winner_ioc",
          "matches@winner_name",
          "matches@winner_rank",
          "matches@winner_rank_points",
          "matches@winner_seed"
        ]
      }
    ]
  },
  {
    "id": 436,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what are the average ages of losers and winners across matches ?",
        "db_id": "wta_1",
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "question": "What are the average ages of losers and winners across matches?",
        "sql": "select avg ( matches@loser_age ) , avg ( matches@winner_age ) from matches",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "matches"
        ],
        "partial_match": [
          "matches@loser_age",
          "matches@loser_entry",
          "matches@loser_hand",
          "matches@loser_ht",
          "matches@loser_id",
          "matches@loser_ioc",
          "matches@loser_name",
          "matches@loser_rank",
          "matches@loser_rank_points",
          "matches@loser_seed",
          "matches@match_num",
          "matches@winner_age",
          "matches@winner_entry",
          "matches@winner_hand",
          "matches@winner_ht",
          "matches@winner_id",
          "matches@winner_ioc",
          "matches@winner_name",
          "matches@winner_rank",
          "matches@winner_rank_points",
          "matches@winner_seed"
        ]
      }
    ]
  },
  {
    "id": 437,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the average rank of winners in all matches .",
        "db_id": "wta_1",
        "query": "SELECT avg(winner_rank) FROM matches",
        "question": "Find the average rank of winners in all matches.",
        "sql": "select avg ( matches@winner_rank ) from matches",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "rankings@ranking",
          "matches",
          "matches@winner_rank",
          "matches@winner_rank_points"
        ],
        "partial_match": [
          "rankings",
          "rankings@ranking_date",
          "rankings@ranking_points",
          "matches@loser_rank",
          "matches@loser_rank_points",
          "matches@match_num",
          "matches@winner_age",
          "matches@winner_entry",
          "matches@winner_hand",
          "matches@winner_ht",
          "matches@winner_id",
          "matches@winner_ioc",
          "matches@winner_name",
          "matches@winner_seed"
        ]
      }
    ]
  },
  {
    "id": 438,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what is the average rank for winners in all matches ?",
        "db_id": "wta_1",
        "query": "SELECT avg(winner_rank) FROM matches",
        "question": "What is the average rank for winners in all matches?",
        "sql": "select avg ( matches@winner_rank ) from matches",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "rankings@ranking",
          "matches",
          "matches@winner_rank",
          "matches@winner_rank_points"
        ],
        "partial_match": [
          "rankings",
          "rankings@ranking_date",
          "rankings@ranking_points",
          "matches@loser_rank",
          "matches@loser_rank_points",
          "matches@match_num",
          "matches@winner_age",
          "matches@winner_entry",
          "matches@winner_hand",
          "matches@winner_ht",
          "matches@winner_id",
          "matches@winner_ioc",
          "matches@winner_name",
          "matches@winner_seed"
        ]
      }
    ]
  },
  {
    "id": 439,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the highest rank of losers in all matches .",
        "db_id": "wta_1",
        "query": "SELECT min(loser_rank) FROM matches",
        "question": "Find the highest rank of losers in all matches.",
        "sql": "select min ( matches@loser_rank ) from matches",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "rankings@ranking",
          "matches",
          "matches@loser_rank",
          "matches@loser_rank_points"
        ],
        "partial_match": [
          "rankings",
          "rankings@ranking_date",
          "rankings@ranking_points",
          "matches@loser_age",
          "matches@loser_entry",
          "matches@loser_hand",
          "matches@loser_ht",
          "matches@loser_id",
          "matches@loser_ioc",
          "matches@loser_name",
          "matches@loser_seed",
          "matches@match_num",
          "matches@winner_rank",
          "matches@winner_rank_points"
        ]
      }
    ]
  },
  {
    "id": 440,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what is the best rank of losers across all matches ?",
        "db_id": "wta_1",
        "query": "SELECT min(loser_rank) FROM matches",
        "question": "What is the best rank of losers across all matches?",
        "sql": "select min ( matches@loser_rank ) from matches",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "rankings@ranking",
          "matches",
          "matches@loser_rank",
          "matches@loser_rank_points"
        ],
        "partial_match": [
          "rankings",
          "rankings@ranking_date",
          "rankings@ranking_points",
          "matches@loser_age",
          "matches@loser_entry",
          "matches@loser_hand",
          "matches@loser_ht",
          "matches@loser_id",
          "matches@loser_ioc",
          "matches@loser_name",
          "matches@loser_seed",
          "matches@match_num",
          "matches@winner_rank",
          "matches@winner_rank_points"
        ]
      }
    ]
  },
  {
    "id": 441,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the number of distinct country codes of all players .",
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "question": "find the number of distinct country codes of all players.",
        "sql": "select count ( distinct players@country_code ) from players",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "players",
          "players@country_code"
        ],
        "partial_match": [
          "rankings@player_id",
          "players@player_id"
        ]
      }
    ]
  },
  {
    "id": 442,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "how many distinct countries do players come from ?",
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "question": "How many distinct countries do players come from?",
        "sql": "select count ( distinct players@country_code ) from players",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "players"
        ],
        "partial_match": [
          "rankings@player_id",
          "players@player_id",
          "players@country_code"
        ]
      }
    ]
  },
  {
    "id": 443,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the number of distinct name of losers .",
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "question": "Find the number of distinct name of losers.",
        "sql": "select count ( distinct matches@loser_name ) from matches",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "matches@loser_name"
        ],
        "partial_match": [
          "players@first_name",
          "players@last_name",
          "matches@loser_age",
          "matches@loser_entry",
          "matches@loser_hand",
          "matches@loser_ht",
          "matches@loser_id",
          "matches@loser_ioc",
          "matches@loser_rank",
          "matches@loser_rank_points",
          "matches@loser_seed",
          "matches@tourney_name",
          "matches@winner_name"
        ]
      }
    ]
  },
  {
    "id": 444,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "how many different loser names are there ?",
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "question": "How many different loser names are there?",
        "sql": "select count ( distinct matches@loser_name ) from matches",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "matches@loser_name"
        ],
        "partial_match": [
          "players@first_name",
          "players@last_name",
          "matches@loser_age",
          "matches@loser_entry",
          "matches@loser_hand",
          "matches@loser_ht",
          "matches@loser_id",
          "matches@loser_ioc",
          "matches@loser_rank",
          "matches@loser_rank_points",
          "matches@loser_seed",
          "matches@tourney_name",
          "matches@winner_name"
        ]
      }
    ]
  },
  {
    "id": 445,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the name of tourney that has more than 10 matches .",
        "db_id": "wta_1",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "Find the name of tourney that has more than 10 matches.",
        "sql": "select matches@tourney_name from matches group by matches@tourney_name having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "matches",
          "matches@tourney_name"
        ],
        "partial_match": [
          "rankings@tours",
          "players@first_name",
          "players@last_name",
          "matches@loser_name",
          "matches@match_num",
          "matches@tourney_date",
          "matches@tourney_id",
          "matches@tourney_level",
          "matches@winner_name"
        ]
      }
    ]
  },
  {
    "id": 446,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what are the names of tournaments that have more than 10 matches ?",
        "db_id": "wta_1",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "What are the names of tournaments that have more than 10 matches?",
        "sql": "select matches@tourney_name from matches group by matches@tourney_name having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "matches"
        ],
        "partial_match": [
          "rankings@tours",
          "players@first_name",
          "players@last_name",
          "matches@loser_name",
          "matches@match_num",
          "matches@tourney_name",
          "matches@winner_name"
        ]
      }
    ]
  },
  {
    "id": 447,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "list the names of all winners who played in both 2013 and 2016 .",
        "db_id": "wta_1",
        "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "sql": "select matches@winner_name from matches where matches@year = 'value' intersect select matches@winner_name from matches where matches@year = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "matches@winner_name"
        ],
        "partial_match": [
          "rankings@player_id",
          "players",
          "players@player_id",
          "players@first_name",
          "players@last_name",
          "matches@loser_name",
          "matches@tourney_name",
          "matches@winner_age",
          "matches@winner_entry",
          "matches@winner_hand",
          "matches@winner_ht",
          "matches@winner_id",
          "matches@winner_ioc",
          "matches@winner_rank",
          "matches@winner_rank_points",
          "matches@winner_seed"
        ]
      }
    ]
  },
  {
    "id": 448,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what are the names of players who won in both 2013 and 2016 ?",
        "db_id": "wta_1",
        "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "question": "What are the names of players who won in both 2013 and 2016?",
        "sql": "select matches@winner_name from matches where matches@year = 'value' intersect select matches@winner_name from matches where matches@year = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "players"
        ],
        "partial_match": [
          "rankings@player_id",
          "players@player_id",
          "players@first_name",
          "players@last_name",
          "matches@loser_name",
          "matches@tourney_name",
          "matches@winner_name"
        ]
      }
    ]
  },
  {
    "id": 449,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "list the number of all matches who played in years of 2013 or 2016 .",
        "db_id": "wta_1",
        "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "sql": "select count ( * ) from matches where matches@year = 'value' or matches@year = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "matches",
          "matches@year"
        ],
        "partial_match": [
          "rankings@player_id",
          "players",
          "players@player_id",
          "matches@match_num"
        ]
      }
    ]
  },
  {
    "id": 450,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "how many matches were played in 2013 or 2016 ?",
        "db_id": "wta_1",
        "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "question": "How many matches were played in 2013 or 2016?",
        "sql": "select count ( * ) from matches where matches@year = 'value' or matches@year = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "matches"
        ],
        "partial_match": [
          "rankings@player_id",
          "players",
          "players@player_id",
          "matches@match_num"
        ]
      }
    ]
  },
  {
    "id": 451,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what are the country code and first name of the players who won in both tourney wta championships and australian open ?",
        "db_id": "wta_1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "sql": "select players@country_code , players@first_name from players join matches on players@player_id = matches@winner_id where matches@tourney_name = 'value' intersect select players@country_code , players@first_name from players join matches on players@player_id = matches@winner_id where matches@tourney_name = 'value'",
        "value_match": [
          "matches@tourney_name"
        ],
        "value_alignment": [
          [
            [
              "wta_championships",
              "wta_championships"
            ]
          ],
          [
            [
              "australian_open",
              "australian_open"
            ]
          ]
        ],
        "exact_match": [
          "players",
          "players@first_name",
          "players@country_code",
          "matches@tourney_name"
        ],
        "partial_match": [
          "rankings@player_id",
          "rankings@tours",
          "players@player_id",
          "players@last_name",
          "matches@loser_name",
          "matches@tourney_date",
          "matches@tourney_id",
          "matches@tourney_level",
          "matches@winner_name"
        ]
      }
    ]
  },
  {
    "id": 452,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what are the first names and country codes for players who won both the wta championships and the australian open ?",
        "db_id": "wta_1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "sql": "select players@country_code , players@first_name from players join matches on players@player_id = matches@winner_id where matches@tourney_name = 'value' intersect select players@country_code , players@first_name from players join matches on players@player_id = matches@winner_id where matches@tourney_name = 'value'",
        "value_match": [
          "matches@tourney_name"
        ],
        "value_alignment": [
          [
            [
              "wta_championships",
              "wta_championships"
            ]
          ],
          [
            [
              "australian_open",
              "australian_open"
            ]
          ]
        ],
        "exact_match": [
          "players",
          "players@first_name",
          "players@country_code"
        ],
        "partial_match": [
          "rankings@player_id",
          "players@player_id",
          "players@last_name",
          "matches@loser_name",
          "matches@tourney_name",
          "matches@winner_name"
        ]
      }
    ]
  },
  {
    "id": 453,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the first name and country code of the oldest player .",
        "db_id": "wta_1",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "Find the first name and country code of the oldest player.",
        "sql": "select players@first_name , players@country_code from players order by players@birth_date limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "players",
          "players@first_name",
          "players@country_code"
        ],
        "partial_match": [
          "rankings@player_id",
          "players@player_id",
          "players@last_name",
          "matches@loser_name",
          "matches@tourney_name",
          "matches@winner_name"
        ]
      }
    ]
  },
  {
    "id": 454,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what is the first name and country code of the oldest player ?",
        "db_id": "wta_1",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "What is the first name and country code of the oldest player?",
        "sql": "select players@first_name , players@country_code from players order by players@birth_date limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "players",
          "players@first_name",
          "players@country_code"
        ],
        "partial_match": [
          "rankings@player_id",
          "players@player_id",
          "players@last_name",
          "matches@loser_name",
          "matches@tourney_name",
          "matches@winner_name"
        ]
      }
    ]
  },
  {
    "id": 455,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "list the first and last name of all players in the order of birth date .",
        "db_id": "wta_1",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "question": "List the first and last name of all players in the order of birth date.",
        "sql": "select players@first_name , players@last_name from players order by players@birth_date",
        "value_match": [
          "players@last_name"
        ],
        "value_alignment": [
          [
            [
              "last",
              "last"
            ]
          ]
        ],
        "exact_match": [
          "players",
          "players@first_name",
          "players@last_name",
          "players@birth_date"
        ],
        "partial_match": [
          "rankings@ranking_date",
          "rankings@player_id",
          "players@player_id",
          "matches@loser_name",
          "matches@tourney_date",
          "matches@tourney_name",
          "matches@winner_name"
        ]
      }
    ]
  },
  {
    "id": 456,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what are the full names of all players , sorted by birth date ?",
        "db_id": "wta_1",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "question": "What are the full names of all players, sorted by birth date?",
        "sql": "select players@first_name , players@last_name from players order by players@birth_date",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "players",
          "players@birth_date"
        ],
        "partial_match": [
          "rankings@ranking_date",
          "rankings@player_id",
          "players@player_id",
          "players@first_name",
          "players@last_name",
          "matches@loser_name",
          "matches@tourney_date",
          "matches@tourney_name",
          "matches@winner_name"
        ]
      }
    ]
  },
  {
    "id": 457,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "list the first and last name of all players who are left / l hand in the order of birth date .",
        "db_id": "wta_1",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "sql": "select players@first_name , players@last_name from players where players@hand = 'value' order by players@birth_date",
        "value_match": [
          "matches@winner_hand",
          "players@last_name",
          "matches@loser_hand",
          "players@first_name",
          "players@hand"
        ],
        "value_alignment": [
          [
            [
              "last",
              "last"
            ]
          ],
          [
            [
              "l",
              "l"
            ]
          ]
        ],
        "exact_match": [
          "players",
          "players@first_name",
          "players@last_name",
          "players@hand",
          "players@birth_date"
        ],
        "partial_match": [
          "rankings@ranking_date",
          "rankings@player_id",
          "players@player_id",
          "matches@loser_hand",
          "matches@loser_name",
          "matches@tourney_date",
          "matches@tourney_name",
          "matches@winner_hand",
          "matches@winner_name"
        ]
      }
    ]
  },
  {
    "id": 458,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what are the full names of all left handed players , in order of birth date ?",
        "db_id": "wta_1",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "What are the full names of all left handed players, in order of birth date?",
        "sql": "select players@first_name , players@last_name from players where players@hand = 'value' order by players@birth_date",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "players",
          "players@hand",
          "players@birth_date"
        ],
        "partial_match": [
          "rankings@ranking_date",
          "rankings@player_id",
          "players@player_id",
          "players@first_name",
          "players@last_name",
          "matches@loser_hand",
          "matches@loser_name",
          "matches@tourney_date",
          "matches@tourney_name",
          "matches@winner_hand",
          "matches@winner_name"
        ]
      }
    ]
  },
  {
    "id": 459,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the first name and country code of the player who did the most number of tours .",
        "db_id": "wta_1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "sql": "select players@country_code , players@first_name from players join rankings on players@player_id = rankings@player_id order by rankings@tours desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "rankings@tours",
          "players",
          "players@first_name",
          "players@country_code",
          "matches@tourney_name"
        ],
        "partial_match": [
          "rankings@player_id",
          "players@player_id",
          "players@last_name",
          "matches@loser_name",
          "matches@tourney_date",
          "matches@tourney_id",
          "matches@tourney_level",
          "matches@winner_name"
        ]
      }
    ]
  },
  {
    "id": 460,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what is the first name and country code of the player with the most tours ?",
        "db_id": "wta_1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "What is the first name and country code of the player with the most tours?",
        "sql": "select players@country_code , players@first_name from players join rankings on players@player_id = rankings@player_id order by rankings@tours desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "rankings@tours",
          "players",
          "players@first_name",
          "players@country_code",
          "matches@tourney_name"
        ],
        "partial_match": [
          "rankings@player_id",
          "players@player_id",
          "players@last_name",
          "matches@loser_name",
          "matches@tourney_date",
          "matches@tourney_id",
          "matches@tourney_level",
          "matches@winner_name"
        ]
      }
    ]
  },
  {
    "id": 461,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the year that has the most number of matches .",
        "db_id": "wta_1",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the year that has the most number of matches.",
        "sql": "select matches@year from matches group by matches@year order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "matches",
          "matches@year"
        ],
        "partial_match": [
          "matches@match_num"
        ]
      }
    ]
  },
  {
    "id": 462,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "which year had the most matches ?",
        "db_id": "wta_1",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year had the most matches?",
        "sql": "select matches@year from matches group by matches@year order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "matches",
          "matches@year"
        ],
        "partial_match": [
          "matches@match_num"
        ]
      }
    ]
  },
  {
    "id": 463,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the name and rank points of the winner who won the most times .",
        "db_id": "wta_1",
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name and rank points of the winner who won the most times.",
        "sql": "select matches@winner_name , matches@winner_rank_points from matches group by matches@winner_name order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "rankings@ranking",
          "rankings@ranking_points",
          "matches@loser_rank_points",
          "matches@winner_name",
          "matches@winner_rank",
          "matches@winner_rank_points"
        ],
        "partial_match": [
          "rankings",
          "rankings@ranking_date",
          "players@first_name",
          "players@last_name",
          "matches@loser_name",
          "matches@loser_rank",
          "matches@tourney_name",
          "matches@winner_age",
          "matches@winner_entry",
          "matches@winner_hand",
          "matches@winner_ht",
          "matches@winner_id",
          "matches@winner_ioc",
          "matches@winner_seed"
        ]
      }
    ]
  },
  {
    "id": 464,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what is the name of the winner who has won the most matches , and how many rank points does this player have ?",
        "db_id": "wta_1",
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "sql": "select matches@winner_name , matches@winner_rank_points from matches group by matches@winner_name order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "rankings@ranking",
          "rankings@ranking_points",
          "players",
          "matches",
          "matches@loser_rank_points",
          "matches@winner_name",
          "matches@winner_rank",
          "matches@winner_rank_points"
        ],
        "partial_match": [
          "rankings",
          "rankings@ranking_date",
          "rankings@player_id",
          "players@player_id",
          "players@first_name",
          "players@last_name",
          "matches@loser_name",
          "matches@loser_rank",
          "matches@match_num",
          "matches@tourney_name",
          "matches@winner_age",
          "matches@winner_entry",
          "matches@winner_hand",
          "matches@winner_ht",
          "matches@winner_id",
          "matches@winner_ioc",
          "matches@winner_seed"
        ]
      }
    ]
  },
  {
    "id": 465,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the name of the winner who has the highest rank points and participated in the australian open tourney .",
        "db_id": "wta_1",
        "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "sql": "select matches@winner_name from matches where matches@tourney_name = 'value' order by matches@winner_rank_points desc limit 1",
        "value_match": [
          "matches@tourney_name"
        ],
        "value_alignment": [
          [
            [
              "australian_open",
              "australian_open"
            ]
          ]
        ],
        "exact_match": [
          "rankings@ranking",
          "rankings@ranking_points",
          "matches@loser_rank_points",
          "matches@tourney_name",
          "matches@winner_name",
          "matches@winner_rank",
          "matches@winner_rank_points"
        ],
        "partial_match": [
          "rankings",
          "rankings@ranking_date",
          "rankings@tours",
          "players@first_name",
          "players@last_name",
          "matches@loser_name",
          "matches@loser_rank",
          "matches@tourney_date",
          "matches@tourney_id",
          "matches@tourney_level",
          "matches@winner_age",
          "matches@winner_entry",
          "matches@winner_hand",
          "matches@winner_ht",
          "matches@winner_id",
          "matches@winner_ioc",
          "matches@winner_seed"
        ]
      }
    ]
  },
  {
    "id": 466,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what is the name of the winner with the most rank points who participated in the australian open tournament ?",
        "db_id": "wta_1",
        "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "sql": "select matches@winner_name from matches where matches@tourney_name = 'value' order by matches@winner_rank_points desc limit 1",
        "value_match": [
          "matches@tourney_name"
        ],
        "value_alignment": [
          [
            [
              "australian_open",
              "australian_open"
            ]
          ]
        ],
        "exact_match": [
          "rankings@ranking",
          "rankings@ranking_points",
          "matches@loser_rank_points",
          "matches@winner_name",
          "matches@winner_rank",
          "matches@winner_rank_points"
        ],
        "partial_match": [
          "rankings",
          "rankings@ranking_date",
          "rankings@tours",
          "players@first_name",
          "players@last_name",
          "matches@loser_name",
          "matches@loser_rank",
          "matches@tourney_name",
          "matches@winner_age",
          "matches@winner_entry",
          "matches@winner_hand",
          "matches@winner_ht",
          "matches@winner_id",
          "matches@winner_ioc",
          "matches@winner_seed"
        ]
      }
    ]
  },
  {
    "id": 467,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the names of loser and winner who played in the match with greatest number of minutes .",
        "db_id": "wta_1",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "sql": "select matches@winner_name , matches@loser_name from matches order by matches@minutes desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "matches",
          "matches@loser_name",
          "matches@minutes",
          "matches@winner_name"
        ],
        "partial_match": [
          "rankings@player_id",
          "players",
          "players@player_id",
          "players@first_name",
          "players@last_name",
          "matches@loser_age",
          "matches@loser_entry",
          "matches@loser_hand",
          "matches@loser_ht",
          "matches@loser_id",
          "matches@loser_ioc",
          "matches@loser_rank",
          "matches@loser_rank_points",
          "matches@loser_seed",
          "matches@match_num",
          "matches@tourney_name",
          "matches@winner_age",
          "matches@winner_entry",
          "matches@winner_hand",
          "matches@winner_ht",
          "matches@winner_id",
          "matches@winner_ioc",
          "matches@winner_rank",
          "matches@winner_rank_points",
          "matches@winner_seed"
        ]
      }
    ]
  },
  {
    "id": 468,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what are the names of the winner and loser who played in the longest match ?",
        "db_id": "wta_1",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "What are the names of the winner and loser who played in the longest match?",
        "sql": "select matches@winner_name , matches@loser_name from matches order by matches@minutes desc limit 1",
        "value_match": [
          "players@last_name"
        ],
        "value_alignment": [
          [
            [
              "long",
              "long"
            ]
          ]
        ],
        "exact_match": [
          "matches",
          "matches@loser_name",
          "matches@winner_name"
        ],
        "partial_match": [
          "rankings@player_id",
          "players",
          "players@player_id",
          "players@first_name",
          "players@last_name",
          "matches@loser_age",
          "matches@loser_entry",
          "matches@loser_hand",
          "matches@loser_ht",
          "matches@loser_id",
          "matches@loser_ioc",
          "matches@loser_rank",
          "matches@loser_rank_points",
          "matches@loser_seed",
          "matches@match_num",
          "matches@tourney_name",
          "matches@winner_age",
          "matches@winner_entry",
          "matches@winner_hand",
          "matches@winner_ht",
          "matches@winner_id",
          "matches@winner_ioc",
          "matches@winner_rank",
          "matches@winner_rank_points",
          "matches@winner_seed"
        ]
      }
    ]
  },
  {
    "id": 469,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the average ranking for each player and their first name .",
        "db_id": "wta_1",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "Find the average ranking for each player and their first name.",
        "sql": "select avg ( rankings@ranking ) , players@first_name from players join rankings on players@player_id = rankings@player_id group by players@first_name",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "rankings@ranking",
          "players",
          "players@first_name"
        ],
        "partial_match": [
          "rankings",
          "rankings@ranking_date",
          "rankings@player_id",
          "rankings@ranking_points",
          "players@player_id",
          "players@last_name",
          "matches@loser_name",
          "matches@loser_rank",
          "matches@loser_rank_points",
          "matches@tourney_name",
          "matches@winner_name",
          "matches@winner_rank",
          "matches@winner_rank_points"
        ]
      }
    ]
  },
  {
    "id": 470,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what are the first names of all players , and their average rankings ?",
        "db_id": "wta_1",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "What are the first names of all players, and their average rankings?",
        "sql": "select avg ( rankings@ranking ) , players@first_name from players join rankings on players@player_id = rankings@player_id group by players@first_name",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "rankings",
          "players",
          "players@first_name"
        ],
        "partial_match": [
          "rankings@ranking_date",
          "rankings@ranking",
          "rankings@player_id",
          "rankings@ranking_points",
          "players@player_id",
          "players@last_name",
          "matches@loser_name",
          "matches@tourney_name",
          "matches@winner_name"
        ]
      }
    ]
  },
  {
    "id": 471,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the total ranking points for each player and their first name .",
        "db_id": "wta_1",
        "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "Find the total ranking points for each player and their first name.",
        "sql": "select sum ( rankings@ranking_points ) , players@first_name from players join rankings on players@player_id = rankings@player_id group by players@first_name",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "rankings@ranking",
          "rankings@ranking_points",
          "players",
          "players@first_name",
          "matches@loser_rank_points",
          "matches@winner_rank_points"
        ],
        "partial_match": [
          "rankings",
          "rankings@ranking_date",
          "rankings@player_id",
          "players@player_id",
          "players@last_name",
          "matches@loser_name",
          "matches@loser_rank",
          "matches@tourney_name",
          "matches@winner_name",
          "matches@winner_rank"
        ]
      }
    ]
  },
  {
    "id": 472,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what are the first names of all players , and their total ranking points ?",
        "db_id": "wta_1",
        "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "What are the first names of all players, and their total ranking points?",
        "sql": "select sum ( rankings@ranking_points ) , players@first_name from players join rankings on players@player_id = rankings@player_id group by players@first_name",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "rankings@ranking",
          "rankings@ranking_points",
          "players",
          "players@first_name",
          "matches@loser_rank_points",
          "matches@winner_rank_points"
        ],
        "partial_match": [
          "rankings",
          "rankings@ranking_date",
          "rankings@player_id",
          "players@player_id",
          "players@last_name",
          "matches@loser_name",
          "matches@loser_rank",
          "matches@tourney_name",
          "matches@winner_name",
          "matches@winner_rank"
        ]
      }
    ]
  },
  {
    "id": 473,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the number of players for each country .",
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "find the number of players for each country.",
        "sql": "select count ( * ) , players@country_code from players group by players@country_code",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "players"
        ],
        "partial_match": [
          "rankings@player_id",
          "players@player_id",
          "players@country_code"
        ]
      }
    ]
  },
  {
    "id": 474,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "how many players are from each country ?",
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "How many players are from each country?",
        "sql": "select count ( * ) , players@country_code from players group by players@country_code",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "players"
        ],
        "partial_match": [
          "rankings@player_id",
          "players@player_id",
          "players@country_code"
        ]
      }
    ]
  },
  {
    "id": 475,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the code of the country where has the greatest number of players .",
        "db_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "find the code of the country where has the greatest number of players.",
        "sql": "select players@country_code from players group by players@country_code order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "players",
          "players@country_code"
        ],
        "partial_match": [
          "rankings@player_id",
          "players@player_id"
        ]
      }
    ]
  },
  {
    "id": 476,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what is the code of the country with the most players ?",
        "db_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of the country with the most players?",
        "sql": "select players@country_code from players group by players@country_code order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "players",
          "players@country_code"
        ],
        "partial_match": [
          "rankings@player_id",
          "players@player_id"
        ]
      }
    ]
  },
  {
    "id": 477,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the codes of countries that have more than 50 players .",
        "db_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "Find the codes of countries that have more than 50 players.",
        "sql": "select players@country_code from players group by players@country_code having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "players",
          "players@country_code"
        ],
        "partial_match": [
          "rankings@player_id",
          "players@player_id"
        ]
      }
    ]
  },
  {
    "id": 478,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what are the codes of countries with more than 50 players ?",
        "db_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "What are the codes of countries with more than 50 players?",
        "sql": "select players@country_code from players group by players@country_code having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "players",
          "players@country_code"
        ],
        "partial_match": [
          "rankings@player_id",
          "players@player_id"
        ]
      }
    ]
  },
  {
    "id": 479,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the total number of tours for each ranking date .",
        "db_id": "wta_1",
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "question": "Find the total number of tours for each ranking date.",
        "sql": "select sum ( rankings@tours ) , rankings@ranking_date from rankings group by rankings@ranking_date",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "rankings@ranking_date",
          "rankings@ranking",
          "rankings@tours",
          "matches@tourney_date"
        ],
        "partial_match": [
          "rankings",
          "rankings@ranking_points",
          "players@birth_date",
          "matches@loser_rank",
          "matches@loser_rank_points",
          "matches@tourney_id",
          "matches@tourney_level",
          "matches@tourney_name",
          "matches@winner_rank",
          "matches@winner_rank_points"
        ]
      }
    ]
  },
  {
    "id": 480,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "how many total tours were there for each ranking date ?",
        "db_id": "wta_1",
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "question": "How many total tours were there for each ranking date?",
        "sql": "select sum ( rankings@tours ) , rankings@ranking_date from rankings group by rankings@ranking_date",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "rankings@ranking_date",
          "rankings@ranking",
          "rankings@tours",
          "matches@tourney_date"
        ],
        "partial_match": [
          "rankings",
          "rankings@ranking_points",
          "players@birth_date",
          "matches@loser_rank",
          "matches@loser_rank_points",
          "matches@tourney_id",
          "matches@tourney_level",
          "matches@tourney_name",
          "matches@winner_rank",
          "matches@winner_rank_points"
        ]
      }
    ]
  },
  {
    "id": 481,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the number of matches happened in each year .",
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "Find the number of matches happened in each year.",
        "sql": "select count ( * ) , matches@year from matches group by matches@year",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "matches",
          "matches@year"
        ],
        "partial_match": [
          "matches@match_num"
        ]
      }
    ]
  },
  {
    "id": 482,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "how many matches were played in each year ?",
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "How many matches were played in each year?",
        "sql": "select count ( * ) , matches@year from matches group by matches@year",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "matches",
          "matches@year"
        ],
        "partial_match": [
          "rankings@player_id",
          "players",
          "players@player_id",
          "matches@match_num"
        ]
      }
    ]
  },
  {
    "id": 483,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the name and rank of the 3 youngest winners across all matches .",
        "db_id": "wta_1",
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "sql": "select distinct matches@winner_name , matches@winner_rank from matches order by matches@winner_age limit 3",
        "value_match": [
          "players@last_name"
        ],
        "value_alignment": [
          [
            [
              "young",
              "young"
            ]
          ]
        ],
        "exact_match": [
          "rankings@ranking",
          "matches",
          "matches@winner_name",
          "matches@winner_rank",
          "matches@winner_rank_points"
        ],
        "partial_match": [
          "rankings",
          "rankings@ranking_date",
          "rankings@ranking_points",
          "players@first_name",
          "players@last_name",
          "matches@loser_name",
          "matches@loser_rank",
          "matches@loser_rank_points",
          "matches@match_num",
          "matches@tourney_name",
          "matches@winner_age",
          "matches@winner_entry",
          "matches@winner_hand",
          "matches@winner_ht",
          "matches@winner_id",
          "matches@winner_ioc",
          "matches@winner_seed"
        ]
      }
    ]
  },
  {
    "id": 484,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what are the names and ranks of the three youngest winners across all matches ?",
        "db_id": "wta_1",
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "sql": "select distinct matches@winner_name , matches@winner_rank from matches order by matches@winner_age limit 3",
        "value_match": [
          "players@last_name"
        ],
        "value_alignment": [
          [
            [
              "young",
              "young"
            ]
          ]
        ],
        "exact_match": [
          "rankings@ranking",
          "matches",
          "matches@winner_name",
          "matches@winner_rank",
          "matches@winner_rank_points"
        ],
        "partial_match": [
          "rankings",
          "rankings@ranking_date",
          "rankings@ranking_points",
          "players@first_name",
          "players@last_name",
          "matches@loser_name",
          "matches@loser_rank",
          "matches@loser_rank_points",
          "matches@match_num",
          "matches@tourney_name",
          "matches@winner_age",
          "matches@winner_entry",
          "matches@winner_hand",
          "matches@winner_ht",
          "matches@winner_id",
          "matches@winner_ioc",
          "matches@winner_seed"
        ]
      }
    ]
  },
  {
    "id": 485,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "how many different winners both participated in the wta championships and were left handed ?",
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "sql": "select count ( distinct matches@winner_name ) from matches where matches@tourney_name = 'value' and matches@winner_hand = 'value'",
        "value_match": [
          "matches@tourney_name"
        ],
        "value_alignment": [
          [
            [
              "wta_championships",
              "wta_championships"
            ]
          ]
        ],
        "exact_match": [
          "players@hand",
          "matches@winner_hand"
        ],
        "partial_match": [
          "matches@loser_hand",
          "matches@winner_age",
          "matches@winner_entry",
          "matches@winner_ht",
          "matches@winner_id",
          "matches@winner_ioc",
          "matches@winner_name",
          "matches@winner_rank",
          "matches@winner_rank_points",
          "matches@winner_seed"
        ]
      }
    ]
  },
  {
    "id": 486,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the number of left handed winners who participated in the wta championships .",
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "sql": "select count ( distinct matches@winner_name ) from matches where matches@tourney_name = 'value' and matches@winner_hand = 'value'",
        "value_match": [
          "matches@tourney_name"
        ],
        "value_alignment": [
          [
            [
              "wta_championships",
              "wta_championships"
            ]
          ]
        ],
        "exact_match": [
          "players@hand",
          "matches@winner_hand"
        ],
        "partial_match": [
          "matches@loser_hand",
          "matches@winner_age",
          "matches@winner_entry",
          "matches@winner_ht",
          "matches@winner_id",
          "matches@winner_ioc",
          "matches@winner_name",
          "matches@winner_rank",
          "matches@winner_rank_points",
          "matches@winner_seed"
        ]
      }
    ]
  },
  {
    "id": 487,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the first name , country code and birth date of the winner who has the highest rank points in all matches .",
        "db_id": "wta_1",
        "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "sql": "select players@first_name , players@country_code , players@birth_date from players join matches on players@player_id = matches@winner_id order by matches@winner_rank_points desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "rankings@ranking_date",
          "rankings@ranking",
          "rankings@ranking_points",
          "players@first_name",
          "players@birth_date",
          "players@country_code",
          "matches",
          "matches@loser_rank_points",
          "matches@winner_name",
          "matches@winner_rank",
          "matches@winner_rank_points"
        ],
        "partial_match": [
          "rankings",
          "players@last_name",
          "matches@loser_name",
          "matches@loser_rank",
          "matches@match_num",
          "matches@tourney_date",
          "matches@tourney_name",
          "matches@winner_age",
          "matches@winner_entry",
          "matches@winner_hand",
          "matches@winner_ht",
          "matches@winner_id",
          "matches@winner_ioc",
          "matches@winner_seed"
        ]
      }
    ]
  },
  {
    "id": 488,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "what is the first name , country code , and birth date of the player with the most winner rank points across all matches ?",
        "db_id": "wta_1",
        "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "sql": "select players@first_name , players@country_code , players@birth_date from players join matches on players@player_id = matches@winner_id order by matches@winner_rank_points desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "rankings@ranking_date",
          "rankings@ranking",
          "rankings@ranking_points",
          "players",
          "players@first_name",
          "players@birth_date",
          "players@country_code",
          "matches",
          "matches@loser_rank_points",
          "matches@winner_name",
          "matches@winner_rank",
          "matches@winner_rank_points"
        ],
        "partial_match": [
          "rankings",
          "rankings@player_id",
          "players@player_id",
          "players@last_name",
          "matches@loser_name",
          "matches@loser_rank",
          "matches@match_num",
          "matches@tourney_date",
          "matches@tourney_name",
          "matches@winner_age",
          "matches@winner_entry",
          "matches@winner_hand",
          "matches@winner_ht",
          "matches@winner_id",
          "matches@winner_ioc",
          "matches@winner_seed"
        ]
      }
    ]
  },
  {
    "id": 489,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "find the number of players for each hand type .",
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "Find the number of players for each hand type.",
        "sql": "select count ( * ) , players@hand from players group by players@hand",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "players",
          "players@hand"
        ],
        "partial_match": [
          "rankings@player_id",
          "players@player_id",
          "matches@loser_hand",
          "matches@winner_hand"
        ]
      }
    ]
  },
  {
    "id": 490,
    "database_id": "wta_1",
    "interaction": [
      {
        "utterance": "how many players are there for each hand type ?",
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "How many players are there for each hand type?",
        "sql": "select count ( * ) , players@hand from players group by players@hand",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "players",
          "players@hand"
        ],
        "partial_match": [
          "rankings@player_id",
          "players@player_id",
          "matches@loser_hand",
          "matches@winner_hand"
        ]
      }
    ]
  },
  {
    "id": 491,
    "database_id": "battle_death",
    "interaction": [
      {
        "utterance": "how many ships ended up being 'captured ' ?",
        "db_id": "battle_death",
        "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "question": "How many ships ended up being 'Captured'?",
        "sql": "select count ( * ) from ship where ship@disposition_of_ship = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "ship"
        ],
        "partial_match": [
          "death@caused_by_ship_id",
          "ship@disposition_of_ship"
        ]
      }
    ]
  },
  {
    "id": 492,
    "database_id": "battle_death",
    "interaction": [
      {
        "utterance": "list the name and tonnage ordered by in descending alphaetical order for the names .",
        "db_id": "battle_death",
        "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "sql": "select ship@name , ship@tonnage from ship order by ship@name desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "battle@name",
          "ship@name",
          "ship@tonnage"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 493,
    "database_id": "battle_death",
    "interaction": [
      {
        "utterance": "list the name , date and result of each battle .",
        "db_id": "battle_death",
        "query": "SELECT name ,  date FROM battle",
        "question": "List the name, date and result of each battle.",
        "sql": "select battle@name , battle@date from battle",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "battle",
          "battle@name",
          "battle@date",
          "battle@result",
          "ship@name"
        ],
        "partial_match": [
          "ship@lost_in_battle"
        ]
      }
    ]
  },
  {
    "id": 494,
    "database_id": "battle_death",
    "interaction": [
      {
        "utterance": "what is maximum and minimum death toll caused each time ?",
        "db_id": "battle_death",
        "query": "SELECT max(killed) ,  min(killed) FROM death",
        "question": "What is maximum and minimum death toll caused each time?",
        "sql": "select max ( death@killed ) , min ( death@killed ) from death",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "death"
        ],
        "partial_match": [
          "death@caused_by_ship_id"
        ]
      }
    ]
  },
  {
    "id": 495,
    "database_id": "battle_death",
    "interaction": [
      {
        "utterance": "what is the average number of injuries caused each time ?",
        "db_id": "battle_death",
        "query": "SELECT avg(injured) FROM death",
        "question": "What is the average number of injuries caused each time?",
        "sql": "select avg ( death@injured ) from death",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [],
        "partial_match": [
          "death@caused_by_ship_id"
        ]
      }
    ]
  },
  {
    "id": 496,
    "database_id": "battle_death",
    "interaction": [
      {
        "utterance": "what are the death and injury situations caused by the ship with tonnage 't ' ?",
        "db_id": "battle_death",
        "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "sql": "select death@killed , death@injured from death join ship on death@caused_by_ship_id = ship@id where ship@tonnage = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "death",
          "death@caused_by_ship_id",
          "ship",
          "ship@tonnage"
        ],
        "partial_match": [
          "ship@disposition_of_ship"
        ]
      }
    ]
  },
  {
    "id": 497,
    "database_id": "battle_death",
    "interaction": [
      {
        "utterance": "what are the name and results of the battles when the bulgarian commander is not 'boril '",
        "db_id": "battle_death",
        "query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "sql": "select battle@name , battle@result from battle where battle@bulgarian_commander != 'value'",
        "value_match": [
          "battle@bulgarian_commander"
        ],
        "value_alignment": [
          [
            [
              "boril",
              "boril"
            ]
          ]
        ],
        "exact_match": [
          "battle",
          "battle@name",
          "battle@bulgarian_commander",
          "battle@result",
          "ship@name"
        ],
        "partial_match": [
          "battle@latin_commander",
          "ship@lost_in_battle"
        ]
      }
    ]
  },
  {
    "id": 498,
    "database_id": "battle_death",
    "interaction": [
      {
        "utterance": "what are the different ids and names of the battles that lost any 'brig ' type shipes ?",
        "db_id": "battle_death",
        "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "sql": "select distinct battle@id , battle@name from battle join ship on battle@id = ship@lost_in_battle where ship@ship_type = 'value'",
        "value_match": [
          "ship@ship_type"
        ],
        "value_alignment": [
          [
            [
              "brig",
              "brig"
            ]
          ]
        ],
        "exact_match": [
          "battle",
          "battle@name",
          "ship@name"
        ],
        "partial_match": [
          "ship",
          "ship@lost_in_battle",
          "ship@ship_type"
        ]
      }
    ]
  },
  {
    "id": 499,
    "database_id": "battle_death",
    "interaction": [
      {
        "utterance": "what are the ids and names of the battles that led to more than 10 people killed in total .",
        "db_id": "battle_death",
        "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "sql": "select battle@id , battle@name from battle join ship on battle@id = ship@lost_in_battle join death on ship@id = death@caused_by_ship_id group by battle@id having sum ( death@killed ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "death@killed",
          "battle",
          "battle@name",
          "ship@name"
        ],
        "partial_match": [
          "ship@lost_in_battle"
        ]
      }
    ]
  },
  {
    "id": 500,
    "database_id": "battle_death",
    "interaction": [
      {
        "utterance": "what is the ship id and name that caused most total injuries ?",
        "db_id": "battle_death",
        "query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the ship id and name that caused most total injuries?",
        "sql": "select ship@id , ship@name from death join ship on death@caused_by_ship_id = ship@id group by ship@id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "death@caused_by_ship_id",
          "battle@name",
          "ship",
          "ship@name"
        ],
        "partial_match": [
          "ship@disposition_of_ship"
        ]
      }
    ]
  },
  {
    "id": 501,
    "database_id": "battle_death",
    "interaction": [
      {
        "utterance": "what are the distinct battle names which are between bulgarian commander 'kaloyan ' and latin commander 'baldwin i ' ?",
        "db_id": "battle_death",
        "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "sql": "select battle@name from battle where battle@bulgarian_commander = 'value' and battle@latin_commander = 'value'",
        "value_match": [
          "battle@bulgarian_commander",
          "battle@latin_commander"
        ],
        "value_alignment": [
          [
            [
              "baldwin_i",
              "baldwin_i"
            ]
          ],
          [
            [
              "kaloyan",
              "kaloyan"
            ]
          ]
        ],
        "exact_match": [
          "battle",
          "battle@name",
          "battle@bulgarian_commander",
          "battle@latin_commander",
          "ship@name"
        ],
        "partial_match": [
          "ship@lost_in_battle"
        ]
      }
    ]
  },
  {
    "id": 502,
    "database_id": "battle_death",
    "interaction": [
      {
        "utterance": "how many different results are there for the battles ?",
        "db_id": "battle_death",
        "query": "SELECT count(DISTINCT RESULT) FROM battle",
        "question": "How many different results are there for the battles?",
        "sql": "select count ( distinct battle@result ) from battle",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "battle",
          "battle@result"
        ],
        "partial_match": [
          "ship@lost_in_battle"
        ]
      }
    ]
  },
  {
    "id": 503,
    "database_id": "battle_death",
    "interaction": [
      {
        "utterance": "how many battles did not lose any ship with tonnage '225 ' ?",
        "db_id": "battle_death",
        "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "sql": "select count ( * ) from battle where battle@id not in ( select ship@lost_in_battle from ship where ship@tonnage = 'value' )",
        "value_match": [
          "ship@tonnage"
        ],
        "value_alignment": [
          [
            [
              "225",
              "225"
            ]
          ]
        ],
        "exact_match": [
          "battle",
          "ship",
          "ship@tonnage"
        ],
        "partial_match": [
          "death@caused_by_ship_id",
          "ship@lost_in_battle",
          "ship@disposition_of_ship"
        ]
      }
    ]
  },
  {
    "id": 504,
    "database_id": "battle_death",
    "interaction": [
      {
        "utterance": "list the name and date the battle that has lost the ship named 'lettice ' and the ship named 'hms atalanta '",
        "db_id": "battle_death",
        "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "sql": "select battle@name , battle@date from battle join ship on battle@id = ship@lost_in_battle where ship@name = 'value' intersect select battle@name , battle@date from battle join ship on battle@id = ship@lost_in_battle where ship@name = 'value'",
        "value_match": [
          "ship@name"
        ],
        "value_alignment": [
          [
            [
              "hms_atalanta",
              "hms_atalanta"
            ]
          ],
          [
            [
              "lettice",
              "lettice"
            ]
          ]
        ],
        "exact_match": [
          "death@caused_by_ship_id",
          "battle",
          "battle@name",
          "battle@date",
          "ship",
          "ship@name",
          "ship@disposition_of_ship"
        ],
        "partial_match": [
          "ship@lost_in_battle"
        ]
      }
    ]
  },
  {
    "id": 505,
    "database_id": "battle_death",
    "interaction": [
      {
        "utterance": "show names , results and bulgarian commanders of the battles with no ships lost in the 'english channel ' .",
        "db_id": "battle_death",
        "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "sql": "select battle@name , battle@result , battle@bulgarian_commander from battle except select battle@name , battle@result , battle@bulgarian_commander from battle join ship on battle@id = ship@lost_in_battle where ship@location = 'value'",
        "value_match": [
          "ship@location"
        ],
        "value_alignment": [
          [
            [
              "english_channel",
              "english_channel"
            ]
          ]
        ],
        "exact_match": [
          "battle",
          "battle@name",
          "battle@bulgarian_commander",
          "battle@result",
          "ship",
          "ship@name"
        ],
        "partial_match": [
          "death@caused_by_ship_id",
          "battle@latin_commander",
          "ship@lost_in_battle",
          "ship@disposition_of_ship"
        ]
      }
    ]
  },
  {
    "id": 506,
    "database_id": "battle_death",
    "interaction": [
      {
        "utterance": "what are the notes of the death events which has substring 'east ' ?",
        "db_id": "battle_death",
        "query": "SELECT note FROM death WHERE note LIKE '%East%'",
        "question": "What are the notes of the death events which has substring 'East'?",
        "sql": "select death@note from death where death@note like 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "death",
          "death@note"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 507,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what are all the addresses including line 1 and line 2 ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT line_1 ,  line_2 FROM addresses",
        "question": "what are all the addresses including line 1 and line 2?",
        "sql": "select addresses@line_1 , addresses@line_2 from addresses",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "addresses",
          "addresses@line_1",
          "addresses@line_2",
          "addresses@line_3"
        ],
        "partial_match": [
          "addresses@address_id",
          "addresses@other_address_details",
          "students@current_address_id",
          "students@permanent_address_id"
        ]
      }
    ]
  },
  {
    "id": 508,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the first and second line for all addresses ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT line_1 ,  line_2 FROM addresses",
        "question": "What is the first and second line for all addresses?",
        "sql": "select addresses@line_1 , addresses@line_2 from addresses",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "addresses"
        ],
        "partial_match": [
          "addresses@address_id",
          "addresses@line_1",
          "addresses@line_2",
          "addresses@line_3",
          "addresses@other_address_details",
          "students@current_address_id",
          "students@permanent_address_id",
          "students@first_name",
          "students@date_first_registered"
        ]
      }
    ]
  },
  {
    "id": 509,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "how many courses in total are listed ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) FROM Courses",
        "question": "How many courses in total are listed?",
        "sql": "select count ( * ) from courses",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "courses"
        ],
        "partial_match": [
          "transcript_contents@student_course_id",
          "courses@course_id",
          "courses@course_name",
          "courses@course_description",
          "sections@course_id",
          "student_enrolment_courses",
          "student_enrolment_courses@student_course_id",
          "student_enrolment_courses@course_id"
        ]
      }
    ]
  },
  {
    "id": 510,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "how many courses are there ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) FROM Courses",
        "question": "How many courses are there?",
        "sql": "select count ( * ) from courses",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "courses"
        ],
        "partial_match": [
          "transcript_contents@student_course_id",
          "courses@course_id",
          "courses@course_name",
          "courses@course_description",
          "sections@course_id",
          "student_enrolment_courses",
          "student_enrolment_courses@student_course_id",
          "student_enrolment_courses@course_id"
        ]
      }
    ]
  },
  {
    "id": 511,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "how is the math course described ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "question": "How is the math course described?",
        "sql": "select courses@course_description from courses where courses@course_name = 'value'",
        "value_match": [
          "departments@department_name",
          "courses@course_name"
        ],
        "value_alignment": [
          [
            [
              "math",
              "math"
            ]
          ]
        ],
        "exact_match": [
          "courses"
        ],
        "partial_match": [
          "transcript_contents@student_course_id",
          "courses@course_id",
          "courses@course_name",
          "courses@course_description",
          "sections@course_id",
          "student_enrolment_courses",
          "student_enrolment_courses@student_course_id",
          "student_enrolment_courses@course_id"
        ]
      }
    ]
  },
  {
    "id": 512,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what are the descriptions for all the math courses ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "question": "What are the descriptions for all the math courses?",
        "sql": "select courses@course_description from courses where courses@course_name = 'value'",
        "value_match": [
          "departments@department_name",
          "courses@course_name"
        ],
        "value_alignment": [
          [
            [
              "math",
              "math"
            ]
          ]
        ],
        "exact_match": [
          "courses",
          "courses@course_description"
        ],
        "partial_match": [
          "transcript_contents@student_course_id",
          "courses@course_id",
          "courses@course_name",
          "departments@department_description",
          "degree_programs@degree_summary_description",
          "sections@course_id",
          "sections@section_description",
          "semesters@semester_description",
          "student_enrolment_courses",
          "student_enrolment_courses@student_course_id",
          "student_enrolment_courses@course_id"
        ]
      }
    ]
  },
  {
    "id": 513,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the zip code of the address in the city port chelsea ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "sql": "select addresses@zip_postcode from addresses where addresses@city = 'value'",
        "value_match": [
          "addresses@city"
        ],
        "value_alignment": [
          [
            [
              "port_chelsea",
              "port_chelsea"
            ]
          ]
        ],
        "exact_match": [
          "addresses",
          "addresses@city"
        ],
        "partial_match": [
          "addresses@address_id",
          "addresses@zip_postcode",
          "addresses@other_address_details",
          "students@current_address_id",
          "students@permanent_address_id"
        ]
      }
    ]
  },
  {
    "id": 514,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the zip code for port chelsea ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code for Port Chelsea?",
        "sql": "select addresses@zip_postcode from addresses where addresses@city = 'value'",
        "value_match": [
          "addresses@city"
        ],
        "value_alignment": [
          [
            [
              "port_chelsea",
              "port_chelsea"
            ]
          ]
        ],
        "exact_match": [],
        "partial_match": [
          "addresses@zip_postcode"
        ]
      }
    ]
  },
  {
    "id": 515,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "which department offers the most number of degrees ? list department name and id .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which department offers the most number of degrees? List department name and id.",
        "sql": "select departments@department_name , degree_programs@department_id from degree_programs join departments on degree_programs@department_id = departments@department_id group by degree_programs@department_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "departments",
          "departments@department_id",
          "departments@department_name",
          "departments@department_description",
          "degree_programs@department_id",
          "degree_programs@degree_summary_name"
        ],
        "partial_match": [
          "courses@course_name",
          "degree_programs",
          "degree_programs@degree_program_id",
          "degree_programs@degree_summary_description",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "students@cell_mobile_number",
          "student_enrolment@degree_program_id"
        ]
      }
    ]
  },
  {
    "id": 516,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the name and id of the department with the most number of degrees ?",
        "db_id": "student_transcripts_tracking",
        "query": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "question": "What is the name and id of the department with the most number of degrees ?",
        "sql": "select departments@department_name , degree_programs@department_id from degree_programs join departments on degree_programs@department_id = departments@department_id group by degree_programs@department_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "departments",
          "departments@department_name",
          "degree_programs@degree_summary_name"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_id",
          "departments@department_description",
          "degree_programs",
          "degree_programs@degree_program_id",
          "degree_programs@department_id",
          "degree_programs@degree_summary_description",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "students@cell_mobile_number",
          "student_enrolment@degree_program_id"
        ]
      }
    ]
  },
  {
    "id": 517,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "how many departments offer any degree ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "question": "How many departments offer any degree?",
        "sql": "select count ( distinct degree_programs@department_id ) from degree_programs",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "departments"
        ],
        "partial_match": [
          "departments@department_id",
          "departments@department_name",
          "departments@department_description",
          "degree_programs",
          "degree_programs@degree_program_id",
          "degree_programs@department_id",
          "degree_programs@degree_summary_name",
          "degree_programs@degree_summary_description",
          "student_enrolment@degree_program_id"
        ]
      }
    ]
  },
  {
    "id": 518,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "how many different departments offer degrees ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "question": "How many different departments offer degrees?",
        "sql": "select count ( distinct degree_programs@department_id ) from degree_programs",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "departments"
        ],
        "partial_match": [
          "departments@department_id",
          "departments@department_name",
          "departments@department_description",
          "degree_programs",
          "degree_programs@degree_program_id",
          "degree_programs@department_id",
          "degree_programs@degree_summary_name",
          "degree_programs@degree_summary_description",
          "student_enrolment@degree_program_id"
        ]
      }
    ]
  },
  {
    "id": 519,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "how many different degree names are offered ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "question": "How many different degree names are offered?",
        "sql": "select count ( distinct degree_programs@degree_summary_name ) from degree_programs",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "degree_programs@degree_summary_name"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs",
          "degree_programs@degree_program_id",
          "degree_programs@degree_summary_description",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "student_enrolment@degree_program_id"
        ]
      }
    ]
  },
  {
    "id": 520,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "how many different degrees are offered ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "question": "How many different degrees are offered?",
        "sql": "select count ( distinct degree_programs@degree_summary_name ) from degree_programs",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [],
        "partial_match": [
          "degree_programs",
          "degree_programs@degree_program_id",
          "degree_programs@degree_summary_name",
          "degree_programs@degree_summary_description",
          "student_enrolment@degree_program_id"
        ]
      }
    ]
  },
  {
    "id": 521,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "how many degrees does the engineering department offer ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "question": "How many degrees does the engineering department offer?",
        "sql": "select count ( * ) from departments join degree_programs on departments@department_id = degree_programs@department_id where departments@department_name = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "departments"
        ],
        "partial_match": [
          "departments@department_id",
          "departments@department_name",
          "departments@department_description",
          "degree_programs",
          "degree_programs@degree_program_id",
          "degree_programs@department_id",
          "degree_programs@degree_summary_name",
          "degree_programs@degree_summary_description",
          "student_enrolment@degree_program_id"
        ]
      }
    ]
  },
  {
    "id": 522,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "how many degrees does the engineering department have ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "question": "How many degrees does the engineering department have?",
        "sql": "select count ( * ) from departments join degree_programs on departments@department_id = degree_programs@department_id where departments@department_name = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "departments"
        ],
        "partial_match": [
          "departments@department_id",
          "departments@department_name",
          "departments@department_description",
          "degree_programs",
          "degree_programs@degree_program_id",
          "degree_programs@department_id",
          "degree_programs@degree_summary_name",
          "degree_programs@degree_summary_description",
          "student_enrolment@degree_program_id"
        ]
      }
    ]
  },
  {
    "id": 523,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what are the names and descriptions of all the sections ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_name ,  section_description FROM Sections",
        "question": "What are the names and descriptions of all the sections?",
        "sql": "select sections@section_name , sections@section_description from sections",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "sections"
        ],
        "partial_match": [
          "courses@course_name",
          "courses@course_description",
          "departments@department_name",
          "departments@department_description",
          "degree_programs@degree_summary_name",
          "degree_programs@degree_summary_description",
          "sections@section_name",
          "sections@section_description",
          "semesters@semester_name",
          "semesters@semester_description",
          "students@first_name",
          "students@middle_name",
          "students@last_name"
        ]
      }
    ]
  },
  {
    "id": 524,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what are the names and descriptions for all the sections ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_name ,  section_description FROM Sections",
        "question": "What are the names and descriptions for all the sections?",
        "sql": "select sections@section_name , sections@section_description from sections",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "sections"
        ],
        "partial_match": [
          "courses@course_name",
          "courses@course_description",
          "departments@department_name",
          "departments@department_description",
          "degree_programs@degree_summary_name",
          "degree_programs@degree_summary_description",
          "sections@section_name",
          "sections@section_description",
          "semesters@semester_name",
          "semesters@semester_description",
          "students@first_name",
          "students@middle_name",
          "students@last_name"
        ]
      }
    ]
  },
  {
    "id": 525,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what are the names and id of courses having at most 2 sections ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "question": "What are the names and id of courses having at most 2 sections?",
        "sql": "select courses@course_name , courses@course_id from courses join sections on courses@course_id = sections@course_id group by courses@course_id having count ( * ) <= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "courses",
          "courses@course_name",
          "sections"
        ],
        "partial_match": [
          "transcript_contents@student_course_id",
          "courses@course_id",
          "courses@course_description",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@course_id",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "student_enrolment_courses",
          "student_enrolment_courses@student_course_id",
          "student_enrolment_courses@course_id"
        ]
      }
    ]
  },
  {
    "id": 526,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what are the names and ids of every course with less than 2 sections ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "question": "What are the names and ids of every course with less than 2 sections?",
        "sql": "select courses@course_name , courses@course_id from courses join sections on courses@course_id = sections@course_id group by courses@course_id having count ( * ) <= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "courses",
          "courses@course_name",
          "sections"
        ],
        "partial_match": [
          "transcript_contents@student_course_id",
          "courses@course_id",
          "courses@course_description",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@course_id",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "student_enrolment_courses",
          "student_enrolment_courses@student_course_id",
          "student_enrolment_courses@course_id"
        ]
      }
    ]
  },
  {
    "id": 527,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "list the section_name in reversed lexicographical order .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "List the section_name in reversed lexicographical order.",
        "sql": "select sections@section_name from sections order by sections@section_name desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [],
        "partial_match": [
          "sections"
        ]
      }
    ]
  },
  {
    "id": 528,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what are the names of the sections in reverse alphabetical order ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "sql": "select sections@section_name from sections order by sections@section_name desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "sections"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name"
        ]
      }
    ]
  },
  {
    "id": 529,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the semester which most student registered in ? show both the name and the id .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "sql": "select semesters@semester_name , semesters@semester_id from semesters join student_enrolment on semesters@semester_id = student_enrolment@semester_id group by semesters@semester_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "semesters",
          "students"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "students@date_first_registered",
          "students@other_student_details",
          "student_enrolment",
          "student_enrolment_courses"
        ]
      }
    ]
  },
  {
    "id": 530,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "for each semester , what is the name and id of the one with the most students registered ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "sql": "select semesters@semester_name , semesters@semester_id from semesters join student_enrolment on semesters@semester_id = student_enrolment@semester_id group by semesters@semester_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "semesters",
          "students"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "students@date_first_registered",
          "students@other_student_details",
          "student_enrolment",
          "student_enrolment_courses"
        ]
      }
    ]
  },
  {
    "id": 531,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the description of the department whose name has the substring the computer ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "question": "What is the description of the department whose name has the substring the computer?",
        "sql": "select departments@department_description from departments where departments@department_name like 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "departments",
          "departments@department_name",
          "departments@department_description"
        ],
        "partial_match": [
          "courses@course_name",
          "courses@course_description",
          "departments@department_id",
          "degree_programs@department_id",
          "degree_programs@degree_summary_name",
          "degree_programs@degree_summary_description",
          "sections@section_name",
          "sections@section_description",
          "semesters@semester_name",
          "semesters@semester_description",
          "students@first_name",
          "students@middle_name",
          "students@last_name"
        ]
      }
    ]
  },
  {
    "id": 532,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the department description for the one whose name has the word computer ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "question": "What is the department description for the one whose name has the word computer?",
        "sql": "select departments@department_description from departments where departments@department_name like 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "departments",
          "departments@department_name",
          "departments@department_description"
        ],
        "partial_match": [
          "courses@course_name",
          "courses@course_description",
          "departments@department_id",
          "degree_programs@department_id",
          "degree_programs@degree_summary_name",
          "degree_programs@degree_summary_description",
          "sections@section_name",
          "sections@section_description",
          "semesters@semester_name",
          "semesters@semester_description",
          "students@first_name",
          "students@middle_name",
          "students@last_name"
        ]
      }
    ]
  },
  {
    "id": 533,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "who are enrolled in 2 degree programs in one semester ? list the first name , middle name and last name and the id .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "sql": "select students@first_name , students@middle_name , students@last_name , students@student_id from students join student_enrolment on students@student_id = student_enrolment@student_id group by students@student_id having count ( * ) = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs",
          "degree_programs@degree_program_id",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "student_enrolment@degree_program_id"
        ],
        "partial_match": [
          "degree_programs@degree_summary_description",
          "students@date_first_registered",
          "student_enrolment",
          "student_enrolment@student_enrolment_id",
          "student_enrolment_courses",
          "student_enrolment_courses@student_enrolment_id"
        ]
      }
    ]
  },
  {
    "id": 534,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what are the first , middle , and last names , along with the ids , of all students who enrolled in 2 degree programs in one semester ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "sql": "select students@first_name , students@middle_name , students@last_name , students@student_id from students join student_enrolment on students@student_id = student_enrolment@student_id group by students@student_id having count ( * ) = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "degree_programs",
          "degree_programs@degree_program_id",
          "degree_programs@degree_summary_name",
          "semesters",
          "students",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "student_enrolment",
          "student_enrolment@degree_program_id",
          "student_enrolment_courses"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_description",
          "sections@section_name",
          "semesters@semester_name",
          "students@date_first_registered",
          "students@other_student_details",
          "student_enrolment@student_enrolment_id",
          "student_enrolment_courses@student_enrolment_id"
        ]
      }
    ]
  },
  {
    "id": 535,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "who is enrolled in a bachelor degree program ? list the first name , middle name , last name .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "sql": "select distinct students@first_name , students@middle_name , students@last_name from students join student_enrolment on students@student_id = student_enrolment@student_id join degree_programs on student_enrolment@degree_program_id = degree_programs@degree_program_id where degree_programs@degree_summary_name = 'value'",
        "value_match": [
          "degree_programs@degree_summary_name"
        ],
        "value_alignment": [
          [
            [
              "bachelor",
              "bachelor"
            ]
          ]
        ],
        "exact_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs",
          "degree_programs@degree_program_id",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "student_enrolment@degree_program_id"
        ],
        "partial_match": [
          "degree_programs@degree_summary_description",
          "students@date_first_registered",
          "student_enrolment",
          "student_enrolment@student_enrolment_id",
          "student_enrolment_courses",
          "student_enrolment_courses@student_enrolment_id"
        ]
      }
    ]
  },
  {
    "id": 536,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what are the first , middle , and last names for everybody enrolled in a bachelors program ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "sql": "select distinct students@first_name , students@middle_name , students@last_name from students join student_enrolment on students@student_id = student_enrolment@student_id join degree_programs on student_enrolment@degree_program_id = degree_programs@degree_program_id where degree_programs@degree_summary_name = 'value'",
        "value_match": [
          "degree_programs@degree_summary_name"
        ],
        "value_alignment": [
          [
            [
              "bachelor",
              "bachelor"
            ]
          ]
        ],
        "exact_match": [
          "students@first_name",
          "students@middle_name",
          "students@last_name"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs",
          "degree_programs@degree_program_id",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students@date_first_registered",
          "student_enrolment",
          "student_enrolment@student_enrolment_id",
          "student_enrolment@degree_program_id",
          "student_enrolment_courses",
          "student_enrolment_courses@student_enrolment_id"
        ]
      }
    ]
  },
  {
    "id": 537,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "find the kind of program which most number of students are enrolled in ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "sql": "select degree_programs@degree_summary_name from degree_programs join student_enrolment on degree_programs@degree_program_id = student_enrolment@degree_program_id group by degree_programs@degree_summary_name order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "students",
          "student_enrolment",
          "student_enrolment_courses"
        ],
        "partial_match": [
          "degree_programs",
          "degree_programs@degree_program_id",
          "students@cell_mobile_number",
          "students@other_student_details",
          "student_enrolment@student_enrolment_id",
          "student_enrolment@degree_program_id",
          "student_enrolment_courses@student_enrolment_id"
        ]
      }
    ]
  },
  {
    "id": 538,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the degree summary name that has the most number of students enrolled ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "sql": "select degree_programs@degree_summary_name from degree_programs join student_enrolment on degree_programs@degree_program_id = student_enrolment@degree_program_id group by degree_programs@degree_summary_name order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "degree_programs@degree_summary_name",
          "degree_programs@degree_summary_description",
          "students",
          "student_enrolment",
          "student_enrolment_courses"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs",
          "degree_programs@degree_program_id",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "students@cell_mobile_number",
          "students@other_student_details",
          "student_enrolment@student_enrolment_id",
          "student_enrolment@degree_program_id",
          "student_enrolment_courses@student_enrolment_id"
        ]
      }
    ]
  },
  {
    "id": 539,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "find the program which most number of students are enrolled in . list both the id and the summary .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "sql": "select degree_programs@degree_program_id , degree_programs@degree_summary_name from degree_programs join student_enrolment on degree_programs@degree_program_id = student_enrolment@degree_program_id group by degree_programs@degree_program_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "students",
          "student_enrolment",
          "student_enrolment_courses"
        ],
        "partial_match": [
          "degree_programs",
          "degree_programs@degree_program_id",
          "degree_programs@degree_summary_name",
          "degree_programs@degree_summary_description",
          "students@cell_mobile_number",
          "students@other_student_details",
          "student_enrolment@student_enrolment_id",
          "student_enrolment@degree_program_id",
          "student_enrolment_courses@student_enrolment_id"
        ]
      }
    ]
  },
  {
    "id": 540,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the program id and the summary of the degree that has the most students enrolled ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "sql": "select degree_programs@degree_program_id , degree_programs@degree_summary_name from degree_programs join student_enrolment on degree_programs@degree_program_id = student_enrolment@degree_program_id group by degree_programs@degree_program_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "degree_programs",
          "degree_programs@degree_program_id",
          "degree_programs@degree_summary_name",
          "degree_programs@degree_summary_description",
          "students",
          "student_enrolment",
          "student_enrolment@degree_program_id",
          "student_enrolment_courses"
        ],
        "partial_match": [
          "students@other_student_details",
          "student_enrolment@student_enrolment_id",
          "student_enrolment_courses@student_enrolment_id"
        ]
      }
    ]
  },
  {
    "id": 541,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "which student has enrolled for the most times in any program ? list the id , first name , middle name , last name , the number of enrollments and student id .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "sql": "select students@student_id , students@first_name , students@middle_name , students@last_name , count ( * ) , students@student_id from students join student_enrolment on students@student_id = student_enrolment@student_id group by students@student_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "students@other_student_details",
          "student_enrolment",
          "student_enrolment_courses"
        ],
        "partial_match": [
          "degree_programs",
          "degree_programs@degree_program_id",
          "students@cell_mobile_number",
          "students@date_first_registered",
          "student_enrolment@student_enrolment_id",
          "student_enrolment@degree_program_id",
          "student_enrolment_courses@student_enrolment_id"
        ]
      }
    ]
  },
  {
    "id": 542,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the first , middle , and last name , along with the id and number of enrollments , for the student who enrolled the most in any program ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "sql": "select students@student_id , students@first_name , students@middle_name , students@last_name , count ( * ) , students@student_id from students join student_enrolment on students@student_id = student_enrolment@student_id group by students@student_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "students",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "student_enrolment",
          "student_enrolment_courses"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs",
          "degree_programs@degree_program_id",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students@cell_mobile_number",
          "students@date_first_registered",
          "students@other_student_details",
          "student_enrolment@student_enrolment_id",
          "student_enrolment@degree_program_id",
          "student_enrolment_courses@student_enrolment_id"
        ]
      }
    ]
  },
  {
    "id": 543,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "which semesters do not have any student enrolled ? list the semester name .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "sql": "select semesters@semester_name from semesters where semesters@semester_id not in ( select student_enrolment@semester_id from student_enrolment )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "semesters",
          "students",
          "student_enrolment",
          "student_enrolment_courses"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "students@other_student_details",
          "student_enrolment@student_enrolment_id",
          "student_enrolment_courses@student_enrolment_id"
        ]
      }
    ]
  },
  {
    "id": 544,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the name of the semester with no students enrolled ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "What is the name of the semester with no students enrolled?",
        "sql": "select semesters@semester_name from semesters where semesters@semester_id not in ( select student_enrolment@semester_id from student_enrolment )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "semesters",
          "students",
          "student_enrolment",
          "student_enrolment_courses"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "students@other_student_details",
          "student_enrolment@student_enrolment_id",
          "student_enrolment_courses@student_enrolment_id"
        ]
      }
    ]
  },
  {
    "id": 545,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what are all the course names of the courses which ever have students enrolled in ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "sql": "select distinct courses@course_name from courses join student_enrolment_courses on courses@course_id = student_enrolment_courses@course_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "transcript_contents@student_course_id",
          "courses",
          "courses@course_id",
          "courses@course_name",
          "courses@course_description",
          "sections@course_id",
          "students",
          "student_enrolment",
          "student_enrolment_courses",
          "student_enrolment_courses@student_course_id",
          "student_enrolment_courses@course_id"
        ],
        "partial_match": [
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "students@other_student_details",
          "student_enrolment@student_enrolment_id",
          "student_enrolment_courses@student_enrolment_id"
        ]
      }
    ]
  },
  {
    "id": 546,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what are the names of all courses that have some students enrolled ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "question": "What are the names of all courses that have some students enrolled?",
        "sql": "select distinct courses@course_name from courses join student_enrolment_courses on courses@course_id = student_enrolment_courses@course_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "courses",
          "courses@course_name",
          "students",
          "student_enrolment",
          "student_enrolment_courses"
        ],
        "partial_match": [
          "transcript_contents@student_course_id",
          "courses@course_id",
          "courses@course_description",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@course_id",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "students@other_student_details",
          "student_enrolment@student_enrolment_id",
          "student_enrolment_courses@student_course_id",
          "student_enrolment_courses@course_id",
          "student_enrolment_courses@student_enrolment_id"
        ]
      }
    ]
  },
  {
    "id": 547,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what 's the name of the course with most number of enrollments ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What's the name of the course with most number of enrollments?",
        "sql": "select courses@course_name from courses join student_enrolment_courses on courses@course_id = student_enrolment_courses@course_id group by courses@course_name order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "courses",
          "courses@course_name"
        ],
        "partial_match": [
          "transcript_contents@student_course_id",
          "courses@course_id",
          "courses@course_description",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@course_id",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "students@cell_mobile_number",
          "student_enrolment_courses",
          "student_enrolment_courses@student_course_id",
          "student_enrolment_courses@course_id"
        ]
      }
    ]
  },
  {
    "id": 548,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the name of the course with the most students enrolled ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the course with the most students enrolled?",
        "sql": "select courses@course_name from courses join student_enrolment_courses on courses@course_id = student_enrolment_courses@course_id group by courses@course_name order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "courses",
          "courses@course_name",
          "students",
          "student_enrolment",
          "student_enrolment_courses"
        ],
        "partial_match": [
          "transcript_contents@student_course_id",
          "courses@course_id",
          "courses@course_description",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@course_id",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "students@other_student_details",
          "student_enrolment@student_enrolment_id",
          "student_enrolment_courses@student_course_id",
          "student_enrolment_courses@course_id",
          "student_enrolment_courses@student_enrolment_id"
        ]
      }
    ]
  },
  {
    "id": 549,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "find the last name of the students who currently live in the state of north carolina but have not registered in any degree program .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "sql": "select students@last_name from students join addresses on students@current_address_id = addresses@address_id where addresses@state_province_county = 'value' except select distinct students@last_name from students join student_enrolment on students@student_id = student_enrolment@student_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "degree_programs",
          "degree_programs@degree_program_id",
          "degree_programs@degree_summary_name",
          "students",
          "students@last_name",
          "student_enrolment@degree_program_id"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_description",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@date_first_registered",
          "students@other_student_details",
          "student_enrolment",
          "student_enrolment_courses"
        ]
      }
    ]
  },
  {
    "id": 550,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what are the last name of the students who live in north carolina but have not registered in any degree programs ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "sql": "select students@last_name from students join addresses on students@current_address_id = addresses@address_id where addresses@state_province_county = 'value' except select distinct students@last_name from students join student_enrolment on students@student_id = student_enrolment@student_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "degree_programs",
          "degree_programs@degree_program_id",
          "degree_programs@degree_summary_name",
          "students",
          "students@last_name",
          "student_enrolment@degree_program_id"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_description",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@date_first_registered",
          "students@other_student_details",
          "student_enrolment",
          "student_enrolment_courses"
        ]
      }
    ]
  },
  {
    "id": 551,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "show the date and id of the transcript with at least 2 course results .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "sql": "select transcripts@transcript_date , transcript_contents@transcript_id from transcript_contents join transcripts on transcript_contents@transcript_id = transcripts@transcript_id group by transcript_contents@transcript_id having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "courses",
          "transcripts",
          "transcripts@transcript_date"
        ],
        "partial_match": [
          "transcript_contents",
          "transcript_contents@student_course_id",
          "transcript_contents@transcript_id",
          "courses@course_id",
          "courses@course_name",
          "courses@course_description",
          "sections@course_id",
          "students@date_first_registered",
          "students@date_left",
          "student_enrolment_courses",
          "student_enrolment_courses@student_course_id",
          "student_enrolment_courses@course_id",
          "transcripts@transcript_id"
        ]
      }
    ]
  },
  {
    "id": 552,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the date and id of the transcript with at least 2 courses listed ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "sql": "select transcripts@transcript_date , transcript_contents@transcript_id from transcript_contents join transcripts on transcript_contents@transcript_id = transcripts@transcript_id group by transcript_contents@transcript_id having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "courses",
          "transcripts",
          "transcripts@transcript_date"
        ],
        "partial_match": [
          "transcript_contents",
          "transcript_contents@student_course_id",
          "transcript_contents@transcript_id",
          "courses@course_id",
          "courses@course_name",
          "courses@course_description",
          "sections@course_id",
          "students@date_first_registered",
          "students@date_left",
          "student_enrolment_courses",
          "student_enrolment_courses@student_course_id",
          "student_enrolment_courses@course_id",
          "transcripts@transcript_id"
        ]
      }
    ]
  },
  {
    "id": 553,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the phone number of the man with the first name timmothy and the last name ward ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "sql": "select students@cell_mobile_number from students where students@first_name = 'value' and students@last_name = 'value'",
        "value_match": [
          "students@first_name",
          "students@last_name"
        ],
        "value_alignment": [
          [
            [
              "timmothy",
              "timmothy"
            ]
          ],
          [
            [
              "ward",
              "ward"
            ]
          ]
        ],
        "exact_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name"
        ],
        "partial_match": [
          "students@cell_mobile_number",
          "students@date_first_registered"
        ]
      }
    ]
  },
  {
    "id": 554,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the mobile phone number of the student named timmothy ward ?",
        "db_id": "student_transcripts_tracking",
        "query": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "sql": "select students@cell_mobile_number from students where students@first_name = 'value' and students@last_name = 'value'",
        "value_match": [
          "students@first_name",
          "students@last_name"
        ],
        "value_alignment": [
          [
            [
              "timmothy",
              "timmothy"
            ]
          ],
          [
            [
              "ward",
              "ward"
            ]
          ]
        ],
        "exact_match": [
          "students",
          "students@cell_mobile_number"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "students@other_student_details",
          "student_enrolment",
          "student_enrolment_courses"
        ]
      }
    ]
  },
  {
    "id": 555,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "who is the first student to register ? list the first name , middle name and last name .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "sql": "select students@first_name , students@middle_name , students@last_name from students order by students@date_first_registered asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "students@date_first_registered"
        ],
        "partial_match": [
          "students@other_student_details",
          "student_enrolment",
          "student_enrolment_courses"
        ]
      }
    ]
  },
  {
    "id": 556,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the first , middle , and last name of the first student to register ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "question": "What is the first, middle, and last name of the first student to register?",
        "sql": "select students@first_name , students@middle_name , students@last_name from students order by students@date_first_registered asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "students",
          "students@first_name",
          "students@middle_name",
          "students@last_name",
          "students@date_first_registered"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students@other_student_details",
          "student_enrolment",
          "student_enrolment_courses"
        ]
      }
    ]
  },
  {
    "id": 557,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "who is the earliest graduate of the school ? list the first name , middle name and last name .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "sql": "select students@first_name , students@middle_name , students@last_name from students order by students@date_left asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students@first_name",
          "students@middle_name",
          "students@last_name"
        ],
        "partial_match": [
          "students@date_first_registered"
        ]
      }
    ]
  },
  {
    "id": 558,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the first , middle , and last name of the earliest school graduate ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "sql": "select students@first_name , students@middle_name , students@last_name from students order by students@date_left asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "students@first_name",
          "students@middle_name",
          "students@last_name"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students@date_first_registered"
        ]
      }
    ]
  },
  {
    "id": 559,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "whose permanent address is different from his or her current address ? list his or her first name .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "sql": "select students@first_name from students where students@current_address_id != students@permanent_address_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "addresses",
          "addresses@address_id",
          "addresses@other_address_details",
          "students@current_address_id",
          "students@permanent_address_id",
          "students@first_name"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students@middle_name",
          "students@last_name",
          "students@date_first_registered"
        ]
      }
    ]
  },
  {
    "id": 560,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the first name of the student whose permanent address is different from his or her current one ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "sql": "select students@first_name from students where students@current_address_id != students@permanent_address_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "addresses",
          "students",
          "students@current_address_id",
          "students@permanent_address_id",
          "students@first_name"
        ],
        "partial_match": [
          "addresses@address_id",
          "addresses@other_address_details",
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students@middle_name",
          "students@last_name",
          "students@date_first_registered",
          "students@other_student_details",
          "student_enrolment",
          "student_enrolment_courses"
        ]
      }
    ]
  },
  {
    "id": 561,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "which address holds the most number of students currently ? list the address id and all lines .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "sql": "select addresses@address_id , addresses@line_1 , addresses@line_2 from addresses join students on addresses@address_id = students@current_address_id group by addresses@address_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "addresses",
          "addresses@address_id",
          "addresses@other_address_details",
          "students",
          "students@current_address_id",
          "students@permanent_address_id"
        ],
        "partial_match": [
          "addresses@line_1",
          "addresses@line_2",
          "addresses@line_3",
          "students@cell_mobile_number",
          "students@other_student_details",
          "student_enrolment",
          "student_enrolment_courses"
        ]
      }
    ]
  },
  {
    "id": 562,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the id , line 1 , and line 2 of the address with the most students ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "sql": "select addresses@address_id , addresses@line_1 , addresses@line_2 from addresses join students on addresses@address_id = students@current_address_id group by addresses@address_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "addresses",
          "addresses@line_1",
          "addresses@line_2",
          "addresses@line_3",
          "students"
        ],
        "partial_match": [
          "addresses@address_id",
          "addresses@other_address_details",
          "students@current_address_id",
          "students@permanent_address_id",
          "students@other_student_details",
          "student_enrolment",
          "student_enrolment_courses"
        ]
      }
    ]
  },
  {
    "id": 563,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "on average , when were the transcripts printed ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT avg(transcript_date) FROM Transcripts",
        "question": "On average, when were the transcripts printed?",
        "sql": "select avg ( transcripts@transcript_date ) from transcripts",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "transcripts"
        ],
        "partial_match": [
          "transcript_contents",
          "transcript_contents@transcript_id",
          "transcripts@transcript_id",
          "transcripts@transcript_date"
        ]
      }
    ]
  },
  {
    "id": 564,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the average transcript date ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT avg(transcript_date) FROM Transcripts",
        "question": "What is the average transcript date?",
        "sql": "select avg ( transcripts@transcript_date ) from transcripts",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "transcripts",
          "transcripts@transcript_date"
        ],
        "partial_match": [
          "transcript_contents",
          "transcript_contents@transcript_id",
          "students@date_first_registered",
          "students@date_left",
          "transcripts@transcript_id"
        ]
      }
    ]
  },
  {
    "id": 565,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "when is the first transcript released ? list the date and details .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "When is the first transcript released? List the date and details.",
        "sql": "select transcripts@transcript_date , transcripts@other_details from transcripts order by transcripts@transcript_date asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "students@date_first_registered",
          "transcripts",
          "transcripts@transcript_date"
        ],
        "partial_match": [
          "transcript_contents",
          "transcript_contents@transcript_id",
          "addresses@other_address_details",
          "students@first_name",
          "students@date_left",
          "transcripts@transcript_id"
        ]
      }
    ]
  },
  {
    "id": 566,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the earliest date of a transcript release , and what details can you tell me ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "sql": "select transcripts@transcript_date , transcripts@other_details from transcripts order by transcripts@transcript_date asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "transcripts",
          "transcripts@transcript_date"
        ],
        "partial_match": [
          "transcript_contents",
          "transcript_contents@transcript_id",
          "addresses@other_address_details",
          "students@date_first_registered",
          "students@date_left",
          "transcripts@transcript_id"
        ]
      }
    ]
  },
  {
    "id": 567,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "how many transcripts are released ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) FROM Transcripts",
        "question": "How many transcripts are released?",
        "sql": "select count ( * ) from transcripts",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "transcripts"
        ],
        "partial_match": [
          "transcript_contents",
          "transcript_contents@transcript_id",
          "transcripts@transcript_id",
          "transcripts@transcript_date"
        ]
      }
    ]
  },
  {
    "id": 568,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "how many transcripts are listed ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) FROM Transcripts",
        "question": "How many transcripts are listed?",
        "sql": "select count ( * ) from transcripts",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "transcripts"
        ],
        "partial_match": [
          "transcript_contents",
          "transcript_contents@transcript_id",
          "transcripts@transcript_id",
          "transcripts@transcript_date"
        ]
      }
    ]
  },
  {
    "id": 569,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the last transcript release date ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "question": "What is the last transcript release date?",
        "sql": "select transcripts@transcript_date from transcripts order by transcripts@transcript_date desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "transcripts",
          "transcripts@transcript_date"
        ],
        "partial_match": [
          "transcript_contents",
          "transcript_contents@transcript_id",
          "students@last_name",
          "students@date_first_registered",
          "students@date_left",
          "transcripts@transcript_id"
        ]
      }
    ]
  },
  {
    "id": 570,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "when was the last transcript released ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "question": "When was the last transcript released?",
        "sql": "select transcripts@transcript_date from transcripts order by transcripts@transcript_date desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "transcripts"
        ],
        "partial_match": [
          "transcript_contents",
          "transcript_contents@transcript_id",
          "students@last_name",
          "transcripts@transcript_id",
          "transcripts@transcript_date"
        ]
      }
    ]
  },
  {
    "id": 571,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "how many times at most can a course enrollment result show in different transcripts ? also show the course enrollment id .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "sql": "select count ( * ) , transcript_contents@student_course_id from transcript_contents group by transcript_contents@student_course_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "transcript_contents@student_course_id",
          "courses",
          "courses@course_id",
          "courses@course_name",
          "courses@course_description",
          "sections@course_id",
          "student_enrolment_courses",
          "student_enrolment_courses@student_course_id",
          "student_enrolment_courses@course_id",
          "transcripts"
        ],
        "partial_match": [
          "transcript_contents",
          "transcript_contents@transcript_id",
          "transcripts@transcript_id",
          "transcripts@transcript_date"
        ]
      }
    ]
  },
  {
    "id": 572,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the maximum number of times that a course shows up in different transcripts and what is that course 's enrollment id ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "sql": "select count ( * ) , transcript_contents@student_course_id from transcript_contents group by transcript_contents@student_course_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "transcript_contents@student_course_id",
          "courses",
          "courses@course_id",
          "courses@course_name",
          "courses@course_description",
          "sections@course_id",
          "student_enrolment_courses",
          "student_enrolment_courses@student_course_id",
          "student_enrolment_courses@course_id",
          "transcripts"
        ],
        "partial_match": [
          "transcript_contents",
          "transcript_contents@transcript_id",
          "students@cell_mobile_number",
          "transcripts@transcript_id",
          "transcripts@transcript_date"
        ]
      }
    ]
  },
  {
    "id": 573,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "show the date of the transcript which shows the least number of results , also list the id .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "sql": "select transcripts@transcript_date , transcript_contents@transcript_id from transcript_contents join transcripts on transcript_contents@transcript_id = transcripts@transcript_id group by transcript_contents@transcript_id order by count ( * ) asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "transcripts",
          "transcripts@transcript_date"
        ],
        "partial_match": [
          "transcript_contents",
          "transcript_contents@transcript_id",
          "students@cell_mobile_number",
          "students@date_first_registered",
          "students@date_left",
          "transcripts@transcript_id"
        ]
      }
    ]
  },
  {
    "id": 574,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the date and id of the transcript with the least number of results ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the date and id of the transcript with the least number of results?",
        "sql": "select transcripts@transcript_date , transcript_contents@transcript_id from transcript_contents join transcripts on transcript_contents@transcript_id = transcripts@transcript_id group by transcript_contents@transcript_id order by count ( * ) asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "transcripts",
          "transcripts@transcript_date"
        ],
        "partial_match": [
          "transcript_contents",
          "transcript_contents@transcript_id",
          "students@cell_mobile_number",
          "students@date_first_registered",
          "students@date_left",
          "transcripts@transcript_id"
        ]
      }
    ]
  },
  {
    "id": 575,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "find the semester when both master students and bachelor students got enrolled in .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "sql": "select distinct student_enrolment@semester_id from degree_programs join student_enrolment on degree_programs@degree_program_id = student_enrolment@degree_program_id where degree_programs@degree_summary_name = 'value' intersect select distinct student_enrolment@semester_id from degree_programs join student_enrolment on degree_programs@degree_program_id = student_enrolment@degree_program_id where degree_programs@degree_summary_name = 'value'",
        "value_match": [
          "degree_programs@degree_summary_name"
        ],
        "value_alignment": [
          [
            [
              "master",
              "master"
            ]
          ],
          [
            [
              "bachelor",
              "bachelor"
            ]
          ]
        ],
        "exact_match": [
          "semesters",
          "students",
          "students@other_student_details",
          "student_enrolment",
          "student_enrolment_courses"
        ],
        "partial_match": [
          "student_enrolment@student_enrolment_id",
          "student_enrolment_courses@student_enrolment_id"
        ]
      }
    ]
  },
  {
    "id": 576,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the id of the semester that had both masters and bachelors students enrolled ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "sql": "select distinct student_enrolment@semester_id from degree_programs join student_enrolment on degree_programs@degree_program_id = student_enrolment@degree_program_id where degree_programs@degree_summary_name = 'value' intersect select distinct student_enrolment@semester_id from degree_programs join student_enrolment on degree_programs@degree_program_id = student_enrolment@degree_program_id where degree_programs@degree_summary_name = 'value'",
        "value_match": [
          "degree_programs@degree_summary_name"
        ],
        "value_alignment": [
          [
            [
              "master",
              "master"
            ]
          ],
          [
            [
              "bachelor",
              "bachelor"
            ]
          ]
        ],
        "exact_match": [
          "semesters",
          "students",
          "student_enrolment",
          "student_enrolment_courses"
        ],
        "partial_match": [
          "students@other_student_details",
          "student_enrolment@student_enrolment_id",
          "student_enrolment_courses@student_enrolment_id"
        ]
      }
    ]
  },
  {
    "id": 577,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "how many different addresses do the students currently live ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(DISTINCT current_address_id) FROM Students",
        "question": "How many different addresses do the students currently live?",
        "sql": "select count ( distinct students@current_address_id ) from students",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "addresses",
          "students"
        ],
        "partial_match": [
          "addresses@address_id",
          "addresses@other_address_details",
          "students@current_address_id",
          "students@permanent_address_id",
          "students@other_student_details",
          "student_enrolment",
          "student_enrolment_courses"
        ]
      }
    ]
  },
  {
    "id": 578,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what are the different addresses that have students living there ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(DISTINCT current_address_id) FROM Students",
        "question": "What are the different addresses that have students living there?",
        "sql": "select count ( distinct students@current_address_id ) from students",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "addresses",
          "students"
        ],
        "partial_match": [
          "addresses@address_id",
          "addresses@other_address_details",
          "students@current_address_id",
          "students@permanent_address_id",
          "students@other_student_details",
          "student_enrolment",
          "student_enrolment_courses"
        ]
      }
    ]
  },
  {
    "id": 579,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "list all the student details in reversed lexicographical order .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "question": "List all the student details in reversed lexicographical order.",
        "sql": "select students@other_student_details from students order by students@other_student_details desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "students"
        ],
        "partial_match": [
          "addresses@other_address_details",
          "students@other_student_details",
          "student_enrolment",
          "student_enrolment_courses"
        ]
      }
    ]
  },
  {
    "id": 580,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what other details can you tell me about students in reverse alphabetical order ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "sql": "select students@other_student_details from students order by students@other_student_details desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "students"
        ],
        "partial_match": [
          "addresses@other_address_details",
          "students@other_student_details",
          "student_enrolment",
          "student_enrolment_courses"
        ]
      }
    ]
  },
  {
    "id": 581,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "describe the section h .",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "question": "Describe the section h.",
        "sql": "select sections@section_description from sections where sections@section_name = 'value'",
        "value_match": [
          "sections@section_name"
        ],
        "value_alignment": [
          [
            [
              "h",
              "h"
            ]
          ]
        ],
        "exact_match": [
          "sections"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 582,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what is the description for the section named h ?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "question": "What is the description for the section named h?",
        "sql": "select sections@section_description from sections where sections@section_name = 'value'",
        "value_match": [
          "sections@section_name"
        ],
        "value_alignment": [
          [
            [
              "h",
              "h"
            ]
          ]
        ],
        "exact_match": [
          "sections"
        ],
        "partial_match": [
          "courses@course_name",
          "courses@course_description",
          "departments@department_name",
          "departments@department_description",
          "degree_programs@degree_summary_name",
          "degree_programs@degree_summary_description",
          "sections@section_name",
          "sections@section_description",
          "semesters@semester_name",
          "semesters@semester_description",
          "students@first_name",
          "students@middle_name",
          "students@last_name"
        ]
      }
    ]
  },
  {
    "id": 583,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "find the first name of the students who permanently live in the country haiti or have the cell phone number 09700166582 .",
        "db_id": "student_transcripts_tracking",
        "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "sql": "select students@first_name from students join addresses on students@permanent_address_id = addresses@address_id where addresses@country = 'value' or students@cell_mobile_number = 'value'",
        "value_match": [
          "students@cell_mobile_number",
          "addresses@country"
        ],
        "value_alignment": [
          [
            [
              "haiti",
              "haiti"
            ]
          ],
          [
            [
              "09700166582",
              "09700166582"
            ]
          ]
        ],
        "exact_match": [
          "addresses@country",
          "students",
          "students@first_name",
          "students@cell_mobile_number"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students@middle_name",
          "students@last_name",
          "students@date_first_registered",
          "students@other_student_details",
          "student_enrolment",
          "student_enrolment_courses"
        ]
      }
    ]
  },
  {
    "id": 584,
    "database_id": "student_transcripts_tracking",
    "interaction": [
      {
        "utterance": "what are the first names of the students who live in haiti permanently or have the cell phone number 09700166582 ?",
        "db_id": "student_transcripts_tracking",
        "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "sql": "select students@first_name from students join addresses on students@permanent_address_id = addresses@address_id where addresses@country = 'value' or students@cell_mobile_number = 'value'",
        "value_match": [
          "students@cell_mobile_number",
          "addresses@country"
        ],
        "value_alignment": [
          [
            [
              "haiti",
              "haiti"
            ]
          ],
          [
            [
              "09700166582",
              "09700166582"
            ]
          ]
        ],
        "exact_match": [
          "students",
          "students@first_name",
          "students@cell_mobile_number"
        ],
        "partial_match": [
          "courses@course_name",
          "departments@department_name",
          "degree_programs@degree_summary_name",
          "sections@section_name",
          "semesters@semester_name",
          "students@middle_name",
          "students@last_name",
          "students@date_first_registered",
          "students@other_student_details",
          "student_enrolment",
          "student_enrolment_courses"
        ]
      }
    ]
  },
  {
    "id": 585,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "list the title of all cartoons in alphabetical order .",
        "db_id": "tvshow",
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "List the title of all cartoons in alphabetical order.",
        "sql": "select cartoon@title from cartoon order by cartoon@title",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon",
          "cartoon@title"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 586,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what are the titles of the cartoons sorted alphabetically ?",
        "db_id": "tvshow",
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "sql": "select cartoon@title from cartoon order by cartoon@title",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon",
          "cartoon@title"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 587,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "list all cartoon directed by `` ben jones '' .",
        "db_id": "tvshow",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "sql": "select cartoon@title from cartoon where cartoon@directed_by = 'value'",
        "value_match": [
          "cartoon@directed_by"
        ],
        "value_alignment": [
          [
            [
              "ben_jones",
              "ben_jones"
            ]
          ]
        ],
        "exact_match": [
          "cartoon"
        ],
        "partial_match": [
          "cartoon@directed_by"
        ]
      }
    ]
  },
  {
    "id": 588,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what are the names of all cartoons directed by ben jones ?",
        "db_id": "tvshow",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "sql": "select cartoon@title from cartoon where cartoon@directed_by = 'value'",
        "value_match": [
          "cartoon@directed_by"
        ],
        "value_alignment": [
          [
            [
              "ben_jones",
              "ben_jones"
            ]
          ]
        ],
        "exact_match": [
          "cartoon"
        ],
        "partial_match": [
          "cartoon@directed_by",
          "tv_channel@series_name"
        ]
      }
    ]
  },
  {
    "id": 589,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "how many cartoons were written by `` joseph kuhr '' ?",
        "db_id": "tvshow",
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "sql": "select count ( * ) from cartoon where cartoon@written_by = 'value'",
        "value_match": [
          "cartoon@written_by"
        ],
        "value_alignment": [
          [
            [
              "joseph_kuhr",
              "joseph_kuhr"
            ]
          ]
        ],
        "exact_match": [
          "cartoon"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 590,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is the number of cartoones written by joseph kuhr ?",
        "db_id": "tvshow",
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "sql": "select count ( * ) from cartoon where cartoon@written_by = 'value'",
        "value_match": [
          "cartoon@written_by"
        ],
        "value_alignment": [
          [
            [
              "joseph_kuhr",
              "joseph_kuhr"
            ]
          ]
        ],
        "exact_match": [],
        "partial_match": [
          "cartoon"
        ]
      }
    ]
  },
  {
    "id": 591,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "list all cartoon titles and their directors ordered by their air date",
        "db_id": "tvshow",
        "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "question": "list all cartoon titles and their directors ordered by their air date",
        "sql": "select cartoon@title , cartoon@directed_by from cartoon order by cartoon@original_air_date",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon",
          "cartoon@title"
        ],
        "partial_match": [
          "cartoon@original_air_date",
          "tv_series@air_date"
        ]
      }
    ]
  },
  {
    "id": 592,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is the name and directors of all the cartoons that are ordered by air date ?",
        "db_id": "tvshow",
        "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "sql": "select cartoon@title , cartoon@directed_by from cartoon order by cartoon@original_air_date",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon"
        ],
        "partial_match": [
          "cartoon@original_air_date",
          "tv_channel@series_name",
          "tv_series@air_date"
        ]
      }
    ]
  },
  {
    "id": 593,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "list the title of all cartoon directed by `` ben jones '' or `` brandon vietti '' .",
        "db_id": "tvshow",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "sql": "select cartoon@title from cartoon where cartoon@directed_by = 'value' or cartoon@directed_by = 'value'",
        "value_match": [
          "cartoon@directed_by"
        ],
        "value_alignment": [
          [
            [
              "ben_jones",
              "ben_jones"
            ]
          ],
          [
            [
              "brandon_vietti",
              "brandon_vietti"
            ]
          ]
        ],
        "exact_match": [
          "cartoon",
          "cartoon@title"
        ],
        "partial_match": [
          "cartoon@directed_by"
        ]
      }
    ]
  },
  {
    "id": 594,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what are the titles of all cartoons directed by ben jones or brandon vietti ?",
        "db_id": "tvshow",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "sql": "select cartoon@title from cartoon where cartoon@directed_by = 'value' or cartoon@directed_by = 'value'",
        "value_match": [
          "cartoon@directed_by"
        ],
        "value_alignment": [
          [
            [
              "ben_jones",
              "ben_jones"
            ]
          ],
          [
            [
              "brandon_vietti",
              "brandon_vietti"
            ]
          ]
        ],
        "exact_match": [
          "cartoon",
          "cartoon@title"
        ],
        "partial_match": [
          "cartoon@directed_by"
        ]
      }
    ]
  },
  {
    "id": 595,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "which country has the most of tv channels ? list the country and number of tv channels it has .",
        "db_id": "tvshow",
        "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "sql": "select tv_channel@country , count ( * ) from tv_channel group by tv_channel@country order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon@channel",
          "tv_channel",
          "tv_channel@country",
          "tv_series@channel"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 596,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is the country with the most number of tv channels and how many does it have ?",
        "db_id": "tvshow",
        "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "sql": "select tv_channel@country , count ( * ) from tv_channel group by tv_channel@country order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon@channel",
          "tv_channel@country",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel"
        ]
      }
    ]
  },
  {
    "id": 597,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "list the number of different series names and contents in the tv channel table .",
        "db_id": "tvshow",
        "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "question": "List the number of different series names and contents in the TV Channel table.",
        "sql": "select count ( distinct tv_channel@series_name ) , count ( distinct tv_channel@content ) from tv_channel",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon@channel",
          "tv_channel@content",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel",
          "tv_channel@series_name"
        ]
      }
    ]
  },
  {
    "id": 598,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "how many different series and contents are listed in the tv channel table ?",
        "db_id": "tvshow",
        "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "question": "How many different series and contents are listed in the TV Channel table?",
        "sql": "select count ( distinct tv_channel@series_name ) , count ( distinct tv_channel@content ) from tv_channel",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon@channel",
          "tv_channel@content",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel"
        ]
      }
    ]
  },
  {
    "id": 599,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is the content of tv channel with serial name `` sky radio '' ?",
        "db_id": "tvshow",
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "sql": "select tv_channel@content from tv_channel where tv_channel@series_name = 'value'",
        "value_match": [
          "tv_channel@series_name"
        ],
        "value_alignment": [
          [
            [
              "sky_radio",
              "sky_radio"
            ]
          ]
        ],
        "exact_match": [
          "cartoon@channel",
          "tv_channel@content",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel",
          "tv_channel@series_name"
        ]
      }
    ]
  },
  {
    "id": 600,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is the content of the series sky radio ?",
        "db_id": "tvshow",
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the content of the series Sky Radio?",
        "sql": "select tv_channel@content from tv_channel where tv_channel@series_name = 'value'",
        "value_match": [
          "tv_channel@series_name"
        ],
        "value_alignment": [
          [
            [
              "sky_radio",
              "sky_radio"
            ]
          ]
        ],
        "exact_match": [
          "tv_channel@content"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 601,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is the package option of tv channel with serial name `` sky radio '' ?",
        "db_id": "tvshow",
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "sql": "select tv_channel@package_option from tv_channel where tv_channel@series_name = 'value'",
        "value_match": [
          "tv_channel@package_option",
          "tv_channel@series_name"
        ],
        "value_alignment": [
          [
            [
              "sky_radio",
              "sky_radio"
            ]
          ],
          [
            [
              "option",
              "option"
            ]
          ]
        ],
        "exact_match": [
          "cartoon@channel",
          "tv_channel@package_option",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel",
          "tv_channel@series_name"
        ]
      }
    ]
  },
  {
    "id": 602,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what are the package options of the tv channels whose series names are sky radio ?",
        "db_id": "tvshow",
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "sql": "select tv_channel@package_option from tv_channel where tv_channel@series_name = 'value'",
        "value_match": [
          "tv_channel@package_option",
          "tv_channel@series_name"
        ],
        "value_alignment": [
          [
            [
              "sky_radio",
              "sky_radio"
            ]
          ],
          [
            [
              "option",
              "option"
            ]
          ]
        ],
        "exact_match": [
          "cartoon@channel",
          "tv_channel@package_option",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel",
          "tv_channel@series_name"
        ]
      }
    ]
  },
  {
    "id": 603,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "how many tv channel using language english ?",
        "db_id": "tvshow",
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "question": "How many TV Channel using language English?",
        "sql": "select count ( * ) from tv_channel where tv_channel@language = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon@channel",
          "tv_channel@language",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel"
        ]
      }
    ]
  },
  {
    "id": 604,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "how many tv channels use the english language ?",
        "db_id": "tvshow",
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "question": "How many TV Channels use the English language?",
        "sql": "select count ( * ) from tv_channel where tv_channel@language = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon@channel",
          "tv_channel@language",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel"
        ]
      }
    ]
  },
  {
    "id": 605,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "list the language used least number of tv channel . list language and number of tv channel .",
        "db_id": "tvshow",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "sql": "select tv_channel@language , count ( * ) from tv_channel group by tv_channel@language order by count ( * ) asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon@channel",
          "tv_channel",
          "tv_channel@language",
          "tv_series@channel"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 606,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what are the languages used by the least number of tv channels and how many channels use it ?",
        "db_id": "tvshow",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "sql": "select tv_channel@language , count ( * ) from tv_channel group by tv_channel@language order by count ( * ) asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon@channel",
          "tv_channel",
          "tv_channel@language",
          "tv_series@channel"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 607,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "list each language and the number of tv channels using it .",
        "db_id": "tvshow",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "List each language and the number of TV Channels using it.",
        "sql": "select tv_channel@language , count ( * ) from tv_channel group by tv_channel@language",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon@channel",
          "tv_channel@language",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel"
        ]
      }
    ]
  },
  {
    "id": 608,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "for each language , list the number of tv channels that use it .",
        "db_id": "tvshow",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "For each language, list the number of TV Channels that use it.",
        "sql": "select tv_channel@language , count ( * ) from tv_channel group by tv_channel@language",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon@channel",
          "tv_channel@language",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel"
        ]
      }
    ]
  },
  {
    "id": 609,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is the tv channel that shows the cartoon `` the rise of the blue beetle ! '' ? list the tv channel 's series name .",
        "db_id": "tvshow",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "sql": "select tv_channel@series_name from tv_channel join cartoon on tv_channel@id = cartoon@channel where cartoon@title = 'value'",
        "value_match": [
          "cartoon@title"
        ],
        "value_alignment": [
          [
            [
              "the_rise_of_the_blue_beetle",
              "the_rise_of_the_blue_beetle"
            ]
          ]
        ],
        "exact_match": [
          "cartoon",
          "cartoon@channel",
          "tv_channel",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel@series_name"
        ]
      }
    ]
  },
  {
    "id": 610,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is the series name of the tv channel that shows the cartoon `` the rise of the blue beetle '' ?",
        "db_id": "tvshow",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "sql": "select tv_channel@series_name from tv_channel join cartoon on tv_channel@id = cartoon@channel where cartoon@title = 'value'",
        "value_match": [
          "cartoon@title"
        ],
        "value_alignment": [
          [
            [
              "the_rise_of_the_blue_beetle",
              "the_rise_of_the_blue_beetle"
            ]
          ]
        ],
        "exact_match": [
          "cartoon",
          "cartoon@channel",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel",
          "tv_channel@series_name"
        ]
      }
    ]
  },
  {
    "id": 611,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "list the title of all cartoons showed on tv channel with series name `` sky radio '' .",
        "db_id": "tvshow",
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "sql": "select cartoon@title from tv_channel join cartoon on tv_channel@id = cartoon@channel where tv_channel@series_name = 'value'",
        "value_match": [
          "tv_channel@series_name"
        ],
        "value_alignment": [
          [
            [
              "sky_radio",
              "sky_radio"
            ]
          ]
        ],
        "exact_match": [
          "cartoon",
          "cartoon@title",
          "cartoon@channel",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel",
          "tv_channel@series_name"
        ]
      }
    ]
  },
  {
    "id": 612,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is the title of all the cartools that are on the tv channel with the series name `` sky radio '' ?",
        "db_id": "tvshow",
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "sql": "select cartoon@title from tv_channel join cartoon on tv_channel@id = cartoon@channel where tv_channel@series_name = 'value'",
        "value_match": [
          "tv_channel@series_name"
        ],
        "value_alignment": [
          [
            [
              "sky_radio",
              "sky_radio"
            ]
          ]
        ],
        "exact_match": [
          "cartoon@title",
          "cartoon@channel",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel",
          "tv_channel@series_name"
        ]
      }
    ]
  },
  {
    "id": 613,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "list the episode of all tv series sorted by rating .",
        "db_id": "tvshow",
        "query": "SELECT Episode FROM TV_series ORDER BY rating",
        "question": "List the Episode of all TV series sorted by rating.",
        "sql": "select tv_series@episode from tv_series order by tv_series@rating",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "tv_series@episode",
          "tv_series@rating"
        ],
        "partial_match": [
          "tv_series@18_49_rating_share"
        ]
      }
    ]
  },
  {
    "id": 614,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what are all of the episodes ordered by ratings ?",
        "db_id": "tvshow",
        "query": "SELECT Episode FROM TV_series ORDER BY rating",
        "question": "What are all of the episodes ordered by ratings?",
        "sql": "select tv_series@episode from tv_series order by tv_series@rating",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "tv_series@episode",
          "tv_series@rating"
        ],
        "partial_match": [
          "tv_series@18_49_rating_share"
        ]
      }
    ]
  },
  {
    "id": 615,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "list top 3 highest rating tv series . list the tv series 's episode and rating .",
        "db_id": "tvshow",
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "sql": "select tv_series@episode , tv_series@rating from tv_series order by tv_series@rating desc limit 3",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "tv_series@episode",
          "tv_series@rating",
          "tv_series@18_49_rating_share"
        ],
        "partial_match": [
          "tv_channel@hight_definition_tv"
        ]
      }
    ]
  },
  {
    "id": 616,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what are 3 most highly rated episodes in the tv series table and what were those ratings ?",
        "db_id": "tvshow",
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "sql": "select tv_series@episode , tv_series@rating from tv_series order by tv_series@rating desc limit 3",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "tv_series@episode",
          "tv_series@rating"
        ],
        "partial_match": [
          "tv_series@18_49_rating_share"
        ]
      }
    ]
  },
  {
    "id": 617,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is minimum and maximum share of tv series ?",
        "db_id": "tvshow",
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "question": "What is minimum and maximum share of TV series?",
        "sql": "select max ( tv_series@share ) , min ( tv_series@share ) from tv_series",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [],
        "partial_match": [
          "tv_series@share",
          "tv_series@18_49_rating_share"
        ]
      }
    ]
  },
  {
    "id": 618,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is the maximum and minimum share for the tv series ?",
        "db_id": "tvshow",
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "question": "What is the maximum and minimum share for the TV series?",
        "sql": "select max ( tv_series@share ) , min ( tv_series@share ) from tv_series",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [],
        "partial_match": [
          "tv_series@share",
          "tv_series@18_49_rating_share"
        ]
      }
    ]
  },
  {
    "id": 619,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is the air date of tv series with episode `` a love of a lifetime '' ?",
        "db_id": "tvshow",
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "sql": "select tv_series@air_date from tv_series where tv_series@episode = 'value'",
        "value_match": [
          "tv_series@episode"
        ],
        "value_alignment": [
          [
            [
              "a_love_of_a_lifetime",
              "a_love_of_a_lifetime"
            ]
          ]
        ],
        "exact_match": [
          "tv_series@episode"
        ],
        "partial_match": [
          "cartoon@original_air_date",
          "tv_series@air_date"
        ]
      }
    ]
  },
  {
    "id": 620,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "when did the episode `` a love of a lifetime '' air ?",
        "db_id": "tvshow",
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "sql": "select tv_series@air_date from tv_series where tv_series@episode = 'value'",
        "value_match": [
          "tv_series@episode"
        ],
        "value_alignment": [
          [
            [
              "a_love_of_a_lifetime",
              "a_love_of_a_lifetime"
            ]
          ]
        ],
        "exact_match": [
          "tv_series@episode"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 621,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is weekly rank of tv series with episode `` a love of a lifetime '' ?",
        "db_id": "tvshow",
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "sql": "select tv_series@weekly_rank from tv_series where tv_series@episode = 'value'",
        "value_match": [
          "tv_series@episode"
        ],
        "value_alignment": [
          [
            [
              "a_love_of_a_lifetime",
              "a_love_of_a_lifetime"
            ]
          ]
        ],
        "exact_match": [
          "tv_series@episode",
          "tv_series@weekly_rank"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 622,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is the weekly rank for the episode `` a love of a lifetime '' ?",
        "db_id": "tvshow",
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "sql": "select tv_series@weekly_rank from tv_series where tv_series@episode = 'value'",
        "value_match": [
          "tv_series@episode"
        ],
        "value_alignment": [
          [
            [
              "a_love_of_a_lifetime",
              "a_love_of_a_lifetime"
            ]
          ]
        ],
        "exact_match": [
          "tv_series@episode",
          "tv_series@weekly_rank"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 623,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is the tv channel of tv series with episode `` a love of a lifetime '' ? list the tv channel 's series name .",
        "db_id": "tvshow",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "sql": "select tv_channel@series_name from tv_channel join tv_series on tv_channel@id = tv_series@channel where tv_series@episode = 'value'",
        "value_match": [
          "tv_series@episode"
        ],
        "value_alignment": [
          [
            [
              "a_love_of_a_lifetime",
              "a_love_of_a_lifetime"
            ]
          ]
        ],
        "exact_match": [
          "cartoon@channel",
          "tv_channel",
          "tv_series@episode",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel@series_name"
        ]
      }
    ]
  },
  {
    "id": 624,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is the name of the series that has the episode `` a love of a lifetime '' ?",
        "db_id": "tvshow",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "sql": "select tv_channel@series_name from tv_channel join tv_series on tv_channel@id = tv_series@channel where tv_series@episode = 'value'",
        "value_match": [
          "tv_series@episode"
        ],
        "value_alignment": [
          [
            [
              "a_love_of_a_lifetime",
              "a_love_of_a_lifetime"
            ]
          ]
        ],
        "exact_match": [
          "tv_series@episode"
        ],
        "partial_match": [
          "tv_channel@series_name"
        ]
      }
    ]
  },
  {
    "id": 625,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "list the episode of all tv series showed on tv channel with series name `` sky radio '' .",
        "db_id": "tvshow",
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "sql": "select tv_series@episode from tv_channel join tv_series on tv_channel@id = tv_series@channel where tv_channel@series_name = 'value'",
        "value_match": [
          "tv_channel@series_name"
        ],
        "value_alignment": [
          [
            [
              "sky_radio",
              "sky_radio"
            ]
          ]
        ],
        "exact_match": [
          "cartoon@channel",
          "tv_series@episode",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel",
          "tv_channel@series_name"
        ]
      }
    ]
  },
  {
    "id": 626,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is the episode for the tv series named `` sky radio '' ?",
        "db_id": "tvshow",
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "sql": "select tv_series@episode from tv_channel join tv_series on tv_channel@id = tv_series@channel where tv_channel@series_name = 'value'",
        "value_match": [
          "tv_channel@series_name"
        ],
        "value_alignment": [
          [
            [
              "sky_radio",
              "sky_radio"
            ]
          ]
        ],
        "exact_match": [
          "tv_series@episode"
        ],
        "partial_match": [
          "tv_channel@series_name"
        ]
      }
    ]
  },
  {
    "id": 627,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "find the number of cartoons directed by each of the listed directors .",
        "db_id": "tvshow",
        "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "sql": "select count ( * ) , cartoon@directed_by from cartoon group by cartoon@directed_by",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon"
        ],
        "partial_match": [
          "cartoon@directed_by"
        ]
      }
    ]
  },
  {
    "id": 628,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "how many cartoons did each director create ?",
        "db_id": "tvshow",
        "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "How many cartoons did each director create?",
        "sql": "select count ( * ) , cartoon@directed_by from cartoon group by cartoon@directed_by",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 629,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "find the production code and channel of the most recently aired cartoon .",
        "db_id": "tvshow",
        "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "sql": "select cartoon@production_code , cartoon@channel from cartoon order by cartoon@original_air_date desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon",
          "cartoon@production_code",
          "cartoon@channel",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel"
        ]
      }
    ]
  },
  {
    "id": 630,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is the produdction code and channel of the most recent cartoon ?",
        "db_id": "tvshow",
        "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "sql": "select cartoon@production_code , cartoon@channel from cartoon order by cartoon@original_air_date desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon",
          "cartoon@channel",
          "tv_series@channel"
        ],
        "partial_match": [
          "cartoon@production_code",
          "tv_channel"
        ]
      }
    ]
  },
  {
    "id": 631,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "find the package choice and series name of the tv channel that has high definition tv .",
        "db_id": "tvshow",
        "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "sql": "select tv_channel@package_option , tv_channel@series_name from tv_channel where tv_channel@hight_definition_tv = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon@channel",
          "tv_channel@hight_definition_tv",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel",
          "tv_channel@series_name",
          "tv_channel@package_option"
        ]
      }
    ]
  },
  {
    "id": 632,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what are the package options and the name of the series for the tv channel that supports high definition tv ?",
        "db_id": "tvshow",
        "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "sql": "select tv_channel@package_option , tv_channel@series_name from tv_channel where tv_channel@hight_definition_tv = 'value'",
        "value_match": [
          "tv_channel@package_option"
        ],
        "value_alignment": [
          [
            [
              "option",
              "option"
            ]
          ]
        ],
        "exact_match": [
          "cartoon@channel",
          "tv_channel@hight_definition_tv",
          "tv_channel@package_option",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel",
          "tv_channel@series_name"
        ]
      }
    ]
  },
  {
    "id": 633,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "which countries ' tv channels are playing some cartoon written by todd casey ?",
        "db_id": "tvshow",
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "sql": "select tv_channel@country from tv_channel join cartoon on tv_channel@id = cartoon@channel where cartoon@written_by = 'value'",
        "value_match": [
          "cartoon@written_by"
        ],
        "value_alignment": [
          [
            [
              "todd_casey",
              "todd_casey"
            ]
          ]
        ],
        "exact_match": [
          "cartoon",
          "cartoon@channel",
          "tv_channel@country",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel"
        ]
      }
    ]
  },
  {
    "id": 634,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what are the countries that have cartoons on tv that were written by todd casey ?",
        "db_id": "tvshow",
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "sql": "select tv_channel@country from tv_channel join cartoon on tv_channel@id = cartoon@channel where cartoon@written_by = 'value'",
        "value_match": [
          "cartoon@written_by"
        ],
        "value_alignment": [
          [
            [
              "todd_casey",
              "todd_casey"
            ]
          ]
        ],
        "exact_match": [
          "cartoon",
          "tv_channel@country"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 635,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "which countries ' tv channels are not playing any cartoon written by todd casey ?",
        "db_id": "tvshow",
        "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "sql": "select tv_channel@country from tv_channel except select tv_channel@country from tv_channel join cartoon on tv_channel@id = cartoon@channel where cartoon@written_by = 'value'",
        "value_match": [
          "cartoon@written_by"
        ],
        "value_alignment": [
          [
            [
              "todd_casey",
              "todd_casey"
            ]
          ]
        ],
        "exact_match": [
          "cartoon",
          "cartoon@channel",
          "tv_channel@country",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel"
        ]
      }
    ]
  },
  {
    "id": 636,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what are the countries that are not playing cartoons written by todd casey ?",
        "db_id": "tvshow",
        "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "sql": "select tv_channel@country from tv_channel except select tv_channel@country from tv_channel join cartoon on tv_channel@id = cartoon@channel where cartoon@written_by = 'value'",
        "value_match": [
          "cartoon@written_by"
        ],
        "value_alignment": [
          [
            [
              "todd_casey",
              "todd_casey"
            ]
          ]
        ],
        "exact_match": [
          "cartoon",
          "tv_channel@country"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 637,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "find the series name and country of the tv channel that is playing some cartoons directed by ben jones and michael chang ?",
        "db_id": "tvshow",
        "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "sql": "select tv_channel@series_name , tv_channel@country from tv_channel join cartoon on tv_channel@id = cartoon@channel where cartoon@directed_by = 'value' intersect select tv_channel@series_name , tv_channel@country from tv_channel join cartoon on tv_channel@id = cartoon@channel where cartoon@directed_by = 'value'",
        "value_match": [
          "cartoon@directed_by"
        ],
        "value_alignment": [
          [
            [
              "ben_jones",
              "ben_jones"
            ]
          ],
          [
            [
              "michael_chang",
              "michael_chang"
            ]
          ]
        ],
        "exact_match": [
          "cartoon",
          "cartoon@channel",
          "tv_channel@country",
          "tv_series@channel"
        ],
        "partial_match": [
          "cartoon@directed_by",
          "tv_channel",
          "tv_channel@series_name"
        ]
      }
    ]
  },
  {
    "id": 638,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is the series name and country of all tv channels that are playing cartoons directed by ben jones and cartoons directed by michael chang ?",
        "db_id": "tvshow",
        "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "sql": "select tv_channel@series_name , tv_channel@country from tv_channel join cartoon on tv_channel@id = cartoon@channel where cartoon@directed_by = 'value' intersect select tv_channel@series_name , tv_channel@country from tv_channel join cartoon on tv_channel@id = cartoon@channel where cartoon@directed_by = 'value'",
        "value_match": [
          "cartoon@directed_by"
        ],
        "value_alignment": [
          [
            [
              "ben_jones",
              "ben_jones"
            ]
          ],
          [
            [
              "michael_chang",
              "michael_chang"
            ]
          ]
        ],
        "exact_match": [
          "cartoon",
          "cartoon@directed_by",
          "cartoon@channel",
          "tv_channel@country",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel",
          "tv_channel@series_name"
        ]
      }
    ]
  },
  {
    "id": 639,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "find the pixel aspect ratio and nation of the tv channels that do not use english .",
        "db_id": "tvshow",
        "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "sql": "select tv_channel@pixel_aspect_ratio_par , tv_channel@country from tv_channel where tv_channel@language != 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon@channel",
          "tv_channel@pixel_aspect_ratio_par",
          "tv_series@channel"
        ],
        "partial_match": [
          "tv_channel"
        ]
      }
    ]
  },
  {
    "id": 640,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what is the pixel aspect ratio and country of origin for all tv channels that do not use english ?",
        "db_id": "tvshow",
        "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "sql": "select tv_channel@pixel_aspect_ratio_par , tv_channel@country from tv_channel where tv_channel@language != 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon@channel",
          "tv_channel@country",
          "tv_channel@pixel_aspect_ratio_par",
          "tv_series@channel"
        ],
        "partial_match": [
          "cartoon@original_air_date",
          "tv_channel"
        ]
      }
    ]
  },
  {
    "id": 641,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "find id of the tv channels that from the countries where have more than two tv channels .",
        "db_id": "tvshow",
        "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "sql": "select tv_channel@id from tv_channel group by tv_channel@country having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon@channel",
          "tv_channel",
          "tv_channel@country",
          "tv_series@channel"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 642,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what are the ids of all tv channels that have more than 2 tv channels ?",
        "db_id": "tvshow",
        "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "sql": "select tv_channel@id from tv_channel group by tv_channel@country having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "cartoon@channel",
          "tv_channel",
          "tv_series@channel"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 643,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "find the id of tv channels that do not play any cartoon directed by ben jones .",
        "db_id": "tvshow",
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "sql": "select tv_channel@id from tv_channel except select cartoon@channel from cartoon where cartoon@directed_by = 'value'",
        "value_match": [
          "cartoon@directed_by"
        ],
        "value_alignment": [
          [
            [
              "ben_jones",
              "ben_jones"
            ]
          ]
        ],
        "exact_match": [
          "cartoon",
          "cartoon@channel",
          "tv_series@channel"
        ],
        "partial_match": [
          "cartoon@directed_by",
          "tv_channel"
        ]
      }
    ]
  },
  {
    "id": 644,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what are the ids of the tv channels that do not have any cartoons directed by ben jones ?",
        "db_id": "tvshow",
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "sql": "select tv_channel@id from tv_channel except select cartoon@channel from cartoon where cartoon@directed_by = 'value'",
        "value_match": [
          "cartoon@directed_by"
        ],
        "value_alignment": [
          [
            [
              "ben_jones",
              "ben_jones"
            ]
          ]
        ],
        "exact_match": [
          "cartoon",
          "cartoon@channel",
          "tv_series@channel"
        ],
        "partial_match": [
          "cartoon@directed_by",
          "tv_channel"
        ]
      }
    ]
  },
  {
    "id": 645,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "find the package option of the tv channel that do not have any cartoon directed by ben jones .",
        "db_id": "tvshow",
        "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "sql": "select tv_channel@package_option from tv_channel where tv_channel@id not in ( select cartoon@channel from cartoon where cartoon@directed_by = 'value' )",
        "value_match": [
          "cartoon@directed_by",
          "tv_channel@package_option"
        ],
        "value_alignment": [
          [
            [
              "ben_jones",
              "ben_jones"
            ]
          ],
          [
            [
              "option",
              "option"
            ]
          ]
        ],
        "exact_match": [
          "cartoon",
          "cartoon@channel",
          "tv_channel@package_option",
          "tv_series@channel"
        ],
        "partial_match": [
          "cartoon@directed_by",
          "tv_channel"
        ]
      }
    ]
  },
  {
    "id": 646,
    "database_id": "tvshow",
    "interaction": [
      {
        "utterance": "what are the package options of all tv channels that are not playing any cartoons directed by ben jones ?",
        "db_id": "tvshow",
        "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "sql": "select tv_channel@package_option from tv_channel where tv_channel@id not in ( select cartoon@channel from cartoon where cartoon@directed_by = 'value' )",
        "value_match": [
          "cartoon@directed_by",
          "tv_channel@package_option"
        ],
        "value_alignment": [
          [
            [
              "ben_jones",
              "ben_jones"
            ]
          ],
          [
            [
              "option",
              "option"
            ]
          ]
        ],
        "exact_match": [
          "cartoon",
          "cartoon@channel",
          "tv_channel@package_option",
          "tv_series@channel"
        ],
        "partial_match": [
          "cartoon@directed_by",
          "tv_channel"
        ]
      }
    ]
  },
  {
    "id": 647,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "how many poker players are there ?",
        "db_id": "poker_player",
        "query": "SELECT count(*) FROM poker_player",
        "question": "How many poker players are there?",
        "sql": "select count ( * ) from poker_player",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "poker_player",
          "poker_player@poker_player_id"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 648,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "count the number of poker players .",
        "db_id": "poker_player",
        "query": "SELECT count(*) FROM poker_player",
        "question": "Count the number of poker players.",
        "sql": "select count ( * ) from poker_player",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "poker_player",
          "poker_player@poker_player_id"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 649,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "list the earnings of poker players in descending order .",
        "db_id": "poker_player",
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "List the earnings of poker players in descending order.",
        "sql": "select poker_player@earnings from poker_player order by poker_player@earnings desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "poker_player",
          "poker_player@poker_player_id"
        ],
        "partial_match": [
          "poker_player@earnings"
        ]
      }
    ]
  },
  {
    "id": 650,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "what are the earnings of poker players , ordered descending by value ?",
        "db_id": "poker_player",
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "What are the earnings of poker players, ordered descending by value?",
        "sql": "select poker_player@earnings from poker_player order by poker_player@earnings desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "poker_player",
          "poker_player@poker_player_id"
        ],
        "partial_match": [
          "poker_player@earnings"
        ]
      }
    ]
  },
  {
    "id": 651,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "list the final tables made and the best finishes of poker players .",
        "db_id": "poker_player",
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "List the final tables made and the best finishes of poker players.",
        "sql": "select poker_player@final_table_made , poker_player@best_finish from poker_player",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "poker_player",
          "poker_player@poker_player_id",
          "poker_player@final_table_made"
        ],
        "partial_match": [
          "poker_player@best_finish"
        ]
      }
    ]
  },
  {
    "id": 652,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "what are the final tables made and best finishes for all poker players ?",
        "db_id": "poker_player",
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "What are the final tables made and best finishes for all poker players?",
        "sql": "select poker_player@final_table_made , poker_player@best_finish from poker_player",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "poker_player",
          "poker_player@poker_player_id",
          "poker_player@final_table_made"
        ],
        "partial_match": [
          "poker_player@best_finish"
        ]
      }
    ]
  },
  {
    "id": 653,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "what is the average earnings of poker players ?",
        "db_id": "poker_player",
        "query": "SELECT avg(Earnings) FROM poker_player",
        "question": "What is the average earnings of poker players?",
        "sql": "select avg ( poker_player@earnings ) from poker_player",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "poker_player",
          "poker_player@poker_player_id"
        ],
        "partial_match": [
          "poker_player@earnings"
        ]
      }
    ]
  },
  {
    "id": 654,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "return the average earnings across all poker players .",
        "db_id": "poker_player",
        "query": "SELECT avg(Earnings) FROM poker_player",
        "question": "Return the average earnings across all poker players.",
        "sql": "select avg ( poker_player@earnings ) from poker_player",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "poker_player",
          "poker_player@poker_player_id"
        ],
        "partial_match": [
          "poker_player@earnings"
        ]
      }
    ]
  },
  {
    "id": 655,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "what is the money rank of the poker player with the highest earnings ?",
        "db_id": "poker_player",
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "question": "What is the money rank of the poker player with the highest earnings?",
        "sql": "select poker_player@money_rank from poker_player order by poker_player@earnings desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "poker_player",
          "poker_player@poker_player_id",
          "poker_player@money_rank"
        ],
        "partial_match": [
          "poker_player@earnings"
        ]
      }
    ]
  },
  {
    "id": 656,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "return the money rank of the player with the greatest earnings .",
        "db_id": "poker_player",
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "question": "Return the money rank of the player with the greatest earnings.",
        "sql": "select poker_player@money_rank from poker_player order by poker_player@earnings desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "poker_player@money_rank"
        ],
        "partial_match": [
          "poker_player",
          "poker_player@poker_player_id",
          "poker_player@earnings"
        ]
      }
    ]
  },
  {
    "id": 657,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "what is the maximum number of final tables made among poker players with earnings less than 200000 ?",
        "db_id": "poker_player",
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "sql": "select max ( poker_player@final_table_made ) from poker_player where poker_player@earnings < 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "poker_player",
          "poker_player@poker_player_id",
          "poker_player@final_table_made"
        ],
        "partial_match": [
          "poker_player@earnings"
        ]
      }
    ]
  },
  {
    "id": 658,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "return the maximum final tables made across all poker players who have earnings below 200000 .",
        "db_id": "poker_player",
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "sql": "select max ( poker_player@final_table_made ) from poker_player where poker_player@earnings < 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "poker_player",
          "poker_player@poker_player_id",
          "poker_player@final_table_made"
        ],
        "partial_match": [
          "poker_player@earnings"
        ]
      }
    ]
  },
  {
    "id": 659,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "what are the names of poker players ?",
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "What are the names of poker players?",
        "sql": "select people@name from people join poker_player on people@people_id = poker_player@people_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people@name",
          "poker_player",
          "poker_player@poker_player_id"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 660,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "return the names of all the poker players .",
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "Return the names of all the poker players.",
        "sql": "select people@name from people join poker_player on people@people_id = poker_player@people_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people@name",
          "poker_player",
          "poker_player@poker_player_id"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 661,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "what are the names of poker players whose earnings is higher than 300000 ?",
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "sql": "select people@name from people join poker_player on people@people_id = poker_player@people_id where poker_player@earnings > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people@name",
          "poker_player",
          "poker_player@poker_player_id"
        ],
        "partial_match": [
          "poker_player@earnings"
        ]
      }
    ]
  },
  {
    "id": 662,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "give the names of poker players who have earnings above 300000 .",
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "question": "Give the names of poker players who have earnings above 300000.",
        "sql": "select people@name from people join poker_player on people@people_id = poker_player@people_id where poker_player@earnings > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people@name",
          "poker_player",
          "poker_player@poker_player_id"
        ],
        "partial_match": [
          "poker_player@earnings"
        ]
      }
    ]
  },
  {
    "id": 663,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "list the names of poker players ordered by the final tables made in ascending order .",
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "sql": "select people@name from people join poker_player on people@people_id = poker_player@people_id order by poker_player@final_table_made",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people@name",
          "poker_player",
          "poker_player@poker_player_id",
          "poker_player@final_table_made"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 664,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "what are the names of poker players , ordered ascending by the number of final tables they have made ?",
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "sql": "select people@name from people join poker_player on people@people_id = poker_player@people_id order by poker_player@final_table_made",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people@name",
          "poker_player",
          "poker_player@poker_player_id",
          "poker_player@final_table_made"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 665,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "what is the birth date of the poker player with the lowest earnings ?",
        "db_id": "poker_player",
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "sql": "select people@birth_date from people join poker_player on people@people_id = poker_player@people_id order by poker_player@earnings asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people@birth_date",
          "poker_player",
          "poker_player@poker_player_id"
        ],
        "partial_match": [
          "poker_player@earnings"
        ]
      }
    ]
  },
  {
    "id": 666,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "return the birth date of the poker player with the lowest earnings .",
        "db_id": "poker_player",
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "sql": "select people@birth_date from people join poker_player on people@people_id = poker_player@people_id order by poker_player@earnings asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people@birth_date",
          "poker_player",
          "poker_player@poker_player_id"
        ],
        "partial_match": [
          "poker_player@earnings"
        ]
      }
    ]
  },
  {
    "id": 667,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "what is the money rank of the tallest poker player ?",
        "db_id": "poker_player",
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "What is the money rank of the tallest poker player?",
        "sql": "select poker_player@money_rank from people join poker_player on people@people_id = poker_player@people_id order by people@height desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "poker_player",
          "poker_player@poker_player_id",
          "poker_player@money_rank"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 668,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "return the money rank of the poker player with the greatest height .",
        "db_id": "poker_player",
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "Return the money rank of the poker player with the greatest height.",
        "sql": "select poker_player@money_rank from people join poker_player on people@people_id = poker_player@people_id order by people@height desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people@height",
          "poker_player",
          "poker_player@poker_player_id",
          "poker_player@money_rank"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 669,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "what is the average earnings of poker players with height higher than 200 ?",
        "db_id": "poker_player",
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "question": "What is the average earnings of poker players with height higher than 200?",
        "sql": "select avg ( poker_player@earnings ) from people join poker_player on people@people_id = poker_player@people_id where people@height > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people@height",
          "poker_player",
          "poker_player@poker_player_id"
        ],
        "partial_match": [
          "poker_player@earnings"
        ]
      }
    ]
  },
  {
    "id": 670,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "give average earnings of poker players who are taller than 200 .",
        "db_id": "poker_player",
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "question": "Give average earnings of poker players who are taller than 200.",
        "sql": "select avg ( poker_player@earnings ) from people join poker_player on people@people_id = poker_player@people_id where people@height > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "poker_player",
          "poker_player@poker_player_id"
        ],
        "partial_match": [
          "poker_player@earnings"
        ]
      }
    ]
  },
  {
    "id": 671,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "what are the names of poker players in descending order of earnings ?",
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "What are the names of poker players in descending order of earnings?",
        "sql": "select people@name from people join poker_player on people@people_id = poker_player@people_id order by poker_player@earnings desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people@name",
          "poker_player",
          "poker_player@poker_player_id"
        ],
        "partial_match": [
          "poker_player@earnings"
        ]
      }
    ]
  },
  {
    "id": 672,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "return the names of poker players sorted by their earnings descending .",
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "Return the names of poker players sorted by their earnings descending.",
        "sql": "select people@name from people join poker_player on people@people_id = poker_player@people_id order by poker_player@earnings desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people@name",
          "poker_player",
          "poker_player@poker_player_id"
        ],
        "partial_match": [
          "poker_player@earnings"
        ]
      }
    ]
  },
  {
    "id": 673,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "what are different nationalities of people and the corresponding number of people from each nation ?",
        "db_id": "poker_player",
        "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "sql": "select people@nationality , count ( * ) from people group by people@nationality",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people",
          "people@people_id",
          "people@nationality",
          "poker_player@people_id"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 674,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "how many people are there of each nationality ?",
        "db_id": "poker_player",
        "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "question": "How many people are there of each nationality?",
        "sql": "select people@nationality , count ( * ) from people group by people@nationality",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people",
          "people@nationality"
        ],
        "partial_match": [
          "people@people_id",
          "poker_player@people_id"
        ]
      }
    ]
  },
  {
    "id": 675,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "what is the most common nationality of people ?",
        "db_id": "poker_player",
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common nationality of people?",
        "sql": "select people@nationality from people group by people@nationality order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people",
          "people@nationality"
        ],
        "partial_match": [
          "people@people_id",
          "poker_player@people_id"
        ]
      }
    ]
  },
  {
    "id": 676,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "give the nationality that is most common across all people .",
        "db_id": "poker_player",
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the nationality that is most common across all people.",
        "sql": "select people@nationality from people group by people@nationality order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people",
          "people@nationality"
        ],
        "partial_match": [
          "people@people_id",
          "poker_player@people_id"
        ]
      }
    ]
  },
  {
    "id": 677,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "what are the nationalities that are shared by at least two people ?",
        "db_id": "poker_player",
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "What are the nationalities that are shared by at least two people?",
        "sql": "select people@nationality from people group by people@nationality having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people",
          "people@nationality"
        ],
        "partial_match": [
          "people@people_id",
          "poker_player@people_id"
        ]
      }
    ]
  },
  {
    "id": 678,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "return the nationalities for which there are two or more people .",
        "db_id": "poker_player",
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "Return the nationalities for which there are two or more people.",
        "sql": "select people@nationality from people group by people@nationality having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people",
          "people@nationality"
        ],
        "partial_match": [
          "people@people_id",
          "poker_player@people_id"
        ]
      }
    ]
  },
  {
    "id": 679,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "list the names and birth dates of people in ascending alphabetical order of name .",
        "db_id": "poker_player",
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "sql": "select people@name , people@birth_date from people order by people@name asc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people",
          "people@name",
          "people@birth_date"
        ],
        "partial_match": [
          "people@people_id",
          "poker_player@people_id"
        ]
      }
    ]
  },
  {
    "id": 680,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "what are the names and birth dates of people , ordered by their names in alphabetical order ?",
        "db_id": "poker_player",
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "sql": "select people@name , people@birth_date from people order by people@name asc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people",
          "people@name",
          "people@birth_date"
        ],
        "partial_match": [
          "people@people_id",
          "poker_player@people_id"
        ]
      }
    ]
  },
  {
    "id": 681,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "show names of people whose nationality is not `` russia '' .",
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "sql": "select people@name from people where people@nationality != 'value'",
        "value_match": [
          "people@nationality"
        ],
        "value_alignment": [
          [
            [
              "russia",
              "russia"
            ]
          ]
        ],
        "exact_match": [
          "people",
          "people@nationality",
          "people@name"
        ],
        "partial_match": [
          "people@people_id",
          "poker_player@people_id"
        ]
      }
    ]
  },
  {
    "id": 682,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "what are the names of people who are not from russia ?",
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "What are the names of people who are not from Russia?",
        "sql": "select people@name from people where people@nationality != 'value'",
        "value_match": [
          "people@nationality"
        ],
        "value_alignment": [
          [
            [
              "russia",
              "russia"
            ]
          ]
        ],
        "exact_match": [
          "people",
          "people@name"
        ],
        "partial_match": [
          "people@people_id",
          "poker_player@people_id"
        ]
      }
    ]
  },
  {
    "id": 683,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "list the names of people that are not poker players .",
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "List the names of people that are not poker players.",
        "sql": "select people@name from people where people@people_id not in ( select poker_player@people_id from poker_player )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people",
          "people@name",
          "poker_player",
          "poker_player@poker_player_id"
        ],
        "partial_match": [
          "people@people_id",
          "poker_player@people_id"
        ]
      }
    ]
  },
  {
    "id": 684,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "what are the names of people who do not play poker ?",
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "What are the names of people who do not play poker?",
        "sql": "select people@name from people where people@people_id not in ( select poker_player@people_id from poker_player )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people",
          "people@name",
          "poker_player",
          "poker_player@poker_player_id"
        ],
        "partial_match": [
          "people@people_id",
          "poker_player@people_id"
        ]
      }
    ]
  },
  {
    "id": 685,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "how many distinct nationalities are there ?",
        "db_id": "poker_player",
        "query": "SELECT count(DISTINCT Nationality) FROM people",
        "question": "How many distinct nationalities are there?",
        "sql": "select count ( distinct people@nationality ) from people",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people@nationality"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 686,
    "database_id": "poker_player",
    "interaction": [
      {
        "utterance": "count the number of different nationalities .",
        "db_id": "poker_player",
        "query": "SELECT count(DISTINCT Nationality) FROM people",
        "question": "Count the number of different nationalities.",
        "sql": "select count ( distinct people@nationality ) from people",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "people@nationality"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 687,
    "database_id": "voter_1",
    "interaction": [
      {
        "utterance": "how many states are there ?",
        "db_id": "voter_1",
        "query": "SELECT count(*) FROM area_code_state",
        "question": "How many states are there?",
        "sql": "select count ( * ) from area_code_state",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [],
        "partial_match": [
          "votes@state",
          "area_code_state",
          "area_code_state@state"
        ]
      }
    ]
  },
  {
    "id": 688,
    "database_id": "voter_1",
    "interaction": [
      {
        "utterance": "list the contestant numbers and names , ordered by contestant name descending .",
        "db_id": "voter_1",
        "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "sql": "select contestants@contestant_number , contestants@contestant_name from contestants order by contestants@contestant_name desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "votes@contestant_number",
          "contestants",
          "contestants@contestant_number",
          "contestants@contestant_name"
        ],
        "partial_match": [
          "votes@phone_number"
        ]
      }
    ]
  },
  {
    "id": 689,
    "database_id": "voter_1",
    "interaction": [
      {
        "utterance": "list the vote ids , phone numbers and states of all votes .",
        "db_id": "voter_1",
        "query": "SELECT vote_id ,  phone_number ,  state FROM votes",
        "question": "List the vote ids, phone numbers and states of all votes.",
        "sql": "select votes@vote_id , votes@phone_number , votes@state from votes",
        "value_match": [
          "area_code_state@state"
        ],
        "value_alignment": [
          [
            [
              "id",
              "id"
            ]
          ]
        ],
        "exact_match": [
          "votes",
          "votes@vote_id",
          "votes@phone_number"
        ],
        "partial_match": [
          "votes@state",
          "votes@contestant_number",
          "area_code_state",
          "area_code_state@state",
          "contestants@contestant_number"
        ]
      }
    ]
  },
  {
    "id": 690,
    "database_id": "voter_1",
    "interaction": [
      {
        "utterance": "what are the maximum and minimum values of area codes ?",
        "db_id": "voter_1",
        "query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
        "question": "What are the maximum and minimum values of area codes?",
        "sql": "select max ( area_code_state@area_code ) , min ( area_code_state@area_code ) from area_code_state",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "area_code_state",
          "area_code_state@area_code"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 691,
    "database_id": "voter_1",
    "interaction": [
      {
        "utterance": "what is last date created of votes from the state 'ca ' ?",
        "db_id": "voter_1",
        "query": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "question": "What is last date created of votes from the state 'CA'?",
        "sql": "select max ( votes@created ) from votes where votes@state = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "votes",
          "votes@created"
        ],
        "partial_match": [
          "votes@vote_id",
          "votes@state",
          "area_code_state",
          "area_code_state@state"
        ]
      }
    ]
  },
  {
    "id": 692,
    "database_id": "voter_1",
    "interaction": [
      {
        "utterance": "what are the names of the contestants whose names are not 'jessie alloway '",
        "db_id": "voter_1",
        "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "sql": "select contestants@contestant_name from contestants where contestants@contestant_name != 'value'",
        "value_match": [
          "contestants@contestant_name"
        ],
        "value_alignment": [
          [
            [
              "jessie_alloway",
              "jessie_alloway"
            ]
          ]
        ],
        "exact_match": [
          "contestants",
          "contestants@contestant_name"
        ],
        "partial_match": [
          "votes@contestant_number",
          "contestants@contestant_number"
        ]
      }
    ]
  },
  {
    "id": 693,
    "database_id": "voter_1",
    "interaction": [
      {
        "utterance": "what are the distinct states and create time of all votes ?",
        "db_id": "voter_1",
        "query": "SELECT DISTINCT state ,  created FROM votes",
        "question": "What are the distinct states and create time of all votes?",
        "sql": "select distinct votes@state , votes@created from votes",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "votes",
          "votes@created"
        ],
        "partial_match": [
          "votes@vote_id",
          "votes@state",
          "area_code_state",
          "area_code_state@state"
        ]
      }
    ]
  },
  {
    "id": 694,
    "database_id": "voter_1",
    "interaction": [
      {
        "utterance": "what are the contestant numbers and names of the contestants who had at least two votes ?",
        "db_id": "voter_1",
        "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "sql": "select contestants@contestant_number , contestants@contestant_name from contestants join votes on contestants@contestant_number = votes@contestant_number group by contestants@contestant_number having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "votes",
          "votes@contestant_number",
          "contestants",
          "contestants@contestant_number",
          "contestants@contestant_name"
        ],
        "partial_match": [
          "votes@vote_id",
          "votes@phone_number"
        ]
      }
    ]
  },
  {
    "id": 695,
    "database_id": "voter_1",
    "interaction": [
      {
        "utterance": "of all the contestants who got voted , what is the contestant number and name of the contestant who got least votes ?",
        "db_id": "voter_1",
        "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "sql": "select contestants@contestant_number , contestants@contestant_name from contestants join votes on contestants@contestant_number = votes@contestant_number group by contestants@contestant_number order by count ( * ) asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "votes",
          "votes@vote_id",
          "votes@contestant_number",
          "contestants",
          "contestants@contestant_number",
          "contestants@contestant_name"
        ],
        "partial_match": [
          "votes@phone_number"
        ]
      }
    ]
  },
  {
    "id": 696,
    "database_id": "voter_1",
    "interaction": [
      {
        "utterance": "what are the number of votes from state 'ny ' or 'ca ' ?",
        "db_id": "voter_1",
        "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "sql": "select count ( * ) from votes where votes@state = 'value' or votes@state = 'value'",
        "value_match": [
          "votes@state",
          "area_code_state@state"
        ],
        "value_alignment": [
          [
            [
              "ny",
              "ny"
            ]
          ]
        ],
        "exact_match": [
          "votes"
        ],
        "partial_match": [
          "votes@vote_id",
          "votes@phone_number",
          "votes@state",
          "votes@contestant_number",
          "area_code_state",
          "area_code_state@state",
          "contestants@contestant_number"
        ]
      }
    ]
  },
  {
    "id": 697,
    "database_id": "voter_1",
    "interaction": [
      {
        "utterance": "how many contestants did not get voted ?",
        "db_id": "voter_1",
        "query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "question": "How many contestants did not get voted?",
        "sql": "select count ( * ) from contestants where contestants@contestant_number not in ( select votes@contestant_number from votes )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "votes",
          "contestants"
        ],
        "partial_match": [
          "votes@vote_id",
          "votes@contestant_number",
          "contestants@contestant_number",
          "contestants@contestant_name"
        ]
      }
    ]
  },
  {
    "id": 698,
    "database_id": "voter_1",
    "interaction": [
      {
        "utterance": "what is the area code in which the most voters voted ?",
        "db_id": "voter_1",
        "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the area code in which the most voters voted?",
        "sql": "select area_code_state@area_code from area_code_state join votes on area_code_state@state = votes@state group by area_code_state@area_code order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "votes",
          "area_code_state",
          "area_code_state@area_code"
        ],
        "partial_match": [
          "votes@vote_id"
        ]
      }
    ]
  },
  {
    "id": 699,
    "database_id": "voter_1",
    "interaction": [
      {
        "utterance": "what are the create dates , states , and phone numbers of the votes that were for the contestant named 'tabatha gehling ' ?",
        "db_id": "voter_1",
        "query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "sql": "select votes@created , votes@state , votes@phone_number from contestants join votes on contestants@contestant_number = votes@contestant_number where contestants@contestant_name = 'value'",
        "value_match": [
          "contestants@contestant_name"
        ],
        "value_alignment": [
          [
            [
              "tabatha_gehling",
              "tabatha_gehling"
            ]
          ]
        ],
        "exact_match": [
          "votes",
          "votes@phone_number",
          "votes@contestant_number",
          "votes@created",
          "contestants",
          "contestants@contestant_number",
          "contestants@contestant_name"
        ],
        "partial_match": [
          "votes@vote_id",
          "votes@state",
          "area_code_state",
          "area_code_state@state"
        ]
      }
    ]
  },
  {
    "id": 700,
    "database_id": "voter_1",
    "interaction": [
      {
        "utterance": "list the area codes in which voters voted both for the contestant 'tabatha gehling ' and the contestant 'kelly clauss ' .",
        "db_id": "voter_1",
        "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "sql": "select area_code_state@area_code from contestants join votes on contestants@contestant_number = votes@contestant_number join area_code_state on votes@state = area_code_state@state where contestants@contestant_name = 'value' intersect select area_code_state@area_code from contestants join votes on contestants@contestant_number = votes@contestant_number join area_code_state on votes@state = area_code_state@state where contestants@contestant_name = 'value'",
        "value_match": [
          "contestants@contestant_name"
        ],
        "value_alignment": [
          [
            [
              "tabatha_gehling",
              "tabatha_gehling"
            ]
          ],
          [
            [
              "kelly_clauss",
              "kelly_clauss"
            ]
          ]
        ],
        "exact_match": [
          "votes",
          "votes@contestant_number",
          "area_code_state",
          "area_code_state@area_code",
          "contestants",
          "contestants@contestant_number",
          "contestants@contestant_name"
        ],
        "partial_match": [
          "votes@vote_id"
        ]
      }
    ]
  },
  {
    "id": 701,
    "database_id": "voter_1",
    "interaction": [
      {
        "utterance": "return the names of the contestants whose names contain the substring 'al' .",
        "db_id": "voter_1",
        "query": "select contestant_name from contestants where contestant_name like \"%al%\"",
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "sql": "select contestants@contestant_name from contestants where contestants@contestant_name like 'value'",
        "value_match": [
          "area_code_state@state"
        ],
        "value_alignment": [
          [
            [
              "al",
              "al"
            ]
          ]
        ],
        "exact_match": [
          "contestants",
          "contestants@contestant_name"
        ],
        "partial_match": [
          "votes@contestant_number",
          "contestants@contestant_number"
        ]
      }
    ]
  },
  {
    "id": 702,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the names of all the countries that became independent after 1950 ?",
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "question": "What are the names of all the countries that became independent after 1950?",
        "sql": "select country@name from country where country@indepyear > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "city@name",
          "sqlite_sequence@name",
          "country",
          "country@name"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 703,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "give the names of the nations that were founded after 1950 .",
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "question": "Give the names of the nations that were founded after 1950.",
        "sql": "select country@name from country where country@indepyear > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "city@name",
          "sqlite_sequence@name",
          "country@name"
        ],
        "partial_match": [
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 704,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "how many countries have a republic as their form of government ?",
        "db_id": "world_1",
        "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "question": "How many countries have a republic as their form of government?",
        "sql": "select count ( * ) from country where country@governmentform = 'value'",
        "value_match": [
          "country@governmentform"
        ],
        "value_alignment": [
          [
            [
              "republic",
              "republic"
            ]
          ]
        ],
        "exact_match": [
          "country",
          "country@governmentform"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 705,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "how many countries have governments that are republics ?",
        "db_id": "world_1",
        "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "question": "How many countries have governments that are republics?",
        "sql": "select count ( * ) from country where country@governmentform = 'value'",
        "value_match": [
          "country@governmentform"
        ],
        "value_alignment": [
          [
            [
              "republic",
              "republic"
            ]
          ]
        ],
        "exact_match": [
          "country"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@governmentform"
        ]
      }
    ]
  },
  {
    "id": 706,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the total surface area of the countries in the caribbean region ?",
        "db_id": "world_1",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "sql": "select sum ( country@surfacearea ) from country where country@region = 'value'",
        "value_match": [
          "countrylanguage@language",
          "country@region"
        ],
        "value_alignment": [
          [
            [
              "caribbean",
              "caribbean"
            ]
          ]
        ],
        "exact_match": [
          "country",
          "country@region"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@surfacearea"
        ]
      }
    ]
  },
  {
    "id": 707,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "how much surface area do the countires in the carribean cover together ?",
        "db_id": "world_1",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "question": "How much surface area do the countires in the Carribean cover together?",
        "sql": "select sum ( country@surfacearea ) from country where country@region = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [],
        "partial_match": [
          "country@surfacearea"
        ]
      }
    ]
  },
  {
    "id": 708,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "which continent is anguilla in ?",
        "db_id": "world_1",
        "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "question": "Which continent is Anguilla in?",
        "sql": "select country@continent from country where country@name = 'value'",
        "value_match": [
          "country@localname",
          "country@name"
        ],
        "value_alignment": [
          [
            [
              "anguilla",
              "anguilla"
            ]
          ]
        ],
        "exact_match": [
          "country@continent"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 709,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the continent name which anguilla belongs to ?",
        "db_id": "world_1",
        "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "question": "What is the continent name which Anguilla belongs to?",
        "sql": "select country@continent from country where country@name = 'value'",
        "value_match": [
          "country@localname",
          "country@name"
        ],
        "value_alignment": [
          [
            [
              "anguilla",
              "anguilla"
            ]
          ]
        ],
        "exact_match": [
          "city@name",
          "sqlite_sequence@name",
          "country@name",
          "country@continent"
        ],
        "partial_match": [
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 710,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "which region is the city kabul located in ?",
        "db_id": "world_1",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "question": "Which region is the city Kabul located in?",
        "sql": "select country@region from country join city on country@code = city@countrycode where city@name = 'value'",
        "value_match": [
          "city@name",
          "sqlite_sequence@name"
        ],
        "value_alignment": [
          [
            [
              "city",
              "city"
            ]
          ],
          [
            [
              "kabul",
              "kabul"
            ]
          ]
        ],
        "exact_match": [
          "city",
          "country@region"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 711,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what region is kabul in ?",
        "db_id": "world_1",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "question": "What region is Kabul in?",
        "sql": "select country@region from country join city on country@code = city@countrycode where city@name = 'value'",
        "value_match": [
          "city@name"
        ],
        "value_alignment": [
          [
            [
              "kabul",
              "kabul"
            ]
          ]
        ],
        "exact_match": [
          "country@region"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 712,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "which language is the most popular in aruba ?",
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "Which language is the most popular in Aruba?",
        "sql": "select countrylanguage@language from country join countrylanguage on country@code = countrylanguage@countrycode where country@name = 'value' order by countrylanguage@percentage desc limit 1",
        "value_match": [
          "country@localname",
          "country@name"
        ],
        "value_alignment": [
          [
            [
              "aruba",
              "aruba"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage@language"
        ],
        "partial_match": [
          "countrylanguage"
        ]
      }
    ]
  },
  {
    "id": 713,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what language is predominantly spoken in aruba ?",
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "What language is predominantly spoken in Aruba?",
        "sql": "select countrylanguage@language from country join countrylanguage on country@code = countrylanguage@countrycode where country@name = 'value' order by countrylanguage@percentage desc limit 1",
        "value_match": [
          "country@localname",
          "country@name"
        ],
        "value_alignment": [
          [
            [
              "aruba",
              "aruba"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage@language"
        ],
        "partial_match": [
          "countrylanguage"
        ]
      }
    ]
  },
  {
    "id": 714,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the population and life expectancies in brazil ?",
        "db_id": "world_1",
        "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "question": "What are the population and life expectancies in Brazil?",
        "sql": "select country@population , country@lifeexpectancy from country where country@name = 'value'",
        "value_match": [
          "country@name"
        ],
        "value_alignment": [
          [
            [
              "brazil",
              "brazil"
            ]
          ]
        ],
        "exact_match": [
          "city@population",
          "country@population",
          "country@lifeexpectancy"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 715,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "give me brazil’s population and life expectancies .",
        "db_id": "world_1",
        "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "question": "Give me Brazil’s population and life expectancies.",
        "sql": "select country@population , country@lifeexpectancy from country where country@name = 'value'",
        "value_match": [
          "country@name"
        ],
        "value_alignment": [
          [
            [
              "brazil",
              "brazil"
            ]
          ]
        ],
        "exact_match": [
          "city@population",
          "country@population",
          "country@lifeexpectancy"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 716,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the region and population of angola ?",
        "db_id": "world_1",
        "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "question": "What are the region and population of Angola?",
        "sql": "select country@population , country@region from country where country@name = 'value'",
        "value_match": [
          "country@localname",
          "country@name"
        ],
        "value_alignment": [
          [
            [
              "angola",
              "angola"
            ]
          ]
        ],
        "exact_match": [
          "city@population",
          "country@region",
          "country@population"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 717,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what region does angola belong to and what is its population ?",
        "db_id": "world_1",
        "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "question": "What region does Angola belong to and what is its population?",
        "sql": "select country@population , country@region from country where country@name = 'value'",
        "value_match": [
          "country@localname",
          "country@name"
        ],
        "value_alignment": [
          [
            [
              "angola",
              "angola"
            ]
          ]
        ],
        "exact_match": [
          "city@population",
          "country@region",
          "country@population"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 718,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the average expected life expectancy for countries in the region of central africa ?",
        "db_id": "world_1",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "sql": "select avg ( country@lifeexpectancy ) from country where country@region = 'value'",
        "value_match": [
          "city@district",
          "country@region",
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "central_africa",
              "central_africa"
            ]
          ],
          [
            [
              "central",
              "central"
            ]
          ],
          [
            [
              "africa",
              "africa"
            ]
          ]
        ],
        "exact_match": [
          "country",
          "country@region",
          "country@lifeexpectancy"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 719,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "how long is the people’s average life expectancy in central africa ?",
        "db_id": "world_1",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "question": "How long is the people’s average life expectancy in Central Africa?",
        "sql": "select avg ( country@lifeexpectancy ) from country where country@region = 'value'",
        "value_match": [
          "city@district",
          "country@region",
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "central_africa",
              "central_africa"
            ]
          ],
          [
            [
              "central",
              "central"
            ]
          ],
          [
            [
              "africa",
              "africa"
            ]
          ]
        ],
        "exact_match": [
          "country@lifeexpectancy"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 720,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the name of country that has the shortest life expectancy in asia ?",
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "sql": "select country@name from country where country@continent = 'value' order by country@lifeexpectancy limit 1",
        "value_match": [
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "asia",
              "asia"
            ]
          ]
        ],
        "exact_match": [
          "city@name",
          "sqlite_sequence@name",
          "country",
          "country@name",
          "country@lifeexpectancy"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 721,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "give the name of the country in asia with the lowest life expectancy .",
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "sql": "select country@name from country where country@continent = 'value' order by country@lifeexpectancy limit 1",
        "value_match": [
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "asia",
              "asia"
            ]
          ]
        ],
        "exact_match": [
          "city@name",
          "sqlite_sequence@name",
          "country",
          "country@name",
          "country@lifeexpectancy"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 722,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the total population and maximum gnp in asia ?",
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "question": "What is the total population and maximum GNP in Asia?",
        "sql": "select sum ( country@population ) , max ( country@gnp ) from country where country@continent = 'value'",
        "value_match": [
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "asia",
              "asia"
            ]
          ]
        ],
        "exact_match": [
          "city@population",
          "country@population",
          "country@gnp"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 723,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "how many people live in asia , and what is the largest gnp among them ?",
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "sql": "select sum ( country@population ) , max ( country@gnp ) from country where country@continent = 'value'",
        "value_match": [
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "asia",
              "asia"
            ]
          ]
        ],
        "exact_match": [
          "country@gnp"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 724,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the average life expectancy in african countries that are republics ?",
        "db_id": "world_1",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "question": "What is the average life expectancy in African countries that are republics?",
        "sql": "select avg ( country@lifeexpectancy ) from country where country@continent = 'value' and country@governmentform = 'value'",
        "value_match": [
          "country@governmentform"
        ],
        "value_alignment": [
          [
            [
              "republic",
              "republic"
            ]
          ]
        ],
        "exact_match": [
          "country",
          "country@lifeexpectancy"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 725,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "give the average life expectancy for countries in africa which are republics ?",
        "db_id": "world_1",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "sql": "select avg ( country@lifeexpectancy ) from country where country@continent = 'value' and country@governmentform = 'value'",
        "value_match": [
          "country@governmentform",
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "africa",
              "africa"
            ]
          ],
          [
            [
              "republic",
              "republic"
            ]
          ]
        ],
        "exact_match": [
          "country",
          "country@lifeexpectancy"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 726,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the total surface area of the continents asia and europe ?",
        "db_id": "world_1",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "question": "What is the total surface area of the continents Asia and Europe?",
        "sql": "select sum ( country@surfacearea ) from country where country@continent = 'value' or country@continent = 'value'",
        "value_match": [
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "asia",
              "asia"
            ]
          ],
          [
            [
              "europe",
              "europe"
            ]
          ]
        ],
        "exact_match": [
          "country@continent"
        ],
        "partial_match": [
          "country@surfacearea"
        ]
      }
    ]
  },
  {
    "id": 727,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "give the total surface area covered by countries in asia or europe .",
        "db_id": "world_1",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "sql": "select sum ( country@surfacearea ) from country where country@continent = 'value' or country@continent = 'value'",
        "value_match": [
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "asia",
              "asia"
            ]
          ],
          [
            [
              "europe",
              "europe"
            ]
          ]
        ],
        "exact_match": [
          "country"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@surfacearea"
        ]
      }
    ]
  },
  {
    "id": 728,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "how many people live in gelderland district ?",
        "db_id": "world_1",
        "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "question": "How many people live in Gelderland district?",
        "sql": "select sum ( city@population ) from city where city@district = 'value'",
        "value_match": [
          "city@district"
        ],
        "value_alignment": [
          [
            [
              "gelderland",
              "gelderland"
            ]
          ]
        ],
        "exact_match": [
          "city@district"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 729,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the total population of gelderland district ?",
        "db_id": "world_1",
        "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "question": "What is the total population of Gelderland district?",
        "sql": "select sum ( city@population ) from city where city@district = 'value'",
        "value_match": [
          "city@district"
        ],
        "value_alignment": [
          [
            [
              "gelderland",
              "gelderland"
            ]
          ]
        ],
        "exact_match": [
          "city@district",
          "city@population",
          "country@population"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 730,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the average gnp and total population in all nations whose government is us territory ?",
        "db_id": "world_1",
        "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "sql": "select avg ( country@gnp ) , sum ( country@population ) from country where country@governmentform = 'value'",
        "value_match": [
          "country@governmentform"
        ],
        "value_alignment": [
          [
            [
              "us_territory",
              "us_territory"
            ]
          ]
        ],
        "exact_match": [
          "city@population",
          "country@population",
          "country@gnp"
        ],
        "partial_match": [
          "country@governmentform"
        ]
      }
    ]
  },
  {
    "id": 731,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "give the mean gnp and total population of nations which are considered us territory .",
        "db_id": "world_1",
        "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "sql": "select avg ( country@gnp ) , sum ( country@population ) from country where country@governmentform = 'value'",
        "value_match": [
          "country@governmentform"
        ],
        "value_alignment": [
          [
            [
              "us_territory",
              "us_territory"
            ]
          ]
        ],
        "exact_match": [
          "city@population",
          "country@population",
          "country@gnp"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 732,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "how many unique languages are spoken in the world ?",
        "db_id": "world_1",
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "question": "How many unique languages are spoken in the world?",
        "sql": "select count ( distinct countrylanguage@language ) from countrylanguage",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage@language"
        ],
        "partial_match": [
          "countrylanguage"
        ]
      }
    ]
  },
  {
    "id": 733,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the number of distinct languages used around the world ?",
        "db_id": "world_1",
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "question": "What is the number of distinct languages used around the world?",
        "sql": "select count ( distinct countrylanguage@language ) from countrylanguage",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage@language"
        ],
        "partial_match": [
          "countrylanguage"
        ]
      }
    ]
  },
  {
    "id": 734,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "how many type of governments are in africa ?",
        "db_id": "world_1",
        "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "question": "How many type of governments are in Africa?",
        "sql": "select count ( distinct country@governmentform ) from country where country@continent = 'value'",
        "value_match": [
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "africa",
              "africa"
            ]
          ]
        ],
        "exact_match": [],
        "partial_match": [
          "country@governmentform"
        ]
      }
    ]
  },
  {
    "id": 735,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "how many different forms of governments are there in africa ?",
        "db_id": "world_1",
        "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "question": "How many different forms of governments are there in Africa?",
        "sql": "select count ( distinct country@governmentform ) from country where country@continent = 'value'",
        "value_match": [
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "africa",
              "africa"
            ]
          ]
        ],
        "exact_match": [
          "country@governmentform"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 736,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the total number of languages used in aruba ?",
        "db_id": "world_1",
        "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "question": "What is the total number of languages used in Aruba?",
        "sql": "select count ( countrylanguage@language ) from country join countrylanguage on country@code = countrylanguage@countrycode where country@name = 'value'",
        "value_match": [
          "country@localname",
          "country@name"
        ],
        "value_alignment": [
          [
            [
              "aruba",
              "aruba"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage@language"
        ],
        "partial_match": [
          "countrylanguage"
        ]
      }
    ]
  },
  {
    "id": 737,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "how many languages are spoken in aruba ?",
        "db_id": "world_1",
        "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "question": "How many languages are spoken in Aruba?",
        "sql": "select count ( countrylanguage@language ) from country join countrylanguage on country@code = countrylanguage@countrycode where country@name = 'value'",
        "value_match": [
          "country@localname",
          "country@name"
        ],
        "value_alignment": [
          [
            [
              "aruba",
              "aruba"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage@language"
        ],
        "partial_match": [
          "countrylanguage"
        ]
      }
    ]
  },
  {
    "id": 738,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "how many official languages does afghanistan have ?",
        "db_id": "world_1",
        "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "question": "How many official languages does Afghanistan have?",
        "sql": "select count ( * ) from country join countrylanguage on country@code = countrylanguage@countrycode where country@name = 'value' and countrylanguage@isofficial = 'value'",
        "value_match": [
          "country@name"
        ],
        "value_alignment": [
          [
            [
              "afghanistan",
              "afghanistan"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage@language"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@isofficial"
        ]
      }
    ]
  },
  {
    "id": 739,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "how many official languages are spoken in afghanistan ?",
        "db_id": "world_1",
        "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "question": "How many official languages are spoken in Afghanistan?",
        "sql": "select count ( * ) from country join countrylanguage on country@code = countrylanguage@countrycode where country@name = 'value' and countrylanguage@isofficial = 'value'",
        "value_match": [
          "country@name"
        ],
        "value_alignment": [
          [
            [
              "afghanistan",
              "afghanistan"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage@language"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@isofficial"
        ]
      }
    ]
  },
  {
    "id": 740,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is name of the country that speaks the largest number of languages ?",
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is name of the country that speaks the largest number of languages?",
        "sql": "select country@name from country join countrylanguage on country@code = countrylanguage@countrycode group by country@name order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@language",
          "city@name",
          "sqlite_sequence@name",
          "country",
          "country@name"
        ],
        "partial_match": [
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 741,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "give the name of the nation that uses the greatest amount of languages .",
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "sql": "select country@name from country join countrylanguage on country@code = countrylanguage@countrycode group by country@name order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage@language",
          "city@name",
          "sqlite_sequence@name",
          "country@name"
        ],
        "partial_match": [
          "countrylanguage",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 742,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "which continent has the most diverse languages ?",
        "db_id": "world_1",
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent has the most diverse languages?",
        "sql": "select country@continent from country join countrylanguage on country@code = countrylanguage@countrycode group by country@continent order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage@language",
          "country@continent"
        ],
        "partial_match": [
          "countrylanguage"
        ]
      }
    ]
  },
  {
    "id": 743,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "which continent speaks the most languages ?",
        "db_id": "world_1",
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent speaks the most languages?",
        "sql": "select country@continent from country join countrylanguage on country@code = countrylanguage@countrycode group by country@continent order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage@language",
          "country@continent"
        ],
        "partial_match": [
          "countrylanguage"
        ]
      }
    ]
  },
  {
    "id": 744,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "how many countries speak both english and dutch ?",
        "db_id": "world_1",
        "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "question": "How many countries speak both English and Dutch?",
        "sql": "select count ( * ) from ( select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' intersect select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' )",
        "value_match": [
          "countrylanguage@language"
        ],
        "value_alignment": [
          [
            [
              "dutch",
              "dutch"
            ]
          ]
        ],
        "exact_match": [
          "country"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 745,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the number of nations that use english and dutch ?",
        "db_id": "world_1",
        "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "question": "What is the number of nations that use English and Dutch?",
        "sql": "select count ( * ) from ( select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' intersect select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' )",
        "value_match": [
          "countrylanguage@language"
        ],
        "value_alignment": [
          [
            [
              "dutch",
              "dutch"
            ]
          ]
        ],
        "exact_match": [],
        "partial_match": []
      }
    ]
  },
  {
    "id": 746,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the names of nations speak both english and french ?",
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "question": "What are the names of nations speak both English and French?",
        "sql": "select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' intersect select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "city@name",
          "sqlite_sequence@name",
          "country@name"
        ],
        "partial_match": [
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 747,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "give the names of nations that speak both english and french .",
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "question": "Give the names of nations that speak both English and French.",
        "sql": "select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' intersect select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "city@name",
          "sqlite_sequence@name",
          "country@name"
        ],
        "partial_match": [
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 748,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the names of nations where both english and french are official languages ?",
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "question": "What are the names of nations where both English and French are official languages?",
        "sql": "select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' and countrylanguage@isofficial = 'value' intersect select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' and countrylanguage@isofficial = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage@language",
          "city@name",
          "sqlite_sequence@name",
          "country@name"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@isofficial",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 749,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "give the names of countries with english and french as official languages .",
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "question": "Give the names of countries with English and French as official languages.",
        "sql": "select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' and countrylanguage@isofficial = 'value' intersect select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' and countrylanguage@isofficial = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@language",
          "city@name",
          "sqlite_sequence@name",
          "country",
          "country@name"
        ],
        "partial_match": [
          "countrylanguage@countrycode",
          "countrylanguage@isofficial",
          "city@countrycode",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 750,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the number of distinct continents where chinese is spoken ?",
        "db_id": "world_1",
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "sql": "select count ( distinct country@continent ) from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "country@continent"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 751,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "how many continents speak chinese ?",
        "db_id": "world_1",
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "question": "How many continents speak Chinese?",
        "sql": "select count ( distinct country@continent ) from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "country@continent"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 752,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the regions that use english or dutch ?",
        "db_id": "world_1",
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "question": "What are the regions that use English or Dutch?",
        "sql": "select distinct country@region from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' or countrylanguage@language = 'value'",
        "value_match": [
          "countrylanguage@language"
        ],
        "value_alignment": [
          [
            [
              "dutch",
              "dutch"
            ]
          ]
        ],
        "exact_match": [
          "country@region"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 753,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "which regions speak dutch or english ?",
        "db_id": "world_1",
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "question": "Which regions speak Dutch or English?",
        "sql": "select distinct country@region from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' or countrylanguage@language = 'value'",
        "value_match": [
          "countrylanguage@language"
        ],
        "value_alignment": [
          [
            [
              "dutch",
              "dutch"
            ]
          ]
        ],
        "exact_match": [
          "country@region"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 754,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the countries where either english or dutch is the official language ?",
        "db_id": "world_1",
        "query": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "question": "What are the countries where either English or Dutch is the official language ?",
        "sql": "select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' and countrylanguage@isofficial = 'value' union select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' and countrylanguage@isofficial = 'value'",
        "value_match": [
          "countrylanguage@language"
        ],
        "value_alignment": [
          [
            [
              "dutch",
              "dutch"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@language",
          "country"
        ],
        "partial_match": [
          "countrylanguage@countrycode",
          "countrylanguage@isofficial",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 755,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "which countries have either english or dutch as an official language ?",
        "db_id": "world_1",
        "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "question": "Which countries have either English or Dutch as an official language?",
        "sql": "select * from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' and countrylanguage@isofficial = 'value' union select * from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' and countrylanguage@isofficial = 'value'",
        "value_match": [
          "countrylanguage@language"
        ],
        "value_alignment": [
          [
            [
              "dutch",
              "dutch"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@language",
          "country"
        ],
        "partial_match": [
          "countrylanguage@countrycode",
          "countrylanguage@isofficial",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 756,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "which language is the most popular on the asian continent ?",
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "Which language is the most popular on the Asian continent?",
        "sql": "select countrylanguage@language from country join countrylanguage on country@code = countrylanguage@countrycode where country@continent = 'value' group by countrylanguage@language order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage@language",
          "country@continent"
        ],
        "partial_match": [
          "countrylanguage"
        ]
      }
    ]
  },
  {
    "id": 757,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the language that is used by the largest number of asian nations ?",
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "sql": "select countrylanguage@language from country join countrylanguage on country@code = countrylanguage@countrycode where country@continent = 'value' group by countrylanguage@language order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage@language"
        ],
        "partial_match": [
          "countrylanguage"
        ]
      }
    ]
  },
  {
    "id": 758,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "which languages are spoken by only one country in republic governments ?",
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "question": "Which languages are spoken by only one country in republic governments?",
        "sql": "select countrylanguage@language from country join countrylanguage on country@code = countrylanguage@countrycode where country@governmentform = 'value' group by countrylanguage@language having count ( * ) = 'value'",
        "value_match": [
          "country@governmentform"
        ],
        "value_alignment": [
          [
            [
              "republic",
              "republic"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@language",
          "country"
        ],
        "partial_match": [
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@governmentform"
        ]
      }
    ]
  },
  {
    "id": 759,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what languages are only used by a single country with a republic government ?",
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "question": "What languages are only used by a single country with a republic government?",
        "sql": "select countrylanguage@language from country join countrylanguage on country@code = countrylanguage@countrycode where country@governmentform = 'value' group by countrylanguage@language having count ( * ) = 'value'",
        "value_match": [
          "country@governmentform"
        ],
        "value_alignment": [
          [
            [
              "republic",
              "republic"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@language",
          "country"
        ],
        "partial_match": [
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@governmentform"
        ]
      }
    ]
  },
  {
    "id": 760,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "find the city with the largest population that uses english .",
        "db_id": "world_1",
        "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "Find the city with the largest population that uses English.",
        "sql": "select city@name , city@population from city join countrylanguage on city@countrycode = countrylanguage@countrycode where countrylanguage@language = 'value' order by city@population desc limit 1",
        "value_match": [
          "sqlite_sequence@name"
        ],
        "value_alignment": [
          [
            [
              "city",
              "city"
            ]
          ]
        ],
        "exact_match": [
          "city",
          "city@population",
          "country@population"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 761,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the most populace city that speaks english ?",
        "db_id": "world_1",
        "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "What is the most populace city that speaks English?",
        "sql": "select city@name , city@population from city join countrylanguage on city@countrycode = countrylanguage@countrycode where countrylanguage@language = 'value' order by city@population desc limit 1",
        "value_match": [
          "sqlite_sequence@name"
        ],
        "value_alignment": [
          [
            [
              "city",
              "city"
            ]
          ]
        ],
        "exact_match": [
          "city"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 762,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "find the name , population and expected life length of asian country with the largest area ?",
        "db_id": "world_1",
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "sql": "select country@name , country@population , country@lifeexpectancy from country where country@continent = 'value' order by country@surfacearea desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "city@name",
          "city@population",
          "sqlite_sequence@name",
          "country",
          "country@name",
          "country@population",
          "country@lifeexpectancy"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@surfacearea",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 763,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the name , population , and life expectancy of the largest asian country by land ?",
        "db_id": "world_1",
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "sql": "select country@name , country@population , country@lifeexpectancy from country where country@continent = 'value' order by country@surfacearea desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "city@name",
          "city@population",
          "sqlite_sequence@name",
          "country",
          "country@name",
          "country@population",
          "country@lifeexpectancy"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 764,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is average life expectancy in the countries where english is not the official language ?",
        "db_id": "world_1",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "sql": "select avg ( country@lifeexpectancy ) from country where country@name not in ( select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' and countrylanguage@isofficial = 'value' )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@language",
          "country",
          "country@lifeexpectancy"
        ],
        "partial_match": [
          "countrylanguage@countrycode",
          "countrylanguage@isofficial",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 765,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "give the mean life expectancy of countries in which english is not the official language .",
        "db_id": "world_1",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "sql": "select avg ( country@lifeexpectancy ) from country where country@name not in ( select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' and countrylanguage@isofficial = 'value' )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@language",
          "country",
          "country@lifeexpectancy"
        ],
        "partial_match": [
          "countrylanguage@countrycode",
          "countrylanguage@isofficial",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 766,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the total number of people living in the nations that do not use english ?",
        "db_id": "world_1",
        "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "question": "What is the total number of people living in the nations that do not use English?",
        "sql": "select sum ( country@population ) from country where country@name not in ( select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [],
        "partial_match": []
      }
    ]
  },
  {
    "id": 767,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "how many people live in countries that do not speak english ?",
        "db_id": "world_1",
        "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "question": "How many people live in countries that do not speak English?",
        "sql": "select sum ( country@population ) from country where country@name not in ( select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@language = 'value' )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "country"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 768,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the official language spoken in the country whose head of state is beatrix ?",
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "sql": "select countrylanguage@language from country join countrylanguage on country@code = countrylanguage@countrycode where country@headofstate = 'value' and countrylanguage@isofficial = 'value'",
        "value_match": [
          "country@headofstate"
        ],
        "value_alignment": [
          [
            [
              "beatrix",
              "beatrix"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@language",
          "country",
          "country@headofstate"
        ],
        "partial_match": [
          "countrylanguage@countrycode",
          "countrylanguage@isofficial",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 769,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the official language used in the country the name of whose head of state is beatrix .",
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "sql": "select countrylanguage@language from country join countrylanguage on country@code = countrylanguage@countrycode where country@headofstate = 'value' and countrylanguage@isofficial = 'value'",
        "value_match": [
          "country@headofstate"
        ],
        "value_alignment": [
          [
            [
              "beatrix",
              "beatrix"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@language",
          "city@name",
          "sqlite_sequence@name",
          "country",
          "country@name",
          "country@headofstate"
        ],
        "partial_match": [
          "countrylanguage@countrycode",
          "countrylanguage@isofficial",
          "city@countrycode",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 770,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the total number of unique official languages spoken in the countries that are founded before 1930 ?",
        "db_id": "world_1",
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "sql": "select count ( distinct countrylanguage@language ) from country join countrylanguage on country@code = countrylanguage@countrycode where country@indepyear < 'value' and countrylanguage@isofficial = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@language",
          "country"
        ],
        "partial_match": [
          "countrylanguage@countrycode",
          "countrylanguage@isofficial",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 771,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "for the countries founded before 1930 , what is the total number of distinct official languages ?",
        "db_id": "world_1",
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "sql": "select count ( distinct countrylanguage@language ) from country join countrylanguage on country@code = countrylanguage@countrycode where country@indepyear < 'value' and countrylanguage@isofficial = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@language",
          "country"
        ],
        "partial_match": [
          "countrylanguage@countrycode",
          "countrylanguage@isofficial",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 772,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the countries that have greater surface area than any country in europe ?",
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "sql": "select country@name from country where country@surfacearea > ( select min ( country@surfacearea ) from country where country@continent = 'value' )",
        "value_match": [
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "europe",
              "europe"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country"
        ],
        "partial_match": [
          "country@surfacearea"
        ]
      }
    ]
  },
  {
    "id": 773,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "which countries have greater area than that of any country in europe ?",
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "question": "Which countries have greater area than that of any country in Europe?",
        "sql": "select country@name from country where country@surfacearea > ( select min ( country@surfacearea ) from country where country@continent = 'value' )",
        "value_match": [
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "europe",
              "europe"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country"
        ],
        "partial_match": [
          "country@surfacearea"
        ]
      }
    ]
  },
  {
    "id": 774,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the african countries that have a population less than any country in asia ?",
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "sql": "select country@name from country where country@continent = 'value' and country@population < ( select max ( country@population ) from country where country@continent = 'value' )",
        "value_match": [
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "asia",
              "asia"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "city@population",
          "country",
          "country@population"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 775,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "which african countries have a smaller population than that of any country in asia ?",
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "sql": "select country@name from country where country@continent = 'value' and country@population < ( select min ( country@population ) from country where country@continent = 'value' )",
        "value_match": [
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "asia",
              "asia"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "city@population",
          "country",
          "country@population"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 776,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "which asian countries have a population that is larger than any country in africa ?",
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "sql": "select country@name from country where country@continent = 'value' and country@population > ( select max ( country@population ) from country where country@continent = 'value' )",
        "value_match": [
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "africa",
              "africa"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "city@population",
          "country",
          "country@population"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 777,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the asian countries which have a population larger than that of any country in africa ?",
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "sql": "select country@name from country where country@continent = 'value' and country@population > ( select min ( country@population ) from country where country@continent = 'value' )",
        "value_match": [
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "africa",
              "africa"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "city@population",
          "country",
          "country@population"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 778,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the country codes for countries that do not speak english ?",
        "db_id": "world_1",
        "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "What are the country codes for countries that do not speak English?",
        "sql": "select countrylanguage@countrycode from countrylanguage except select countrylanguage@countrycode from countrylanguage where countrylanguage@language = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country",
          "country@code"
        ],
        "partial_match": [
          "country@code2"
        ]
      }
    ]
  },
  {
    "id": 779,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "return the country codes for countries that do not speak english .",
        "db_id": "world_1",
        "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "Return the country codes for countries that do not speak English.",
        "sql": "select countrylanguage@countrycode from countrylanguage except select countrylanguage@countrycode from countrylanguage where countrylanguage@language = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country",
          "country@code"
        ],
        "partial_match": [
          "country@code2"
        ]
      }
    ]
  },
  {
    "id": 780,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the country codes of countries where people use languages other than english ?",
        "db_id": "world_1",
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "question": "What are the country codes of countries where people use languages other than English?",
        "sql": "select distinct countrylanguage@countrycode from countrylanguage where countrylanguage@language != 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "countrylanguage@language",
          "city@countrycode",
          "country",
          "country@code"
        ],
        "partial_match": [
          "country@code2"
        ]
      }
    ]
  },
  {
    "id": 781,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "give the country codes for countries in which people speak langauges that are not english .",
        "db_id": "world_1",
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "sql": "select distinct countrylanguage@countrycode from countrylanguage where countrylanguage@language != 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country",
          "country@code"
        ],
        "partial_match": [
          "country@code2"
        ]
      }
    ]
  },
  {
    "id": 782,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the codes of the countries that do not speak english and whose government forms are not republic ?",
        "db_id": "world_1",
        "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "sql": "select country@code from country where country@governmentform != 'value' except select countrylanguage@countrycode from countrylanguage where countrylanguage@language = 'value'",
        "value_match": [
          "country@governmentform"
        ],
        "value_alignment": [
          [
            [
              "republic",
              "republic"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage@countrycode",
          "city@countrycode",
          "country",
          "country@code",
          "country@governmentform"
        ],
        "partial_match": [
          "countrylanguage",
          "country@code2"
        ]
      }
    ]
  },
  {
    "id": 783,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "return the codes of countries that do not speak english and do not have republics for governments .",
        "db_id": "world_1",
        "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "sql": "select country@code from country where country@governmentform != 'value' except select countrylanguage@countrycode from countrylanguage where countrylanguage@language = 'value'",
        "value_match": [
          "country@governmentform"
        ],
        "value_alignment": [
          [
            [
              "republic",
              "republic"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage@countrycode",
          "city@countrycode",
          "country",
          "country@code"
        ],
        "partial_match": [
          "countrylanguage",
          "country@governmentform",
          "country@code2"
        ]
      }
    ]
  },
  {
    "id": 784,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "which cities are in european countries where english is not the official language ?",
        "db_id": "world_1",
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "question": "Which cities are in European countries where English is not the official language?",
        "sql": "select distinct city@name from country join city on city@countrycode = country@code where country@continent = 'value' and country@name not in ( select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@isofficial = 'value' and countrylanguage@language = 'value' )",
        "value_match": [
          "sqlite_sequence@name"
        ],
        "value_alignment": [
          [
            [
              "city",
              "city"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@language",
          "city",
          "country"
        ],
        "partial_match": [
          "countrylanguage@countrycode",
          "countrylanguage@isofficial",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 785,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the names of cities in europe for which english is not the official language ?",
        "db_id": "world_1",
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "sql": "select distinct city@name from country join city on city@countrycode = country@code where country@continent = 'value' and country@name not in ( select country@name from country join countrylanguage on country@code = countrylanguage@countrycode where countrylanguage@isofficial = 'value' and countrylanguage@language = 'value' )",
        "value_match": [
          "country@continent",
          "sqlite_sequence@name"
        ],
        "value_alignment": [
          [
            [
              "city",
              "city"
            ]
          ],
          [
            [
              "europe",
              "europe"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage@language",
          "city",
          "city@name",
          "sqlite_sequence@name",
          "country@name"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@isofficial",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 786,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "which unique cities are in asian countries where chinese is the official language ?",
        "db_id": "world_1",
        "query": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "sql": "select distinct city@name from country join countrylanguage on country@code = countrylanguage@countrycode join city on country@code = city@countrycode where countrylanguage@isofficial = 'value' and countrylanguage@language = 'value' and country@continent = 'value'",
        "value_match": [
          "sqlite_sequence@name"
        ],
        "value_alignment": [
          [
            [
              "city",
              "city"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@language",
          "city",
          "country"
        ],
        "partial_match": [
          "countrylanguage@countrycode",
          "countrylanguage@isofficial",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 787,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "return the different names of cities that are in asia and for which chinese is the official language .",
        "db_id": "world_1",
        "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "sql": "select distinct city@name from country join countrylanguage on country@code = countrylanguage@countrycode join city on country@code = city@countrycode where countrylanguage@isofficial = 'value' and countrylanguage@language = 'value' and country@continent = 'value'",
        "value_match": [
          "country@continent",
          "sqlite_sequence@name"
        ],
        "value_alignment": [
          [
            [
              "city",
              "city"
            ]
          ],
          [
            [
              "asia",
              "asia"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage@language",
          "city",
          "city@name",
          "sqlite_sequence@name",
          "country@name"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@isofficial",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 788,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the name , independence year , and surface area of the country with the smallest population ?",
        "db_id": "world_1",
        "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "sql": "select country@name , country@surfacearea , country@indepyear from country order by country@population limit 1",
        "value_match": [
          "city@name"
        ],
        "value_alignment": [
          [
            [
              "independence",
              "independence"
            ]
          ]
        ],
        "exact_match": [
          "city@name",
          "city@population",
          "sqlite_sequence@name",
          "country",
          "country@name",
          "country@population"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@surfacearea",
          "country@indepyear",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 789,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "give the name , year of independence , and surface area of the country that has the lowest population .",
        "db_id": "world_1",
        "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "sql": "select country@name , country@surfacearea , country@indepyear from country order by country@population limit 1",
        "value_match": [
          "city@name"
        ],
        "value_alignment": [
          [
            [
              "independence",
              "independence"
            ]
          ]
        ],
        "exact_match": [
          "city@name",
          "city@population",
          "sqlite_sequence@name",
          "country",
          "country@name",
          "country@population"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@surfacearea",
          "country@indepyear",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 790,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the population , name and leader of the country with the largest area ?",
        "db_id": "world_1",
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the population, name and leader of the country with the largest area?",
        "sql": "select country@name , country@population , country@headofstate from country order by country@surfacearea desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "city@name",
          "city@population",
          "sqlite_sequence@name",
          "country",
          "country@name",
          "country@population"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@surfacearea",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 791,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "give the name , population , and head of state for the country that has the largest area .",
        "db_id": "world_1",
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "sql": "select country@name , country@population , country@headofstate from country order by country@surfacearea desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "city@name",
          "city@population",
          "sqlite_sequence@name",
          "country",
          "country@name",
          "country@population",
          "country@headofstate"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@surfacearea",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 792,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "return the country name and the numbers of languages spoken for each country that speaks at least 3 languages .",
        "db_id": "world_1",
        "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "sql": "select count ( countrylanguage@language ) , country@name from country join countrylanguage on country@code = countrylanguage@countrycode group by country@name having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "countrylanguage@language",
          "city@name",
          "city@countrycode",
          "sqlite_sequence@name",
          "country",
          "country@name"
        ],
        "partial_match": [
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 793,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the names of countries that speak more than 2 languages , as well as how many languages they speak ?",
        "db_id": "world_1",
        "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "sql": "select count ( countrylanguage@language ) , country@name from country join countrylanguage on country@code = countrylanguage@countrycode group by country@name having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@language",
          "city@name",
          "sqlite_sequence@name",
          "country",
          "country@name"
        ],
        "partial_match": [
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 794,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "find the number of cities in each district whose population is greater than the average population of cities ?",
        "db_id": "world_1",
        "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "sql": "select count ( * ) , city@district from city where city@population > ( select avg ( city@population ) from city ) group by city@district",
        "value_match": [
          "sqlite_sequence@name"
        ],
        "value_alignment": [
          [
            [
              "city",
              "city"
            ]
          ],
          [
            [
              "city",
              "city"
            ]
          ]
        ],
        "exact_match": [
          "city",
          "city@district",
          "city@population",
          "country@population"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 795,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "how many cities in each district have a population that is above the average population across all cities ?",
        "db_id": "world_1",
        "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "sql": "select count ( * ) , city@district from city where city@population > ( select avg ( city@population ) from city ) group by city@district",
        "value_match": [
          "sqlite_sequence@name"
        ],
        "value_alignment": [
          [
            [
              "city",
              "city"
            ]
          ],
          [
            [
              "city",
              "city"
            ]
          ]
        ],
        "exact_match": [
          "city",
          "city@district",
          "city@population",
          "country@population"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 796,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "find the government form name and total population for each government form whose average life expectancy is longer than 72 .",
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "sql": "select sum ( country@population ) , country@governmentform from country group by country@governmentform having avg ( country@lifeexpectancy ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "city@name",
          "city@population",
          "sqlite_sequence@name",
          "country@name",
          "country@population",
          "country@lifeexpectancy",
          "country@governmentform"
        ],
        "partial_match": [
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 797,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "sql": "select sum ( country@population ) , country@governmentform from country group by country@governmentform having avg ( country@lifeexpectancy ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "city@population",
          "country@population",
          "country@lifeexpectancy",
          "country@governmentform"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 798,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72 ?",
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "sql": "select sum ( country@population ) , avg ( country@lifeexpectancy ) , country@continent from country group by country@continent having avg ( country@lifeexpectancy ) < 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "city@population",
          "country@continent",
          "country@population",
          "country@lifeexpectancy"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 799,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the different continents and the total popuation and average life expectancy corresponding to each , for continents that have an average life expectancy less than 72 ?",
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "sql": "select sum ( country@population ) , avg ( country@lifeexpectancy ) , country@continent from country group by country@continent having avg ( country@lifeexpectancy ) < 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "country@continent",
          "country@lifeexpectancy"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 800,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the names and areas of countries with the top 5 largest area ?",
        "db_id": "world_1",
        "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "sql": "select country@name , country@surfacearea from country order by country@surfacearea desc limit 5",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "city@name",
          "sqlite_sequence@name",
          "country",
          "country@name",
          "country@surfacearea"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 801,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "return the names and surface areas of the 5 largest countries .",
        "db_id": "world_1",
        "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "question": "Return the names and surface areas of the 5 largest countries.",
        "sql": "select country@name , country@surfacearea from country order by country@surfacearea desc limit 5",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "city@name",
          "sqlite_sequence@name",
          "country",
          "country@name"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@surfacearea",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 802,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are names of countries with the top 3 largest population ?",
        "db_id": "world_1",
        "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "What are names of countries with the top 3 largest population?",
        "sql": "select country@name from country order by country@population desc limit 3",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "city@name",
          "city@population",
          "sqlite_sequence@name",
          "country",
          "country@name",
          "country@population"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 803,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "return the names of the 3 most populated countries .",
        "db_id": "world_1",
        "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "Return the names of the 3 most populated countries.",
        "sql": "select country@name from country order by country@population desc limit 3",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "city@name",
          "sqlite_sequence@name",
          "country",
          "country@name"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 804,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the names of the nations with the 3 lowest populations ?",
        "db_id": "world_1",
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "question": "What are the names of the nations with the 3 lowest populations?",
        "sql": "select country@name from country order by country@population asc limit 3",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "city@name",
          "city@population",
          "sqlite_sequence@name",
          "country@name",
          "country@population"
        ],
        "partial_match": [
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 805,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "return the names of the 3 countries with the fewest people .",
        "db_id": "world_1",
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "question": "Return the names of the 3 countries with the fewest people.",
        "sql": "select country@name from country order by country@population asc limit 3",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "city@name",
          "sqlite_sequence@name",
          "country",
          "country@name"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 806,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "how many countries are in asia ?",
        "db_id": "world_1",
        "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "question": "how many countries are in Asia?",
        "sql": "select count ( * ) from country where country@continent = 'value'",
        "value_match": [
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "asia",
              "asia"
            ]
          ]
        ],
        "exact_match": [
          "country"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 807,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "count the number of countries in asia .",
        "db_id": "world_1",
        "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "question": "Count the number of countries in Asia.",
        "sql": "select count ( * ) from country where country@continent = 'value'",
        "value_match": [
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "asia",
              "asia"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 808,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the names of the countries that are in the continent of europe and have a population of 80000 ?",
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "sql": "select country@name from country where country@continent = 'value' and country@population = 'value'",
        "value_match": [
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "europe",
              "europe"
            ]
          ]
        ],
        "exact_match": [
          "city@name",
          "city@population",
          "sqlite_sequence@name",
          "country",
          "country@name",
          "country@continent",
          "country@population"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 809,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "give the names of countries that are in europe and have a population equal to 80000 .",
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "sql": "select country@name from country where country@continent = 'value' and country@population = 'value'",
        "value_match": [
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "europe",
              "europe"
            ]
          ]
        ],
        "exact_match": [
          "city@name",
          "city@population",
          "sqlite_sequence@name",
          "country",
          "country@name",
          "country@population"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode",
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 810,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the total population and average area of countries in the continent of north america whose area is bigger than 3000 ?",
        "db_id": "world_1",
        "query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "sql": "select sum ( country@population ) , avg ( country@surfacearea ) from country where country@continent = 'value' and country@surfacearea > 'value'",
        "value_match": [
          "country@region",
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "north_america",
              "north_america"
            ]
          ]
        ],
        "exact_match": [
          "city@population",
          "country",
          "country@continent",
          "country@surfacearea",
          "country@population"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 811,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "give the total population and average surface area corresponding to countries in north america that have a surface area greater than 3000 .",
        "db_id": "world_1",
        "query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "sql": "select sum ( country@population ) , avg ( country@surfacearea ) from country where country@continent = 'value' and country@surfacearea > 'value'",
        "value_match": [
          "country@region",
          "country@continent"
        ],
        "value_alignment": [
          [
            [
              "north_america",
              "north_america"
            ]
          ]
        ],
        "exact_match": [
          "city@population",
          "country",
          "country@surfacearea",
          "country@population"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 812,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the cities whose population is between 160000 and 900000 ?",
        "db_id": "world_1",
        "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "question": "What are the cities whose population is between 160000 and 900000?",
        "sql": "select city@name from city where city@population between 'value' and 'value'",
        "value_match": [
          "sqlite_sequence@name"
        ],
        "value_alignment": [
          [
            [
              "city",
              "city"
            ]
          ]
        ],
        "exact_match": [
          "city",
          "city@population",
          "country@population"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 813,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "return the names of cities that have a population between 160000 and 900000 .",
        "db_id": "world_1",
        "query": "select name from city where population between 160000 and 900000",
        "question": "Return the names of cities that have a population between 160000 and 900000 .",
        "sql": "select city@name from city where city@population between 'value' and 'value'",
        "value_match": [
          "sqlite_sequence@name"
        ],
        "value_alignment": [
          [
            [
              "city",
              "city"
            ]
          ]
        ],
        "exact_match": [
          "city",
          "city@name",
          "city@population",
          "sqlite_sequence@name",
          "country@name",
          "country@population"
        ],
        "partial_match": [
          "country@localname"
        ]
      }
    ]
  },
  {
    "id": 814,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "which language is spoken by the largest number of countries ?",
        "db_id": "world_1",
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Which language is spoken by the largest number of countries?",
        "sql": "select countrylanguage@language from countrylanguage group by countrylanguage@language order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@language",
          "country"
        ],
        "partial_match": [
          "countrylanguage@countrycode",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 815,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "give the language that is spoken in the most countries .",
        "db_id": "world_1",
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the language that is spoken in the most countries.",
        "sql": "select countrylanguage@language from countrylanguage group by countrylanguage@language order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@language",
          "country"
        ],
        "partial_match": [
          "countrylanguage@countrycode",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 816,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the language spoken by the largest percentage of people in each country ?",
        "db_id": "world_1",
        "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "sql": "select countrylanguage@language , countrylanguage@countrycode , max ( countrylanguage@percentage ) from countrylanguage group by countrylanguage@countrycode",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@language",
          "countrylanguage@percentage",
          "country"
        ],
        "partial_match": [
          "countrylanguage@countrycode",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 817,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the country codes of the different countries , and what are the languages spoken by the greatest percentage of people for each ?",
        "db_id": "world_1",
        "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "sql": "select countrylanguage@language , countrylanguage@countrycode , max ( countrylanguage@percentage ) from countrylanguage group by countrylanguage@countrycode",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "countrylanguage@language",
          "countrylanguage@percentage",
          "city@countrycode",
          "country",
          "country@code"
        ],
        "partial_match": [
          "country@code2"
        ]
      }
    ]
  },
  {
    "id": 818,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what is the total number of countries where spanish is spoken by the largest percentage of people ?",
        "db_id": "world_1",
        "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "sql": "select count ( * ) , max ( countrylanguage@percentage ) from countrylanguage where countrylanguage@language = 'value' group by countrylanguage@countrycode",
        "value_match": [
          "countrylanguage@language"
        ],
        "value_alignment": [
          [
            [
              "spanish",
              "spanish"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage@percentage",
          "country"
        ],
        "partial_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "city@countrycode"
        ]
      }
    ]
  },
  {
    "id": 819,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "count the number of countries for which spanish is the predominantly spoken language .",
        "db_id": "world_1",
        "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "sql": "select count ( * ) , max ( countrylanguage@percentage ) from countrylanguage where countrylanguage@language = 'value' group by countrylanguage@countrycode",
        "value_match": [
          "countrylanguage@language"
        ],
        "value_alignment": [
          [
            [
              "spanish",
              "spanish"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "countrylanguage@language",
          "city@countrycode",
          "country"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 820,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "what are the codes of countries where spanish is spoken by the largest percentage of people ?",
        "db_id": "world_1",
        "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "sql": "select countrylanguage@countrycode , max ( countrylanguage@percentage ) from countrylanguage where countrylanguage@language = 'value' group by countrylanguage@countrycode",
        "value_match": [
          "countrylanguage@language"
        ],
        "value_alignment": [
          [
            [
              "spanish",
              "spanish"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage@countrycode",
          "countrylanguage@percentage",
          "city@countrycode",
          "country",
          "country@code"
        ],
        "partial_match": [
          "countrylanguage",
          "country@code2"
        ]
      }
    ]
  },
  {
    "id": 821,
    "database_id": "world_1",
    "interaction": [
      {
        "utterance": "return the codes of countries for which spanish is the predominantly spoken language .",
        "db_id": "world_1",
        "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "sql": "select countrylanguage@countrycode , max ( countrylanguage@percentage ) from countrylanguage where countrylanguage@language = 'value' group by countrylanguage@countrycode",
        "value_match": [
          "countrylanguage@language"
        ],
        "value_alignment": [
          [
            [
              "spanish",
              "spanish"
            ]
          ]
        ],
        "exact_match": [
          "countrylanguage",
          "countrylanguage@countrycode",
          "countrylanguage@language",
          "city@countrycode",
          "country",
          "country@code"
        ],
        "partial_match": [
          "country@code2"
        ]
      }
    ]
  },
  {
    "id": 822,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "how many conductors are there ?",
        "db_id": "orchestra",
        "query": "SELECT count(*) FROM conductor",
        "question": "How many conductors are there?",
        "sql": "select count ( * ) from conductor",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "conductor"
        ],
        "partial_match": [
          "conductor@conductor_id",
          "orchestra@conductor_id"
        ]
      }
    ]
  },
  {
    "id": 823,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "count the number of conductors .",
        "db_id": "orchestra",
        "query": "SELECT count(*) FROM conductor",
        "question": "Count the number of conductors.",
        "sql": "select count ( * ) from conductor",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "conductor"
        ],
        "partial_match": [
          "conductor@conductor_id",
          "orchestra@conductor_id"
        ]
      }
    ]
  },
  {
    "id": 824,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "list the names of conductors in ascending order of age .",
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "List the names of conductors in ascending order of age.",
        "sql": "select conductor@name from conductor order by conductor@age asc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "conductor",
          "conductor@name",
          "conductor@age"
        ],
        "partial_match": [
          "conductor@conductor_id",
          "orchestra@conductor_id"
        ]
      }
    ]
  },
  {
    "id": 825,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "what are the names of conductors , ordered by age ?",
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "What are the names of conductors, ordered by age?",
        "sql": "select conductor@name from conductor order by conductor@age asc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "conductor",
          "conductor@name",
          "conductor@age"
        ],
        "partial_match": [
          "conductor@conductor_id",
          "orchestra@conductor_id"
        ]
      }
    ]
  },
  {
    "id": 826,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "what are the names of conductors whose nationalities are not `` usa '' ?",
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "sql": "select conductor@name from conductor where conductor@nationality != 'value'",
        "value_match": [
          "conductor@nationality"
        ],
        "value_alignment": [
          [
            [
              "usa",
              "usa"
            ]
          ]
        ],
        "exact_match": [
          "conductor",
          "conductor@name",
          "conductor@nationality"
        ],
        "partial_match": [
          "conductor@conductor_id",
          "orchestra@conductor_id"
        ]
      }
    ]
  },
  {
    "id": 827,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "return the names of conductors that do not have the nationality `` usa '' .",
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "sql": "select conductor@name from conductor where conductor@nationality != 'value'",
        "value_match": [
          "conductor@nationality"
        ],
        "value_alignment": [
          [
            [
              "usa",
              "usa"
            ]
          ]
        ],
        "exact_match": [
          "conductor",
          "conductor@name",
          "conductor@nationality"
        ],
        "partial_match": [
          "conductor@conductor_id",
          "orchestra@conductor_id"
        ]
      }
    ]
  },
  {
    "id": 828,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "what are the record companies of orchestras in descending order of years in which they were founded ?",
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "sql": "select orchestra@record_company from orchestra order by orchestra@year_of_founded desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "orchestra@record_company",
          "orchestra@year_of_founded"
        ],
        "partial_match": [
          "conductor@year_of_work",
          "orchestra",
          "orchestra@orchestra",
          "orchestra@major_record_format"
        ]
      }
    ]
  },
  {
    "id": 829,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "return the record companies of orchestras , sorted descending by the years in which they were founded .",
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "sql": "select orchestra@record_company from orchestra order by orchestra@year_of_founded desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "orchestra@record_company",
          "orchestra@year_of_founded"
        ],
        "partial_match": [
          "conductor@year_of_work",
          "orchestra",
          "orchestra@orchestra",
          "orchestra@major_record_format"
        ]
      }
    ]
  },
  {
    "id": 830,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "what is the average attendance of shows ?",
        "db_id": "orchestra",
        "query": "SELECT avg(Attendance) FROM SHOW",
        "question": "What is the average attendance of shows?",
        "sql": "select avg ( show@attendance ) from show",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "show",
          "show@attendance"
        ],
        "partial_match": [
          "show@if_first_show"
        ]
      }
    ]
  },
  {
    "id": 831,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "return the average attendance across all shows .",
        "db_id": "orchestra",
        "query": "SELECT avg(Attendance) FROM SHOW",
        "question": "Return the average attendance across all shows.",
        "sql": "select avg ( show@attendance ) from show",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "show",
          "show@attendance"
        ],
        "partial_match": [
          "show@if_first_show"
        ]
      }
    ]
  },
  {
    "id": 832,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "what are the maximum and minimum share of performances whose type is not `` live final '' .",
        "db_id": "orchestra",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "sql": "select max ( performance@share ) , min ( performance@share ) from performance where performance@type != 'value'",
        "value_match": [
          "performance@type"
        ],
        "value_alignment": [
          [
            [
              "live_final",
              "live_final"
            ]
          ]
        ],
        "exact_match": [
          "performance",
          "performance@type"
        ],
        "partial_match": [
          "show@performance_id",
          "performance@performance_id",
          "performance@share"
        ]
      }
    ]
  },
  {
    "id": 833,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "return the maximum and minimum shares for performances that do not have the type `` live final '' .",
        "db_id": "orchestra",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "sql": "select max ( performance@share ) , min ( performance@share ) from performance where performance@type != 'value'",
        "value_match": [
          "performance@type"
        ],
        "value_alignment": [
          [
            [
              "live_final",
              "live_final"
            ]
          ]
        ],
        "exact_match": [
          "performance",
          "performance@type"
        ],
        "partial_match": [
          "show@performance_id",
          "performance@performance_id",
          "performance@share"
        ]
      }
    ]
  },
  {
    "id": 834,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "how many different nationalities do conductors have ?",
        "db_id": "orchestra",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "question": "How many different nationalities do conductors have?",
        "sql": "select count ( distinct conductor@nationality ) from conductor",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "conductor",
          "conductor@nationality"
        ],
        "partial_match": [
          "conductor@conductor_id",
          "orchestra@conductor_id"
        ]
      }
    ]
  },
  {
    "id": 835,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "count the number of different nationalities of conductors .",
        "db_id": "orchestra",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "question": "Count the number of different nationalities of conductors.",
        "sql": "select count ( distinct conductor@nationality ) from conductor",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "conductor",
          "conductor@nationality"
        ],
        "partial_match": [
          "conductor@conductor_id",
          "orchestra@conductor_id"
        ]
      }
    ]
  },
  {
    "id": 836,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "list names of conductors in descending order of years of work .",
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "List names of conductors in descending order of years of work.",
        "sql": "select conductor@name from conductor order by conductor@year_of_work desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "conductor",
          "conductor@name",
          "conductor@year_of_work"
        ],
        "partial_match": [
          "conductor@conductor_id",
          "orchestra@conductor_id",
          "orchestra@year_of_founded"
        ]
      }
    ]
  },
  {
    "id": 837,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "what are the names of conductors , sorted descending by the number of years they have worked ?",
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "sql": "select conductor@name from conductor order by conductor@year_of_work desc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "conductor",
          "conductor@name",
          "conductor@year_of_work"
        ],
        "partial_match": [
          "conductor@conductor_id",
          "orchestra@conductor_id",
          "orchestra@year_of_founded"
        ]
      }
    ]
  },
  {
    "id": 838,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "list the name of the conductor with the most years of work .",
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "List the name of the conductor with the most years of work.",
        "sql": "select conductor@name from conductor order by conductor@year_of_work desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "conductor",
          "conductor@name",
          "conductor@year_of_work"
        ],
        "partial_match": [
          "conductor@conductor_id",
          "orchestra@conductor_id",
          "orchestra@year_of_founded"
        ]
      }
    ]
  },
  {
    "id": 839,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "what is the name of the conductor who has worked the greatest number of years ?",
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "sql": "select conductor@name from conductor order by conductor@year_of_work desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "conductor",
          "conductor@name",
          "conductor@year_of_work"
        ],
        "partial_match": [
          "conductor@conductor_id",
          "orchestra@conductor_id",
          "orchestra@year_of_founded"
        ]
      }
    ]
  },
  {
    "id": 840,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "show the names of conductors and the orchestras they have conducted .",
        "db_id": "orchestra",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "sql": "select conductor@name , orchestra@orchestra from conductor join orchestra on conductor@conductor_id = orchestra@conductor_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "show",
          "conductor",
          "conductor@conductor_id",
          "conductor@name",
          "orchestra@conductor_id"
        ],
        "partial_match": [
          "show@if_first_show",
          "orchestra",
          "orchestra@orchestra"
        ]
      }
    ]
  },
  {
    "id": 841,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "what are the names of conductors as well as the corresonding orchestras that they have conducted ?",
        "db_id": "orchestra",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "sql": "select conductor@name , orchestra@orchestra from conductor join orchestra on conductor@conductor_id = orchestra@conductor_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "conductor",
          "conductor@conductor_id",
          "conductor@name",
          "orchestra@conductor_id"
        ],
        "partial_match": [
          "orchestra",
          "orchestra@orchestra"
        ]
      }
    ]
  },
  {
    "id": 842,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "show the names of conductors that have conducted more than one orchestras .",
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "sql": "select conductor@name from conductor join orchestra on conductor@conductor_id = orchestra@conductor_id group by orchestra@conductor_id having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "show",
          "conductor",
          "conductor@conductor_id",
          "conductor@name",
          "orchestra@conductor_id"
        ],
        "partial_match": [
          "show@if_first_show",
          "orchestra",
          "orchestra@orchestra"
        ]
      }
    ]
  },
  {
    "id": 843,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "what are the names of conductors who have conducted at more than one orchestra ?",
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "sql": "select conductor@name from conductor join orchestra on conductor@conductor_id = orchestra@conductor_id group by orchestra@conductor_id having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "conductor",
          "conductor@conductor_id",
          "conductor@name",
          "orchestra",
          "orchestra@orchestra",
          "orchestra@conductor_id"
        ],
        "partial_match": [
          "orchestra@orchestra_id",
          "performance@orchestra_id"
        ]
      }
    ]
  },
  {
    "id": 844,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "show the name of the conductor that has conducted the most number of orchestras .",
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "sql": "select conductor@name from conductor join orchestra on conductor@conductor_id = orchestra@conductor_id group by orchestra@conductor_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "show",
          "conductor",
          "conductor@conductor_id",
          "conductor@name",
          "orchestra@conductor_id"
        ],
        "partial_match": [
          "show@if_first_show",
          "orchestra",
          "orchestra@orchestra"
        ]
      }
    ]
  },
  {
    "id": 845,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "what is the name of the conductor who has conducted the most orchestras ?",
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "sql": "select conductor@name from conductor join orchestra on conductor@conductor_id = orchestra@conductor_id group by orchestra@conductor_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "conductor",
          "conductor@conductor_id",
          "conductor@name",
          "orchestra@conductor_id"
        ],
        "partial_match": [
          "orchestra",
          "orchestra@orchestra"
        ]
      }
    ]
  },
  {
    "id": 846,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "please show the name of the conductor that has conducted orchestras founded after 2008 .",
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "sql": "select conductor@name from conductor join orchestra on conductor@conductor_id = orchestra@conductor_id where orchestra@year_of_founded > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "show",
          "conductor",
          "conductor@conductor_id",
          "conductor@name",
          "orchestra@conductor_id"
        ],
        "partial_match": [
          "show@if_first_show",
          "orchestra",
          "orchestra@orchestra",
          "orchestra@year_of_founded"
        ]
      }
    ]
  },
  {
    "id": 847,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "what are the names of conductors who have conducted orchestras founded after the year 2008 ?",
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "sql": "select conductor@name from conductor join orchestra on conductor@conductor_id = orchestra@conductor_id where orchestra@year_of_founded > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "conductor",
          "conductor@conductor_id",
          "conductor@name",
          "orchestra@conductor_id",
          "orchestra@year_of_founded"
        ],
        "partial_match": [
          "conductor@year_of_work",
          "orchestra",
          "orchestra@orchestra"
        ]
      }
    ]
  },
  {
    "id": 848,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "please show the different record companies and the corresponding number of orchestras .",
        "db_id": "orchestra",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "sql": "select orchestra@record_company , count ( * ) from orchestra group by orchestra@record_company",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "show",
          "orchestra@record_company"
        ],
        "partial_match": [
          "show@if_first_show",
          "orchestra",
          "orchestra@orchestra",
          "orchestra@major_record_format"
        ]
      }
    ]
  },
  {
    "id": 849,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "how many orchestras does each record company manage ?",
        "db_id": "orchestra",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "How many orchestras does each record company manage?",
        "sql": "select orchestra@record_company , count ( * ) from orchestra group by orchestra@record_company",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "orchestra@record_company"
        ],
        "partial_match": [
          "orchestra",
          "orchestra@orchestra",
          "orchestra@major_record_format"
        ]
      }
    ]
  },
  {
    "id": 850,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "please show the record formats of orchestras in ascending order of count .",
        "db_id": "orchestra",
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "sql": "select orchestra@major_record_format from orchestra group by orchestra@major_record_format order by count ( * ) asc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "show",
          "orchestra@major_record_format"
        ],
        "partial_match": [
          "show@if_first_show",
          "orchestra",
          "orchestra@orchestra",
          "orchestra@record_company"
        ]
      }
    ]
  },
  {
    "id": 851,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "what are the major record formats of orchestras , sorted by their frequency ?",
        "db_id": "orchestra",
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "sql": "select orchestra@major_record_format from orchestra group by orchestra@major_record_format order by count ( * ) asc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "orchestra@major_record_format"
        ],
        "partial_match": [
          "orchestra",
          "orchestra@orchestra",
          "orchestra@record_company"
        ]
      }
    ]
  },
  {
    "id": 852,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "list the record company shared by the most number of orchestras .",
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the record company shared by the most number of orchestras.",
        "sql": "select orchestra@record_company from orchestra group by orchestra@record_company order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "orchestra@record_company"
        ],
        "partial_match": [
          "orchestra",
          "orchestra@orchestra",
          "orchestra@major_record_format",
          "performance@share"
        ]
      }
    ]
  },
  {
    "id": 853,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "what is the record company used by the greatest number of orchestras ?",
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the record company used by the greatest number of orchestras?",
        "sql": "select orchestra@record_company from orchestra group by orchestra@record_company order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "orchestra@record_company"
        ],
        "partial_match": [
          "orchestra",
          "orchestra@orchestra",
          "orchestra@major_record_format"
        ]
      }
    ]
  },
  {
    "id": 854,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "list the names of orchestras that have no performance .",
        "db_id": "orchestra",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "List the names of orchestras that have no performance.",
        "sql": "select orchestra@orchestra from orchestra where orchestra@orchestra_id not in ( select performance@orchestra_id from performance )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "conductor@name",
          "performance"
        ],
        "partial_match": [
          "show@performance_id",
          "orchestra",
          "orchestra@orchestra",
          "performance@performance_id"
        ]
      }
    ]
  },
  {
    "id": 855,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "what are the orchestras that do not have any performances ?",
        "db_id": "orchestra",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "What are the orchestras that do not have any performances?",
        "sql": "select orchestra@orchestra from orchestra where orchestra@orchestra_id not in ( select performance@orchestra_id from performance )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "performance"
        ],
        "partial_match": [
          "show@performance_id",
          "orchestra",
          "orchestra@orchestra",
          "performance@performance_id"
        ]
      }
    ]
  },
  {
    "id": 856,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "show the record companies shared by orchestras founded before 2003 and after 2003 .",
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "sql": "select orchestra@record_company from orchestra where orchestra@year_of_founded < 'value' intersect select orchestra@record_company from orchestra where orchestra@year_of_founded > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "show",
          "orchestra@record_company"
        ],
        "partial_match": [
          "show@if_first_show",
          "orchestra",
          "orchestra@orchestra",
          "orchestra@year_of_founded",
          "orchestra@major_record_format",
          "performance@share"
        ]
      }
    ]
  },
  {
    "id": 857,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "what are the record companies that are used by both orchestras founded before 2003 and those founded after 2003 ?",
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "sql": "select orchestra@record_company from orchestra where orchestra@year_of_founded < 'value' intersect select orchestra@record_company from orchestra where orchestra@year_of_founded > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "orchestra@record_company",
          "orchestra@year_of_founded"
        ],
        "partial_match": [
          "orchestra",
          "orchestra@orchestra",
          "orchestra@major_record_format"
        ]
      }
    ]
  },
  {
    "id": 858,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "find the number of orchestras whose record format is `` cd '' or `` dvd '' .",
        "db_id": "orchestra",
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "sql": "select count ( * ) from orchestra where orchestra@major_record_format = 'value' or orchestra@major_record_format = 'value'",
        "value_match": [
          "orchestra@major_record_format"
        ],
        "value_alignment": [
          [
            [
              "cd",
              "cd"
            ]
          ],
          [
            [
              "dvd",
              "dvd"
            ]
          ]
        ],
        "exact_match": [
          "orchestra@major_record_format"
        ],
        "partial_match": [
          "orchestra",
          "orchestra@orchestra",
          "orchestra@record_company"
        ]
      }
    ]
  },
  {
    "id": 859,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "count the number of orchestras that have cd or dvd as their record format .",
        "db_id": "orchestra",
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "sql": "select count ( * ) from orchestra where orchestra@major_record_format = 'value' or orchestra@major_record_format = 'value'",
        "value_match": [
          "orchestra@major_record_format"
        ],
        "value_alignment": [
          [
            [
              "cd",
              "cd"
            ]
          ],
          [
            [
              "dvd",
              "dvd"
            ]
          ]
        ],
        "exact_match": [
          "orchestra@major_record_format"
        ],
        "partial_match": [
          "orchestra",
          "orchestra@orchestra",
          "orchestra@record_company"
        ]
      }
    ]
  },
  {
    "id": 860,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "show the years in which orchestras that have given more than one performance are founded .",
        "db_id": "orchestra",
        "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "sql": "select orchestra@year_of_founded from orchestra join performance on orchestra@orchestra_id = performance@orchestra_id group by performance@orchestra_id having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "show",
          "orchestra@year_of_founded",
          "performance"
        ],
        "partial_match": [
          "show@performance_id",
          "show@if_first_show",
          "conductor@year_of_work",
          "orchestra",
          "orchestra@orchestra",
          "performance@performance_id"
        ]
      }
    ]
  },
  {
    "id": 861,
    "database_id": "orchestra",
    "interaction": [
      {
        "utterance": "what are years of founding for orchestras that have had more than a single performance ?",
        "db_id": "orchestra",
        "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "sql": "select orchestra@year_of_founded from orchestra join performance on orchestra@orchestra_id = performance@orchestra_id group by performance@orchestra_id having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "orchestra@year_of_founded",
          "performance"
        ],
        "partial_match": [
          "show@performance_id",
          "conductor@year_of_work",
          "orchestra",
          "orchestra@orchestra",
          "performance@performance_id"
        ]
      }
    ]
  },
  {
    "id": 862,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "how many high schoolers are there ?",
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Highschooler",
        "question": "How many high schoolers are there?",
        "sql": "select count ( * ) from highschooler",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 863,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "count the number of high schoolers .",
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Highschooler",
        "question": "Count the number of high schoolers.",
        "sql": "select count ( * ) from highschooler",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 864,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "show the names and grades of each high schooler .",
        "db_id": "network_1",
        "query": "SELECT name ,  grade FROM Highschooler",
        "question": "Show the names and grades of each high schooler.",
        "sql": "select highschooler@name , highschooler@grade from highschooler",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@name",
          "highschooler@grade"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 865,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "what are the names and grades for each high schooler ?",
        "db_id": "network_1",
        "query": "SELECT name ,  grade FROM Highschooler",
        "question": "What are the names and grades for each high schooler?",
        "sql": "select highschooler@name , highschooler@grade from highschooler",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@name",
          "highschooler@grade"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 866,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "show all the grades of the high schoolers .",
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler",
        "question": "Show all the grades of the high schoolers.",
        "sql": "select highschooler@grade from highschooler",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@grade"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 867,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "what is the grade of each high schooler ?",
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler",
        "question": "What is the grade of each high schooler?",
        "sql": "select highschooler@grade from highschooler",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@grade"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 868,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "what grade is kyle in ?",
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "What grade is Kyle in?",
        "sql": "select highschooler@grade from highschooler where highschooler@name = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler@grade"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 869,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "return the grade for the high schooler named kyle .",
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "Return the grade for the high schooler named Kyle.",
        "sql": "select highschooler@grade from highschooler where highschooler@name = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@name",
          "highschooler@grade"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 870,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "show the names of all high schoolers in grade 10 .",
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade  =  10",
        "question": "Show the names of all high schoolers in grade 10.",
        "sql": "select highschooler@name from highschooler where highschooler@grade = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@name",
          "highschooler@grade"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 871,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "what are the names of all high schoolers in grade 10 ?",
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade  =  10",
        "question": "What are the names of all high schoolers in grade 10?",
        "sql": "select highschooler@name from highschooler where highschooler@grade = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@name",
          "highschooler@grade"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 872,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "show the id of the high schooler named kyle .",
        "db_id": "network_1",
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "Show the ID of the high schooler named Kyle.",
        "sql": "select highschooler@id from highschooler where highschooler@name = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 873,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "what is kyle 's id ?",
        "db_id": "network_1",
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "What is Kyle's id?",
        "sql": "select highschooler@id from highschooler where highschooler@name = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [],
        "partial_match": []
      }
    ]
  },
  {
    "id": 874,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "how many high schoolers are there in grade 9 or 10 ?",
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "How many high schoolers are there in grade 9 or 10?",
        "sql": "select count ( * ) from highschooler where highschooler@grade = 'value' or highschooler@grade = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@grade"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 875,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "count the number of high schoolers in grades 9 or 10 .",
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "sql": "select count ( * ) from highschooler where highschooler@grade = 'value' or highschooler@grade = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@grade"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 876,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "show the number of high schoolers for each grade .",
        "db_id": "network_1",
        "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "question": "Show the number of high schoolers for each grade.",
        "sql": "select highschooler@grade , count ( * ) from highschooler group by highschooler@grade",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@grade"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 877,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "how many high schoolers are in each grade ?",
        "db_id": "network_1",
        "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "question": "How many high schoolers are in each grade?",
        "sql": "select highschooler@grade , count ( * ) from highschooler group by highschooler@grade",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@grade"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 878,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "which grade has the most high schoolers ?",
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "question": "Which grade has the most high schoolers?",
        "sql": "select highschooler@grade from highschooler group by highschooler@grade order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@grade"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 879,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "return the grade that has the greatest number of high schoolers .",
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the grade that has the greatest number of high schoolers.",
        "sql": "select highschooler@grade from highschooler group by highschooler@grade order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@grade"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 880,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "show me all grades that have at least 4 students .",
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Show me all grades that have at least 4 students.",
        "sql": "select highschooler@grade from highschooler group by highschooler@grade having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler@grade"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 881,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "which grades have 4 or more high schoolers ?",
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Which grades have 4 or more high schoolers?",
        "sql": "select highschooler@grade from highschooler group by highschooler@grade having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@grade"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 882,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "show the student ids and numbers of friends corresponding to each .",
        "db_id": "network_1",
        "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "sql": "select friend@student_id , count ( * ) from friend group by friend@student_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 883,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "how many friends does each student have ?",
        "db_id": "network_1",
        "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "question": "How many friends does each student have?",
        "sql": "select friend@student_id , count ( * ) from friend group by friend@student_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 884,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "show the names of high school students and their corresponding number of friends .",
        "db_id": "network_1",
        "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "Show the names of high school students and their corresponding number of friends.",
        "sql": "select highschooler@name , count ( * ) from friend join highschooler on friend@student_id = highschooler@id group by friend@student_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@name",
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 885,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "what are the names of the high schoolers and how many friends does each have ?",
        "db_id": "network_1",
        "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "sql": "select highschooler@name , count ( * ) from friend join highschooler on friend@student_id = highschooler@id group by friend@student_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@name",
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 886,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "what is the name of the high schooler who has the greatest number of friends ?",
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "sql": "select highschooler@name from friend join highschooler on friend@student_id = highschooler@id group by friend@student_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@name",
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 887,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "return the name of the high school student with the most friends .",
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name of the high school student with the most friends.",
        "sql": "select highschooler@name from friend join highschooler on friend@student_id = highschooler@id group by friend@student_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@name",
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 888,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "show the names of high schoolers who have at least 3 friends .",
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "sql": "select highschooler@name from friend join highschooler on friend@student_id = highschooler@id group by friend@student_id having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@name",
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 889,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "what are the names of high schoolers who have 3 or more friends ?",
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "sql": "select highschooler@name from friend join highschooler on friend@student_id = highschooler@id group by friend@student_id having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@name",
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 890,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "show the names of all of the high schooler kyle 's friends .",
        "db_id": "network_1",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "sql": "select highschooler@name from friend join highschooler on friend@student_id = highschooler@id join highschooler on friend@friend_id = highschooler@id where highschooler@name = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@name",
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 891,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "return the names of friends of the high school student kyle .",
        "db_id": "network_1",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "question": "Return the names of friends of the high school student Kyle.",
        "sql": "select highschooler@name from friend join highschooler on friend@student_id = highschooler@id join highschooler on friend@friend_id = highschooler@id where highschooler@name = 'value'",
        "value_match": [
          "highschooler@name"
        ],
        "value_alignment": [
          [
            [
              "kyle",
              "kyle"
            ]
          ]
        ],
        "exact_match": [
          "highschooler",
          "highschooler@name",
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 892,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "how many friends does the high school student kyle have ?",
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "How many friends does the high school student Kyle have?",
        "sql": "select count ( * ) from friend join highschooler on friend@student_id = highschooler@id where highschooler@name = 'value'",
        "value_match": [
          "highschooler@name"
        ],
        "value_alignment": [
          [
            [
              "kyle",
              "kyle"
            ]
          ]
        ],
        "exact_match": [
          "highschooler",
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 893,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "count the number of friends kyle has .",
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "Count the number of friends Kyle has.",
        "sql": "select count ( * ) from friend join highschooler on friend@student_id = highschooler@id where highschooler@name = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 894,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "show ids of all students who do not have any friends .",
        "db_id": "network_1",
        "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "question": "Show ids of all students who do not have any friends.",
        "sql": "select highschooler@id from highschooler except select friend@student_id from friend",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 895,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "what are the ids of high school students who do not have friends ?",
        "db_id": "network_1",
        "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "question": "What are the ids of high school students who do not have friends?",
        "sql": "select highschooler@id from highschooler except select friend@student_id from friend",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 896,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "show names of all high school students who do not have any friends .",
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "question": "Show names of all high school students who do not have any friends.",
        "sql": "select highschooler@name from highschooler except select highschooler@name from friend join highschooler on friend@student_id = highschooler@id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@name",
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 897,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "what are the names of students who have no friends ?",
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "question": "What are the names of students who have no friends?",
        "sql": "select highschooler@name from highschooler except select highschooler@name from friend join highschooler on friend@student_id = highschooler@id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler@name",
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 898,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "show the ids of high schoolers who have friends and are also liked by someone else .",
        "db_id": "network_1",
        "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "sql": "select friend@student_id from friend intersect select likes@liked_id from likes",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "friend"
        ],
        "partial_match": [
          "likes",
          "likes@liked_id",
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 899,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "what are the ids of students who both have friends and are liked ?",
        "db_id": "network_1",
        "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "question": "What are the ids of students who both have friends and are liked?",
        "sql": "select friend@student_id from friend intersect select likes@liked_id from likes",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "friend"
        ],
        "partial_match": [
          "likes",
          "likes@liked_id",
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 900,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "show name of all students who have some friends and also are liked by someone else .",
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "sql": "select highschooler@name from friend join highschooler on likes@student_id = highschooler@id intersect select highschooler@name from likes join highschooler on likes@liked_id = highschooler@id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler@name",
          "friend"
        ],
        "partial_match": [
          "likes",
          "likes@liked_id",
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 901,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "what are the names of high schoolers who both have friends and are liked ?",
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "sql": "select highschooler@name from friend join highschooler on likes@student_id = highschooler@id intersect select highschooler@name from likes join highschooler on likes@liked_id = highschooler@id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@name",
          "friend"
        ],
        "partial_match": [
          "likes",
          "likes@liked_id",
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 902,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "count the number of likes for each student id .",
        "db_id": "network_1",
        "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "question": "Count the number of likes for each student id.",
        "sql": "select likes@student_id , count ( * ) from likes group by likes@student_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "likes"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 903,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "how many likes correspond to each student id ?",
        "db_id": "network_1",
        "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "question": "How many likes correspond to each student id?",
        "sql": "select likes@student_id , count ( * ) from likes group by likes@student_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "likes"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 904,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "show the names of high schoolers who have likes , and numbers of likes for each .",
        "db_id": "network_1",
        "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "sql": "select highschooler@name , count ( * ) from likes join highschooler on likes@student_id = highschooler@id group by likes@student_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "likes",
          "highschooler",
          "highschooler@name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 905,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "what are the names of high schoolers who have likes , and how many likes does each have ?",
        "db_id": "network_1",
        "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "sql": "select highschooler@name , count ( * ) from likes join highschooler on likes@student_id = highschooler@id group by likes@student_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "likes",
          "highschooler",
          "highschooler@name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 906,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "what is the name of the high schooler who has the greatest number of likes ?",
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "sql": "select highschooler@name from likes join highschooler on likes@student_id = highschooler@id group by likes@student_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "likes",
          "highschooler",
          "highschooler@name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 907,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "give the name of the student with the most likes .",
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the name of the student with the most likes.",
        "sql": "select highschooler@name from likes join highschooler on likes@student_id = highschooler@id group by likes@student_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "likes",
          "highschooler@name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 908,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "show the names of students who have at least 2 likes .",
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "Show the names of students who have at least 2 likes.",
        "sql": "select highschooler@name from likes join highschooler on likes@student_id = highschooler@id group by likes@student_id having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "likes",
          "highschooler@name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 909,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "what are the names of students who have 2 or more likes ?",
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "What are the names of students who have 2 or more likes?",
        "sql": "select highschooler@name from likes join highschooler on likes@student_id = highschooler@id group by likes@student_id having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "likes",
          "highschooler@name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 910,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "show the names of students who have a grade higher than 5 and have at least 2 friends .",
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "sql": "select highschooler@name from friend join highschooler on friend@student_id = highschooler@id where highschooler@grade > 'value' group by friend@student_id having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler@name",
          "highschooler@grade",
          "friend"
        ],
        "partial_match": [
          "highschooler",
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 911,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "what are the names of high schoolers who have a grade of over 5 and have 2 or more friends ?",
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "sql": "select highschooler@name from friend join highschooler on friend@student_id = highschooler@id where highschooler@grade > 'value' group by friend@student_id having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler",
          "highschooler@name",
          "highschooler@grade",
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 912,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "how many likes does kyle have ?",
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "How many likes does Kyle have?",
        "sql": "select count ( * ) from likes join highschooler on likes@student_id = highschooler@id where highschooler@name = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "likes"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 913,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "return the number of likes that the high schooler named kyle has .",
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "sql": "select count ( * ) from likes join highschooler on likes@student_id = highschooler@id where highschooler@name = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "likes",
          "highschooler",
          "highschooler@name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 914,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "find the average grade of all students who have some friends .",
        "db_id": "network_1",
        "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "Find the average grade of all students who have some friends.",
        "sql": "select avg ( highschooler@grade ) from highschooler where highschooler@id in ( select friend@student_id from friend join highschooler on friend@student_id = highschooler@id )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler@grade",
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 915,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "what is the average grade of students who have friends ?",
        "db_id": "network_1",
        "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "What is the average grade of students who have friends?",
        "sql": "select avg ( highschooler@grade ) from highschooler where highschooler@id in ( select friend@student_id from friend join highschooler on friend@student_id = highschooler@id )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler@grade",
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 916,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "find the minimum grade of students who have no friends .",
        "db_id": "network_1",
        "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "Find the minimum grade of students who have no friends.",
        "sql": "select min ( highschooler@grade ) from highschooler where highschooler@id not in ( select friend@student_id from friend join highschooler on friend@student_id = highschooler@id )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler@grade",
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 917,
    "database_id": "network_1",
    "interaction": [
      {
        "utterance": "what is the lowest grade of students who do not have any friends ?",
        "db_id": "network_1",
        "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "What is the lowest grade of students who do not have any friends?",
        "sql": "select min ( highschooler@grade ) from highschooler where highschooler@id not in ( select friend@student_id from friend join highschooler on friend@student_id = highschooler@id )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "highschooler@grade",
          "friend"
        ],
        "partial_match": [
          "friend@friend_id"
        ]
      }
    ]
  },
  {
    "id": 918,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "which states have both owners and professionals living there ?",
        "db_id": "dog_kennels",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Which states have both owners and professionals living there?",
        "sql": "select owners@state from owners intersect select professionals@state from professionals",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "owners",
          "professionals"
        ],
        "partial_match": [
          "treatments@professional_id",
          "owners@owner_id",
          "owners@state",
          "dogs@owner_id",
          "professionals@professional_id",
          "professionals@state"
        ]
      }
    ]
  },
  {
    "id": 919,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "find the states where both owners and professionals live .",
        "db_id": "dog_kennels",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Find the states where both owners and professionals live.",
        "sql": "select owners@state from owners intersect select professionals@state from professionals",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "owners",
          "professionals"
        ],
        "partial_match": [
          "treatments@professional_id",
          "owners@owner_id",
          "owners@state",
          "dogs@owner_id",
          "professionals@professional_id",
          "professionals@state"
        ]
      }
    ]
  },
  {
    "id": 920,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what is the average age of the dogs who have gone through any treatments ?",
        "db_id": "dog_kennels",
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "sql": "select avg ( dogs@age ) from dogs where dogs@dog_id in ( select treatments@dog_id from treatments )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "dogs",
          "dogs@age"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description"
        ]
      }
    ]
  },
  {
    "id": 921,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "find the average age of the dogs who went through treatments .",
        "db_id": "dog_kennels",
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "Find the average age of the dogs who went through treatments.",
        "sql": "select avg ( dogs@age ) from dogs where dogs@dog_id in ( select treatments@dog_id from treatments )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "dogs",
          "dogs@age"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description"
        ]
      }
    ]
  },
  {
    "id": 922,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "which professionals live in the state of indiana or have done treatment on more than 2 treatments ? list his or her id , last name and cell phone .",
        "db_id": "dog_kennels",
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "sql": "select professionals@professional_id , professionals@last_name , professionals@cell_number from professionals where professionals@state = 'value' union select professionals@professional_id , professionals@last_name , professionals@cell_number from professionals join treatments on professionals@professional_id = treatments@professional_id group by professionals@professional_id having count ( * ) > 'value'",
        "value_match": [
          "professionals@state",
          "owners@state"
        ],
        "value_alignment": [
          [
            [
              "indiana",
              "indiana"
            ]
          ]
        ],
        "exact_match": [
          "treatments",
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "owners@last_name",
          "dogs@name",
          "professionals",
          "professionals@last_name"
        ],
        "partial_match": [
          "treatments@professional_id",
          "breeds@breed_name",
          "owners@first_name",
          "owners@state",
          "owners@home_phone",
          "owners@cell_number",
          "professionals@professional_id",
          "professionals@first_name",
          "professionals@state",
          "professionals@home_phone",
          "professionals@cell_number"
        ]
      }
    ]
  },
  {
    "id": 923,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "find the id , last name and cell phone of the professionals who live in the state of indiana or have performed more than two treatments .",
        "db_id": "dog_kennels",
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "sql": "select professionals@professional_id , professionals@last_name , professionals@cell_number from professionals where professionals@state = 'value' union select professionals@professional_id , professionals@last_name , professionals@cell_number from professionals join treatments on professionals@professional_id = treatments@professional_id group by professionals@professional_id having count ( * ) > 'value'",
        "value_match": [
          "professionals@state",
          "owners@state"
        ],
        "value_alignment": [
          [
            [
              "indiana",
              "indiana"
            ]
          ]
        ],
        "exact_match": [
          "treatments",
          "owners@last_name",
          "dogs@name",
          "professionals",
          "professionals@last_name"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@professional_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "breeds@breed_name",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "owners@first_name",
          "owners@state",
          "owners@home_phone",
          "owners@cell_number",
          "professionals@professional_id",
          "professionals@first_name",
          "professionals@state",
          "professionals@home_phone",
          "professionals@cell_number"
        ]
      }
    ]
  },
  {
    "id": 924,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "which dogs have not cost their owner more than 1000 for treatment ? list the dog names .",
        "db_id": "dog_kennels",
        "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "sql": "select dogs@name from dogs where dogs@dog_id not in ( select treatments@dog_id from treatments group by treatments@dog_id having sum ( treatments@cost_of_treatment ) > 'value' )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@cost_of_treatment",
          "owners",
          "dogs",
          "dogs@name"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "breeds@breed_name",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "owners@owner_id",
          "owners@first_name",
          "owners@last_name",
          "dogs@owner_id",
          "professionals@first_name",
          "professionals@last_name"
        ]
      }
    ]
  },
  {
    "id": 925,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "db_id": "dog_kennels",
        "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "sql": "select dogs@name from dogs where dogs@dog_id not in ( select treatments@dog_id from treatments group by treatments@dog_id having sum ( treatments@cost_of_treatment ) > 'value' )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "owners",
          "dogs",
          "dogs@name"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "breeds@breed_name",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "owners@owner_id",
          "owners@first_name",
          "owners@last_name",
          "dogs@owner_id",
          "professionals@first_name",
          "professionals@last_name"
        ]
      }
    ]
  },
  {
    "id": 926,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "which first names are used for professionals or owners but are not used as dog names ?",
        "db_id": "dog_kennels",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "sql": "select professionals@first_name from professionals union select owners@first_name from owners except select dogs@name from dogs",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "breeds@breed_name",
          "owners",
          "owners@first_name",
          "owners@last_name",
          "dogs",
          "dogs@name",
          "professionals",
          "professionals@first_name",
          "professionals@last_name"
        ],
        "partial_match": [
          "treatments@professional_id",
          "owners@owner_id",
          "dogs@owner_id",
          "professionals@professional_id"
        ]
      }
    ]
  },
  {
    "id": 927,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "find the first names that are used for professionals or owners but are not used as dog names .",
        "db_id": "dog_kennels",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "sql": "select professionals@first_name from professionals union select owners@first_name from owners except select dogs@name from dogs",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "breeds@breed_name",
          "owners",
          "owners@first_name",
          "owners@last_name",
          "dogs",
          "dogs@name",
          "professionals",
          "professionals@first_name",
          "professionals@last_name"
        ],
        "partial_match": [
          "treatments@professional_id",
          "owners@owner_id",
          "dogs@owner_id",
          "professionals@professional_id"
        ]
      }
    ]
  },
  {
    "id": 928,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "which professional did not operate any treatment on dogs ? list the professional 's id , role and email .",
        "db_id": "dog_kennels",
        "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "sql": "select professionals@professional_id , professionals@role_code , professionals@email_address from professionals except select professionals@professional_id , professionals@role_code , professionals@email_address from professionals join treatments on professionals@professional_id = treatments@professional_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@professional_id",
          "dogs",
          "professionals",
          "professionals@professional_id"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "owners@email_address",
          "professionals@role_code",
          "professionals@email_address"
        ]
      }
    ]
  },
  {
    "id": 929,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "give me the id , role and email of the professionals who did not perform any treatment on dogs .",
        "db_id": "dog_kennels",
        "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "sql": "select professionals@professional_id , professionals@role_code , professionals@email_address from professionals except select professionals@professional_id , professionals@role_code , professionals@email_address from professionals join treatments on professionals@professional_id = treatments@professional_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "dogs",
          "professionals"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@professional_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "owners@email_address",
          "professionals@professional_id",
          "professionals@role_code",
          "professionals@email_address"
        ]
      }
    ]
  },
  {
    "id": 930,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "which owner owns the most dogs ? list the owner id , first name and last name .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "sql": "select dogs@owner_id , owners@first_name , owners@last_name from dogs join owners on dogs@owner_id = owners@owner_id group by dogs@owner_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "breeds@breed_name",
          "owners",
          "owners@owner_id",
          "owners@first_name",
          "owners@last_name",
          "dogs",
          "dogs@owner_id",
          "dogs@name",
          "professionals@first_name",
          "professionals@last_name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 931,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "return the owner id , first name and last name of the owner who has the most dogs .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "sql": "select dogs@owner_id , owners@first_name , owners@last_name from dogs join owners on dogs@owner_id = owners@owner_id group by dogs@owner_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "breeds@breed_name",
          "owners",
          "owners@owner_id",
          "owners@first_name",
          "owners@last_name",
          "dogs",
          "dogs@owner_id",
          "dogs@name",
          "professionals@first_name",
          "professionals@last_name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 932,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "which professionals have done at least two treatments ? list the professional 's id , role , and first name .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "sql": "select professionals@professional_id , professionals@role_code , professionals@first_name from professionals join treatments on professionals@professional_id = treatments@professional_id group by professionals@professional_id having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@professional_id",
          "owners@first_name",
          "dogs@name",
          "professionals",
          "professionals@professional_id",
          "professionals@first_name"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "breeds@breed_name",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "owners@last_name",
          "professionals@role_code",
          "professionals@last_name"
        ]
      }
    ]
  },
  {
    "id": 933,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what are the id , role , and first name of the professionals who have performed two or more treatments ?",
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "sql": "select professionals@professional_id , professionals@role_code , professionals@first_name from professionals join treatments on professionals@professional_id = treatments@professional_id group by professionals@professional_id having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "owners@first_name",
          "dogs@name",
          "professionals",
          "professionals@first_name"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@professional_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "breeds@breed_name",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "owners@last_name",
          "professionals@professional_id",
          "professionals@role_code",
          "professionals@last_name"
        ]
      }
    ]
  },
  {
    "id": 934,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what is the name of the breed with the most dogs ?",
        "db_id": "dog_kennels",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the breed with the most dogs?",
        "sql": "select breeds@breed_name from breeds join dogs on breeds@breed_code = dogs@breed_code group by breeds@breed_name order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "breeds",
          "breeds@breed_name",
          "dogs",
          "dogs@name"
        ],
        "partial_match": [
          "breeds@breed_code",
          "owners@first_name",
          "owners@last_name",
          "dogs@breed_code",
          "professionals@first_name",
          "professionals@last_name"
        ]
      }
    ]
  },
  {
    "id": 935,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "which breed do the most dogs have ? give me the breed name .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "sql": "select breeds@breed_name from breeds join dogs on breeds@breed_code = dogs@breed_code group by breeds@breed_name order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "breeds",
          "breeds@breed_code",
          "breeds@breed_name",
          "dogs",
          "dogs@breed_code",
          "dogs@name"
        ],
        "partial_match": [
          "owners@first_name",
          "owners@last_name",
          "professionals@first_name",
          "professionals@last_name"
        ]
      }
    ]
  },
  {
    "id": 936,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "which owner has paid for the most treatments on his or her dogs ? list the owner id and last name .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "sql": "select owners@owner_id , owners@last_name from owners join dogs on owners@owner_id = dogs@owner_id join treatments on dogs@dog_id = treatments@dog_id group by owners@owner_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "owners",
          "owners@owner_id",
          "owners@last_name",
          "dogs",
          "dogs@owner_id",
          "dogs@name",
          "professionals@last_name"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "breeds@breed_name",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "owners@first_name",
          "professionals@first_name"
        ]
      }
    ]
  },
  {
    "id": 937,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "sql": "select owners@owner_id , owners@last_name from owners join dogs on owners@owner_id = dogs@owner_id join treatments on dogs@dog_id = treatments@dog_id group by owners@owner_id order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "owners",
          "owners@owner_id",
          "owners@last_name",
          "dogs",
          "dogs@owner_id",
          "dogs@name",
          "professionals@last_name"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "breeds@breed_name",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "owners@first_name",
          "professionals@first_name"
        ]
      }
    ]
  },
  {
    "id": 938,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what is the description of the treatment type that costs the least money in total ?",
        "db_id": "dog_kennels",
        "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "What is the description of the treatment type that costs the least money in total?",
        "sql": "select treatment_types@treatment_type_description from treatment_types join treatments on treatment_types@treatment_type_code = treatments@treatment_type_code group by treatment_types@treatment_type_code order by sum ( treatments@cost_of_treatment ) asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@treatment_type_code",
          "treatments@cost_of_treatment",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@date_of_treatment",
          "charges@charge_type",
          "sizes@size_description",
          "treatment_types"
        ]
      }
    ]
  },
  {
    "id": 939,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "give me the description of the treatment type whose total cost is the lowest .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "sql": "select treatment_types@treatment_type_description from treatment_types join treatments on treatment_types@treatment_type_code = treatments@treatment_type_code group by treatment_types@treatment_type_code order by sum ( treatments@cost_of_treatment ) asc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@treatment_type_code",
          "treatments@cost_of_treatment",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@date_of_treatment",
          "charges@charge_type",
          "sizes@size_description",
          "treatment_types"
        ]
      }
    ]
  },
  {
    "id": 940,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "which owner has paid the largest amount of money in total for their dogs ? show the owner id and zip code .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "sql": "select owners@owner_id , owners@zip_code from owners join dogs on owners@owner_id = dogs@owner_id join treatments on dogs@dog_id = treatments@dog_id group by owners@owner_id order by sum ( treatments@cost_of_treatment ) desc limit 1",
        "value_match": [
          "sizes@size_description"
        ],
        "value_alignment": [
          [
            [
              "large",
              "large"
            ]
          ]
        ],
        "exact_match": [
          "owners",
          "owners@owner_id",
          "dogs",
          "dogs@owner_id"
        ],
        "partial_match": [
          "treatments@treatment_type_code",
          "breeds@breed_code",
          "charges@charge_amount",
          "sizes@size_code",
          "treatment_types@treatment_type_code",
          "owners@zip_code",
          "dogs@breed_code",
          "dogs@size_code",
          "professionals@role_code",
          "professionals@zip_code"
        ]
      }
    ]
  },
  {
    "id": 941,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "find the owner id and zip code of the owner who spent the most money in total for his or her dogs .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "sql": "select owners@owner_id , owners@zip_code from owners join dogs on owners@owner_id = dogs@owner_id join treatments on dogs@dog_id = treatments@dog_id group by owners@owner_id order by sum ( treatments@cost_of_treatment ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "owners",
          "owners@owner_id",
          "dogs",
          "dogs@owner_id"
        ],
        "partial_match": [
          "treatments@treatment_type_code",
          "breeds@breed_code",
          "sizes@size_code",
          "treatment_types@treatment_type_code",
          "owners@zip_code",
          "dogs@breed_code",
          "dogs@size_code",
          "professionals@role_code",
          "professionals@zip_code"
        ]
      }
    ]
  },
  {
    "id": 942,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "which professionals have done at least two types of treatments ? list the professional id and cell phone .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "sql": "select professionals@professional_id , professionals@cell_number from professionals join treatments on professionals@professional_id = treatments@professional_id group by professionals@professional_id having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@professional_id",
          "treatments@treatment_type_code",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "professionals",
          "professionals@professional_id"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "charges@charge_type",
          "treatment_types",
          "owners@home_phone",
          "owners@cell_number",
          "professionals@home_phone",
          "professionals@cell_number"
        ]
      }
    ]
  },
  {
    "id": 943,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "find the id and cell phone of the professionals who operate two or more types of treatments .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "sql": "select professionals@professional_id , professionals@cell_number from professionals join treatments on professionals@professional_id = treatments@professional_id group by professionals@professional_id having count ( * ) >= 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@treatment_type_code",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "professionals"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@professional_id",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "charges@charge_type",
          "treatment_types",
          "owners@home_phone",
          "owners@cell_number",
          "professionals@professional_id",
          "professionals@home_phone",
          "professionals@cell_number"
        ]
      }
    ]
  },
  {
    "id": 944,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what are the first name and last name of the professionals who have done treatment with cost below average ?",
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "sql": "select distinct professionals@first_name , professionals@last_name from professionals join treatments where treatments@cost_of_treatment < ( select avg ( treatments@cost_of_treatment ) from treatments )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@cost_of_treatment",
          "breeds@breed_name",
          "owners@first_name",
          "owners@last_name",
          "dogs@name",
          "professionals",
          "professionals@first_name",
          "professionals@last_name"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@professional_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "professionals@professional_id"
        ]
      }
    ]
  },
  {
    "id": 945,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "which professionals have operated a treatment that costs less than the average ? give me theor first names and last names .",
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "sql": "select distinct professionals@first_name , professionals@last_name from professionals join treatments where treatments@cost_of_treatment < ( select avg ( treatments@cost_of_treatment ) from treatments )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@cost_of_treatment",
          "breeds@breed_name",
          "owners@first_name",
          "owners@last_name",
          "dogs@name",
          "professionals",
          "professionals@first_name",
          "professionals@last_name"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@professional_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "professionals@professional_id"
        ]
      }
    ]
  },
  {
    "id": 946,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "list the date of each treatment , together with the first name of the professional who operated it .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "sql": "select treatments@date_of_treatment , professionals@first_name from treatments join professionals on treatments@professional_id = professionals@professional_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@date_of_treatment",
          "owners@first_name",
          "dogs@name",
          "professionals",
          "professionals@first_name"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@professional_id",
          "treatments@treatment_type_code",
          "treatments@cost_of_treatment",
          "breeds@breed_name",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "owners@last_name",
          "dogs@date_of_birth",
          "dogs@date_arrived",
          "dogs@date_adopted",
          "dogs@date_departed",
          "professionals@professional_id",
          "professionals@last_name"
        ]
      }
    ]
  },
  {
    "id": 947,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what are the date and the operating professional 's first name of each treatment ?",
        "db_id": "dog_kennels",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "What are the date and the operating professional's first name of each treatment?",
        "sql": "select treatments@date_of_treatment , professionals@first_name from treatments join professionals on treatments@professional_id = professionals@professional_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@date_of_treatment",
          "owners@first_name",
          "dogs@name",
          "professionals",
          "professionals@first_name"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@professional_id",
          "treatments@treatment_type_code",
          "treatments@cost_of_treatment",
          "breeds@breed_name",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "owners@last_name",
          "dogs@date_of_birth",
          "dogs@date_arrived",
          "dogs@date_adopted",
          "dogs@date_departed",
          "professionals@professional_id",
          "professionals@last_name"
        ]
      }
    ]
  },
  {
    "id": 948,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "list the cost of each treatment and the corresponding treatment type description .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "sql": "select treatments@cost_of_treatment , treatment_types@treatment_type_description from treatments join treatment_types on treatments@treatment_type_code = treatment_types@treatment_type_code",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description"
        ],
        "partial_match": [
          "charges@charge_type",
          "sizes@size_description"
        ]
      }
    ]
  },
  {
    "id": 949,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what are the cost and treatment type description of each treatment ?",
        "db_id": "dog_kennels",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "What are the cost and treatment type description of each treatment?",
        "sql": "select treatments@cost_of_treatment , treatment_types@treatment_type_description from treatments join treatment_types on treatments@treatment_type_code = treatment_types@treatment_type_code",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description"
        ],
        "partial_match": [
          "charges@charge_type",
          "sizes@size_description"
        ]
      }
    ]
  },
  {
    "id": 950,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "list each owner 's first name , last name , and the size of his for her dog .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "sql": "select owners@first_name , owners@last_name , dogs@size_code from owners join dogs on owners@owner_id = dogs@owner_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "breeds@breed_name",
          "sizes",
          "owners",
          "owners@first_name",
          "owners@last_name",
          "dogs",
          "dogs@name",
          "professionals@first_name",
          "professionals@last_name"
        ],
        "partial_match": [
          "owners@owner_id",
          "dogs@owner_id"
        ]
      }
    ]
  },
  {
    "id": 951,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what are each owner 's first name , last name , and the size of their dog ?",
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "sql": "select owners@first_name , owners@last_name , dogs@size_code from owners join dogs on owners@owner_id = dogs@owner_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "breeds@breed_name",
          "sizes",
          "owners",
          "owners@first_name",
          "owners@last_name",
          "dogs",
          "dogs@name",
          "professionals@first_name",
          "professionals@last_name"
        ],
        "partial_match": [
          "owners@owner_id",
          "dogs@owner_id"
        ]
      }
    ]
  },
  {
    "id": 952,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "list pairs of the owner 's first name and the dogs 's name .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List pairs of the owner's first name and the dogs's name.",
        "sql": "select owners@first_name , dogs@name from owners join dogs on owners@owner_id = dogs@owner_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "breeds@breed_name",
          "owners",
          "owners@first_name",
          "owners@last_name",
          "dogs",
          "dogs@name",
          "professionals@first_name",
          "professionals@last_name"
        ],
        "partial_match": [
          "owners@owner_id",
          "dogs@owner_id"
        ]
      }
    ]
  },
  {
    "id": 953,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what are each owner 's first name and their dogs 's name ?",
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each owner's first name and their dogs's name?",
        "sql": "select owners@first_name , dogs@name from owners join dogs on owners@owner_id = dogs@owner_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "breeds@breed_name",
          "owners",
          "owners@first_name",
          "owners@last_name",
          "dogs",
          "dogs@name",
          "professionals@first_name",
          "professionals@last_name"
        ],
        "partial_match": [
          "owners@owner_id",
          "dogs@owner_id"
        ]
      }
    ]
  },
  {
    "id": 954,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "list the names of the dogs of the rarest breed and the treatment dates of them .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "sql": "select dogs@name , treatments@date_of_treatment from dogs join treatments on dogs@dog_id = treatments@dog_id where dogs@breed_code = ( select dogs@breed_code from dogs group by dogs@breed_code order by count ( * ) asc limit 1 )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@date_of_treatment",
          "breeds",
          "breeds@breed_name",
          "dogs",
          "dogs@name"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@cost_of_treatment",
          "breeds@breed_code",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "owners@first_name",
          "owners@last_name",
          "dogs@breed_code",
          "dogs@date_of_birth",
          "dogs@date_arrived",
          "dogs@date_adopted",
          "dogs@date_departed",
          "professionals@first_name",
          "professionals@last_name"
        ]
      }
    ]
  },
  {
    "id": 955,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "which dogs are of the rarest breed ? show their names and treatment dates .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "sql": "select dogs@name , treatments@date_of_treatment from dogs join treatments on dogs@dog_id = treatments@dog_id where dogs@breed_code = ( select dogs@breed_code from dogs group by dogs@breed_code order by count ( * ) asc limit 1 )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@date_of_treatment",
          "breeds",
          "breeds@breed_name",
          "dogs",
          "dogs@name"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@cost_of_treatment",
          "breeds@breed_code",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "owners@first_name",
          "owners@last_name",
          "dogs@breed_code",
          "dogs@date_of_birth",
          "dogs@date_arrived",
          "dogs@date_adopted",
          "dogs@date_departed",
          "professionals@first_name",
          "professionals@last_name"
        ]
      }
    ]
  },
  {
    "id": 956,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "which dogs are owned by someone who lives in virginia ? list the owner 's first name and the dog 's name .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "sql": "select owners@first_name , dogs@name from owners join dogs on owners@owner_id = dogs@owner_id where owners@state = 'value'",
        "value_match": [
          "owners@state"
        ],
        "value_alignment": [
          [
            [
              "virginia",
              "virginia"
            ]
          ]
        ],
        "exact_match": [
          "breeds@breed_name",
          "owners",
          "owners@first_name",
          "owners@last_name",
          "dogs",
          "dogs@name",
          "professionals@first_name",
          "professionals@last_name"
        ],
        "partial_match": [
          "owners@owner_id",
          "dogs@owner_id"
        ]
      }
    ]
  },
  {
    "id": 957,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "find the first names of owners living in virginia and the names of dogs they own .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "sql": "select owners@first_name , dogs@name from owners join dogs on owners@owner_id = dogs@owner_id where owners@state = 'value'",
        "value_match": [
          "owners@state"
        ],
        "value_alignment": [
          [
            [
              "virginia",
              "virginia"
            ]
          ]
        ],
        "exact_match": [
          "breeds@breed_name",
          "owners",
          "owners@first_name",
          "owners@last_name",
          "dogs",
          "dogs@name",
          "professionals@first_name",
          "professionals@last_name"
        ],
        "partial_match": [
          "owners@owner_id",
          "dogs@owner_id"
        ]
      }
    ]
  },
  {
    "id": 958,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what are the arriving date and the departing date of the dogs who have gone through a treatment ?",
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "sql": "select distinct dogs@date_arrived , dogs@date_departed from dogs join treatments on dogs@dog_id = treatments@dog_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@date_of_treatment",
          "dogs",
          "dogs@date_of_birth",
          "dogs@date_arrived",
          "dogs@date_adopted",
          "dogs@date_departed"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@cost_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description"
        ]
      }
    ]
  },
  {
    "id": 959,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "find the arriving date and the departing date of the dogs that received a treatment .",
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "sql": "select distinct dogs@date_arrived , dogs@date_departed from dogs join treatments on dogs@dog_id = treatments@dog_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@date_of_treatment",
          "dogs",
          "dogs@date_of_birth",
          "dogs@date_arrived",
          "dogs@date_adopted",
          "dogs@date_departed"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@cost_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description"
        ]
      }
    ]
  },
  {
    "id": 960,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "list the last name of the owner owning the youngest dog .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "List the last name of the owner owning the youngest dog.",
        "sql": "select owners@last_name from owners join dogs on owners@owner_id = dogs@owner_id where dogs@age = ( select max ( dogs@age ) from dogs )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "owners",
          "owners@last_name",
          "dogs",
          "dogs@name",
          "professionals@last_name"
        ],
        "partial_match": [
          "breeds@breed_name",
          "owners@owner_id",
          "owners@first_name",
          "dogs@owner_id",
          "professionals@first_name"
        ]
      }
    ]
  },
  {
    "id": 961,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "who owns the youngest dog ? give me his or her last name .",
        "db_id": "dog_kennels",
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "sql": "select owners@last_name from owners join dogs on owners@owner_id = dogs@owner_id where dogs@age = ( select max ( dogs@age ) from dogs )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "owners@last_name",
          "dogs",
          "dogs@name",
          "professionals@last_name"
        ],
        "partial_match": [
          "breeds@breed_name",
          "owners@first_name",
          "professionals@first_name"
        ]
      }
    ]
  },
  {
    "id": 962,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "list the emails of the professionals who live in the state of hawaii or the state of wisconsin .",
        "db_id": "dog_kennels",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "sql": "select professionals@email_address from professionals where professionals@state = 'value' or professionals@state = 'value'",
        "value_match": [
          "professionals@state",
          "owners@state"
        ],
        "value_alignment": [
          [
            [
              "hawaii",
              "hawaii"
            ]
          ],
          [
            [
              "wisconsin",
              "wisconsin"
            ]
          ]
        ],
        "exact_match": [
          "owners@state",
          "professionals",
          "professionals@state"
        ],
        "partial_match": [
          "treatments@professional_id",
          "owners@email_address",
          "professionals@professional_id",
          "professionals@email_address"
        ]
      }
    ]
  },
  {
    "id": 963,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what are the emails of the professionals living in either the state of hawaii or the state of wisconsin ?",
        "db_id": "dog_kennels",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "sql": "select professionals@email_address from professionals where professionals@state = 'value' or professionals@state = 'value'",
        "value_match": [
          "professionals@state",
          "owners@state"
        ],
        "value_alignment": [
          [
            [
              "hawaii",
              "hawaii"
            ]
          ],
          [
            [
              "wisconsin",
              "wisconsin"
            ]
          ]
        ],
        "exact_match": [
          "owners@state",
          "professionals",
          "professionals@state"
        ],
        "partial_match": [
          "treatments@professional_id",
          "owners@email_address",
          "professionals@professional_id",
          "professionals@email_address"
        ]
      }
    ]
  },
  {
    "id": 964,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what are the arriving date and the departing date of all the dogs ?",
        "db_id": "dog_kennels",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "sql": "select dogs@date_arrived , dogs@date_departed from dogs",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments@date_of_treatment",
          "dogs",
          "dogs@date_of_birth",
          "dogs@date_arrived",
          "dogs@date_adopted",
          "dogs@date_departed"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 965,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "list the arrival date and the departure date for all the dogs .",
        "db_id": "dog_kennels",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "List the arrival date and the departure date for all the dogs.",
        "sql": "select dogs@date_arrived , dogs@date_departed from dogs",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments@date_of_treatment",
          "dogs",
          "dogs@date_of_birth",
          "dogs@date_arrived",
          "dogs@date_adopted",
          "dogs@date_departed"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 966,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "how many dogs went through any treatments ?",
        "db_id": "dog_kennels",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "How many dogs went through any treatments?",
        "sql": "select count ( distinct treatments@dog_id ) from treatments",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "dogs"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description"
        ]
      }
    ]
  },
  {
    "id": 967,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "count the number of dogs that went through a treatment .",
        "db_id": "dog_kennels",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "Count the number of dogs that went through a treatment.",
        "sql": "select count ( distinct treatments@dog_id ) from treatments",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "dogs"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "owners@cell_number",
          "professionals@cell_number"
        ]
      }
    ]
  },
  {
    "id": 968,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "how many professionals have performed any treatment to dogs ?",
        "db_id": "dog_kennels",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "How many professionals have performed any treatment to dogs?",
        "sql": "select count ( distinct treatments@professional_id ) from treatments",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "dogs",
          "professionals"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@professional_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "professionals@professional_id"
        ]
      }
    ]
  },
  {
    "id": 969,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "find the number of professionals who have ever treated dogs .",
        "db_id": "dog_kennels",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "Find the number of professionals who have ever treated dogs.",
        "sql": "select count ( distinct treatments@professional_id ) from treatments",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "dogs",
          "professionals"
        ],
        "partial_match": [
          "treatments",
          "treatments@treatment_id",
          "treatments@professional_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "owners@cell_number",
          "professionals@professional_id",
          "professionals@cell_number"
        ]
      }
    ]
  },
  {
    "id": 970,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "which professionals live in a city containing the substring 'west ' ? list his or her role , street , city and state .",
        "db_id": "dog_kennels",
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "sql": "select professionals@role_code , professionals@street , professionals@city , professionals@state from professionals where professionals@city like 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "owners@city",
          "professionals",
          "professionals@city"
        ],
        "partial_match": [
          "treatments@professional_id",
          "owners@street",
          "owners@state",
          "professionals@professional_id",
          "professionals@role_code",
          "professionals@street",
          "professionals@state"
        ]
      }
    ]
  },
  {
    "id": 971,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "find the role , street , city and state of the professionals living in a city that contains the substring 'west ' .",
        "db_id": "dog_kennels",
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "sql": "select professionals@role_code , professionals@street , professionals@city , professionals@state from professionals where professionals@city like 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "owners@city",
          "professionals",
          "professionals@city"
        ],
        "partial_match": [
          "treatments@professional_id",
          "owners@street",
          "owners@state",
          "professionals@professional_id",
          "professionals@role_code",
          "professionals@street",
          "professionals@state"
        ]
      }
    ]
  },
  {
    "id": 972,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "which owners live in the state whose name contains the substring 'north ' ? list his first name , last name and email .",
        "db_id": "dog_kennels",
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "sql": "select owners@first_name , owners@last_name , owners@email_address from owners where owners@state like 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "breeds@breed_name",
          "owners",
          "owners@first_name",
          "owners@last_name",
          "dogs@name",
          "professionals@first_name",
          "professionals@last_name"
        ],
        "partial_match": [
          "owners@owner_id",
          "owners@state",
          "owners@email_address",
          "dogs@owner_id",
          "professionals@state",
          "professionals@email_address"
        ]
      }
    ]
  },
  {
    "id": 973,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "return the first name , last name and email of the owners living in a state whose name contains the substring 'north ' .",
        "db_id": "dog_kennels",
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "sql": "select owners@first_name , owners@last_name , owners@email_address from owners where owners@state like 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "breeds@breed_name",
          "owners",
          "owners@first_name",
          "owners@last_name",
          "dogs@name",
          "professionals@first_name",
          "professionals@last_name"
        ],
        "partial_match": [
          "owners@owner_id",
          "owners@state",
          "owners@email_address",
          "dogs@owner_id",
          "professionals@state",
          "professionals@email_address"
        ]
      }
    ]
  },
  {
    "id": 974,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "how many dogs have an age below the average ?",
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "How many dogs have an age below the average?",
        "sql": "select count ( * ) from dogs where dogs@age < ( select avg ( dogs@age ) from dogs )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "dogs",
          "dogs@age"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 975,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "count the number of dogs of an age below the average .",
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "Count the number of dogs of an age below the average.",
        "sql": "select count ( * ) from dogs where dogs@age < ( select avg ( dogs@age ) from dogs )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "dogs",
          "dogs@age"
        ],
        "partial_match": [
          "owners@cell_number",
          "professionals@cell_number"
        ]
      }
    ]
  },
  {
    "id": 976,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "how much does the most recent treatment cost ?",
        "db_id": "dog_kennels",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "How much does the most recent treatment cost?",
        "sql": "select treatments@cost_of_treatment from treatments order by treatments@date_of_treatment desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@cost_of_treatment"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description"
        ]
      }
    ]
  },
  {
    "id": 977,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "show me the cost of the most recently performed treatment .",
        "db_id": "dog_kennels",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "Show me the cost of the most recently performed treatment.",
        "sql": "select treatments@cost_of_treatment from treatments order by treatments@date_of_treatment desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatments@cost_of_treatment"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description"
        ]
      }
    ]
  },
  {
    "id": 978,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "how many dogs have not gone through any treatment ?",
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "question": "How many dogs have not gone through any treatment?",
        "sql": "select count ( * ) from dogs where dogs@dog_id not in ( select treatments@dog_id from treatments )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "dogs"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description"
        ]
      }
    ]
  },
  {
    "id": 979,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "tell me the number of dogs that have not received any treatment .",
        "db_id": "dog_kennels",
        "query": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "question": "Tell me the number of dogs that have not received any treatment .",
        "sql": "select count ( * ) from dogs where dogs@dog_id not in ( select treatments@dog_id from treatments )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "dogs"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "owners@cell_number",
          "professionals@cell_number"
        ]
      }
    ]
  },
  {
    "id": 980,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "how many owners temporarily do not have any dogs ?",
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "How many owners temporarily do not have any dogs?",
        "sql": "select count ( * ) from owners where owners@owner_id not in ( select dogs@owner_id from dogs )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "owners",
          "dogs"
        ],
        "partial_match": [
          "owners@owner_id",
          "dogs@owner_id"
        ]
      }
    ]
  },
  {
    "id": 981,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "find the number of owners who do not own any dogs at this moment .",
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "sql": "select count ( * ) from owners where owners@owner_id not in ( select dogs@owner_id from dogs )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "owners",
          "dogs"
        ],
        "partial_match": [
          "owners@owner_id",
          "owners@cell_number",
          "dogs@owner_id",
          "professionals@cell_number"
        ]
      }
    ]
  },
  {
    "id": 982,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "how many professionals did not operate any treatment on dogs ?",
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "How many professionals did not operate any treatment on dogs?",
        "sql": "select count ( * ) from professionals where professionals@professional_id not in ( select treatments@professional_id from treatments )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "dogs",
          "professionals"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@professional_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "professionals@professional_id"
        ]
      }
    ]
  },
  {
    "id": 983,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "find the number of professionals who have not treated any dogs .",
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "Find the number of professionals who have not treated any dogs.",
        "sql": "select count ( * ) from professionals where professionals@professional_id not in ( select treatments@professional_id from treatments )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "dogs",
          "professionals"
        ],
        "partial_match": [
          "treatments",
          "treatments@treatment_id",
          "treatments@professional_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "owners@cell_number",
          "professionals@professional_id",
          "professionals@cell_number"
        ]
      }
    ]
  },
  {
    "id": 984,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "list the dog name , age and weight of the dogs who have been abandoned ? 1 stands for yes , and 0 stands for no .",
        "db_id": "dog_kennels",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "sql": "select dogs@name , dogs@age , dogs@weight from dogs where dogs@abandoned_yn = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "dogs",
          "dogs@name",
          "dogs@age",
          "dogs@weight"
        ],
        "partial_match": [
          "breeds@breed_name",
          "owners@first_name",
          "owners@last_name",
          "dogs@abandoned_yn",
          "professionals@first_name",
          "professionals@last_name"
        ]
      }
    ]
  },
  {
    "id": 985,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what are the dog name , age and weight of the dogs that were abandoned ? note that 1 stands for yes , and 0 stands for no in the tables .",
        "db_id": "dog_kennels",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "sql": "select dogs@name , dogs@age , dogs@weight from dogs where dogs@abandoned_yn = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "dogs",
          "dogs@name",
          "dogs@age",
          "dogs@weight"
        ],
        "partial_match": [
          "breeds@breed_name",
          "owners@first_name",
          "owners@last_name",
          "dogs@abandoned_yn",
          "professionals@first_name",
          "professionals@last_name"
        ]
      }
    ]
  },
  {
    "id": 986,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what is the average age of all the dogs ?",
        "db_id": "dog_kennels",
        "query": "SELECT avg(age) FROM Dogs",
        "question": "What is the average age of all the dogs?",
        "sql": "select avg ( dogs@age ) from dogs",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "dogs",
          "dogs@age"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 987,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "compute the average age of all the dogs .",
        "db_id": "dog_kennels",
        "query": "SELECT avg(age) FROM Dogs",
        "question": "Compute the average age of all the dogs.",
        "sql": "select avg ( dogs@age ) from dogs",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "dogs",
          "dogs@age"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 988,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what is the age of the oldest dog ?",
        "db_id": "dog_kennels",
        "query": "SELECT max(age) FROM Dogs",
        "question": "What is the age of the oldest dog?",
        "sql": "select max ( dogs@age ) from dogs",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "dogs",
          "dogs@age"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 989,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "tell me the age of the oldest dog .",
        "db_id": "dog_kennels",
        "query": "SELECT max(age) FROM Dogs",
        "question": "Tell me the age of the oldest dog.",
        "sql": "select max ( dogs@age ) from dogs",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "dogs",
          "dogs@age"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 990,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "how much does each charge type costs ? list both charge type and amount .",
        "db_id": "dog_kennels",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "sql": "select charges@charge_type , charges@charge_amount from charges",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments@treatment_type_code",
          "charges",
          "charges@charge_id",
          "charges@charge_type",
          "charges@charge_amount",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description"
        ],
        "partial_match": [
          "treatments@cost_of_treatment"
        ]
      }
    ]
  },
  {
    "id": 991,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "list each charge type and its amount .",
        "db_id": "dog_kennels",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "List each charge type and its amount.",
        "sql": "select charges@charge_type , charges@charge_amount from charges",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "charges",
          "charges@charge_type",
          "charges@charge_amount"
        ],
        "partial_match": [
          "treatments@treatment_type_code",
          "charges@charge_id",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description"
        ]
      }
    ]
  },
  {
    "id": 992,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "how much does the most expensive charge type costs ?",
        "db_id": "dog_kennels",
        "query": "SELECT max(charge_amount) FROM Charges",
        "question": "How much does the most expensive charge type costs?",
        "sql": "select max ( charges@charge_amount ) from charges",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "charges",
          "charges@charge_type"
        ],
        "partial_match": [
          "treatments@treatment_type_code",
          "treatments@cost_of_treatment",
          "charges@charge_id",
          "charges@charge_amount",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description"
        ]
      }
    ]
  },
  {
    "id": 993,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what is the charge amount of the most expensive charge type ?",
        "db_id": "dog_kennels",
        "query": "SELECT max(charge_amount) FROM Charges",
        "question": "What is the charge amount of the most expensive charge type?",
        "sql": "select max ( charges@charge_amount ) from charges",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "charges",
          "charges@charge_id",
          "charges@charge_type",
          "charges@charge_amount"
        ],
        "partial_match": [
          "treatments@treatment_type_code",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description"
        ]
      }
    ]
  },
  {
    "id": 994,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "list the email , cell phone and home phone of all the professionals .",
        "db_id": "dog_kennels",
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "question": "List the email, cell phone and home phone of all the professionals.",
        "sql": "select professionals@email_address , professionals@cell_number , professionals@home_phone from professionals",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "owners@home_phone",
          "professionals",
          "professionals@home_phone"
        ],
        "partial_match": [
          "treatments@professional_id",
          "owners@email_address",
          "owners@cell_number",
          "professionals@professional_id",
          "professionals@email_address",
          "professionals@cell_number"
        ]
      }
    ]
  },
  {
    "id": 995,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what are the email , cell phone and home phone of each professional ?",
        "db_id": "dog_kennels",
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "question": "What are the email, cell phone and home phone of each professional?",
        "sql": "select professionals@email_address , professionals@cell_number , professionals@home_phone from professionals",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "owners@home_phone",
          "professionals",
          "professionals@home_phone"
        ],
        "partial_match": [
          "treatments@professional_id",
          "owners@email_address",
          "owners@cell_number",
          "professionals@professional_id",
          "professionals@email_address",
          "professionals@cell_number"
        ]
      }
    ]
  },
  {
    "id": 996,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what are all the possible breed type and size type combinations ?",
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "What are all the possible breed type and size type combinations?",
        "sql": "select distinct dogs@breed_code , dogs@size_code from dogs",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments@treatment_type_code",
          "breeds",
          "charges@charge_type",
          "sizes",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description"
        ],
        "partial_match": [
          "breeds@breed_code",
          "breeds@breed_name",
          "dogs@breed_code"
        ]
      }
    ]
  },
  {
    "id": 997,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "find the distinct breed type and size type combinations for dogs .",
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "sql": "select distinct dogs@breed_code , dogs@size_code from dogs",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments@treatment_type_code",
          "breeds",
          "charges@charge_type",
          "sizes",
          "treatment_types@treatment_type_code",
          "treatment_types@treatment_type_description",
          "dogs"
        ],
        "partial_match": [
          "breeds@breed_code",
          "breeds@breed_name",
          "dogs@breed_code"
        ]
      }
    ]
  },
  {
    "id": 998,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "list the first name of all the professionals along with the description of the treatment they have done .",
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "sql": "select distinct professionals@first_name , treatment_types@treatment_type_description from professionals join treatments on professionals@professional_id = treatments@professional_id join treatment_types on treatments@treatment_type_code = treatment_types@treatment_type_code",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatment_types@treatment_type_description",
          "owners@first_name",
          "dogs@name",
          "professionals",
          "professionals@first_name"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@professional_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "breeds@breed_name",
          "sizes@size_description",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "owners@last_name",
          "professionals@professional_id",
          "professionals@last_name"
        ]
      }
    ]
  },
  {
    "id": 999,
    "database_id": "dog_kennels",
    "interaction": [
      {
        "utterance": "what are each professional 's first name and description of the treatment they have performed ?",
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "sql": "select distinct professionals@first_name , treatment_types@treatment_type_description from professionals join treatments on professionals@professional_id = treatments@professional_id join treatment_types on treatments@treatment_type_code = treatment_types@treatment_type_code",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "treatments",
          "treatment_types@treatment_type_description",
          "owners@first_name",
          "dogs@name",
          "professionals",
          "professionals@first_name"
        ],
        "partial_match": [
          "treatments@treatment_id",
          "treatments@professional_id",
          "treatments@treatment_type_code",
          "treatments@date_of_treatment",
          "treatments@cost_of_treatment",
          "breeds@breed_name",
          "sizes@size_description",
          "treatment_types",
          "treatment_types@treatment_type_code",
          "owners@last_name",
          "professionals@professional_id",
          "professionals@last_name"
        ]
      }
    ]
  },
  {
    "id": 1000,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "how many singers are there ?",
        "db_id": "singer",
        "query": "SELECT count(*) FROM singer",
        "question": "How many singers are there?",
        "sql": "select count ( * ) from singer",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1001,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "what is the count of singers ?",
        "db_id": "singer",
        "query": "SELECT count(*) FROM singer",
        "question": "What is the count of singers?",
        "sql": "select count ( * ) from singer",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1002,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "list the name of singers in ascending order of net worth .",
        "db_id": "singer",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "List the name of singers in ascending order of net worth.",
        "sql": "select singer@name from singer order by singer@net_worth_millions asc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@name"
        ],
        "partial_match": [
          "singer@net_worth_millions"
        ]
      }
    ]
  },
  {
    "id": 1003,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "what are the names of singers ordered by ascending net worth ?",
        "db_id": "singer",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "What are the names of singers ordered by ascending net worth?",
        "sql": "select singer@name from singer order by singer@net_worth_millions asc",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@name"
        ],
        "partial_match": [
          "singer@net_worth_millions"
        ]
      }
    ]
  },
  {
    "id": 1004,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "what are the birth year and citizenship of singers ?",
        "db_id": "singer",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth year and citizenship of singers?",
        "sql": "select singer@birth_year , singer@citizenship from singer",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@birth_year",
          "singer@citizenship"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1005,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "what are the birth years and citizenships of the singers ?",
        "db_id": "singer",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth years and citizenships of the singers?",
        "sql": "select singer@birth_year , singer@citizenship from singer",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@birth_year",
          "singer@citizenship"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1006,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "list the name of singers whose citizenship is not `` france '' .",
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "List the name of singers whose citizenship is not \"France\".",
        "sql": "select singer@name from singer where singer@citizenship != 'value'",
        "value_match": [
          "singer@citizenship"
        ],
        "value_alignment": [
          [
            [
              "france",
              "france"
            ]
          ]
        ],
        "exact_match": [
          "singer",
          "singer@name",
          "singer@citizenship"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1007,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "what are the names of the singers who are not french citizens ?",
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "What are the names of the singers who are not French citizens?",
        "sql": "select singer@name from singer where singer@citizenship != 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@name"
        ],
        "partial_match": [
          "singer@citizenship"
        ]
      }
    ]
  },
  {
    "id": 1008,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "show the name of singers whose birth year is either 1948 or 1949 ?",
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "sql": "select singer@name from singer where singer@birth_year = 'value' or singer@birth_year = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@name",
          "singer@birth_year"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1009,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "what are the names of the singers whose birth years are either 1948 or 1949 ?",
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "sql": "select singer@name from singer where singer@birth_year = 'value' or singer@birth_year = 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@name",
          "singer@birth_year"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1010,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "what is the name of the singer with the largest net worth ?",
        "db_id": "singer",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "question": "What is the name of the singer with the largest net worth?",
        "sql": "select singer@name from singer order by singer@net_worth_millions desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@name"
        ],
        "partial_match": [
          "singer@net_worth_millions"
        ]
      }
    ]
  },
  {
    "id": 1011,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "what is the name of the singer who is worth the most ?",
        "db_id": "singer",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "question": "What is the name of the singer who is worth the most?",
        "sql": "select singer@name from singer order by singer@net_worth_millions desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@name"
        ],
        "partial_match": [
          "singer@net_worth_millions"
        ]
      }
    ]
  },
  {
    "id": 1012,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "show different citizenship of singers and the number of singers of each citizenship .",
        "db_id": "singer",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "sql": "select singer@citizenship , count ( * ) from singer group by singer@citizenship",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@citizenship"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1013,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "for each citizenship , how many singers are from that country ?",
        "db_id": "singer",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "For each citizenship, how many singers are from that country?",
        "sql": "select singer@citizenship , count ( * ) from singer group by singer@citizenship",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@citizenship"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1014,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "please show the most common citizenship of singers .",
        "db_id": "singer",
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common citizenship of singers.",
        "sql": "select singer@citizenship from singer group by singer@citizenship order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@citizenship"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1015,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "what is the most common singer citizenship ?",
        "db_id": "singer",
        "query": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "question": "What is the most common singer citizenship ?",
        "sql": "select singer@citizenship from singer group by singer@citizenship order by count ( * ) desc limit 1",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@citizenship"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1016,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "show different citizenships and the maximum net worth of singers of each citizenship .",
        "db_id": "singer",
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "sql": "select singer@citizenship , max ( singer@net_worth_millions ) from singer group by singer@citizenship",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@citizenship"
        ],
        "partial_match": [
          "singer@net_worth_millions"
        ]
      }
    ]
  },
  {
    "id": 1017,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "for each citizenship , what is the maximum net worth ?",
        "db_id": "singer",
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "For each citizenship, what is the maximum net worth?",
        "sql": "select singer@citizenship , max ( singer@net_worth_millions ) from singer group by singer@citizenship",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer@citizenship"
        ],
        "partial_match": [
          "singer@net_worth_millions"
        ]
      }
    ]
  },
  {
    "id": 1018,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "show titles of songs and names of singers .",
        "db_id": "singer",
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "question": "Show titles of songs and names of singers.",
        "sql": "select song@title , singer@name from singer join song on singer@singer_id = song@singer_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "song",
          "song@title",
          "singer",
          "singer@name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1019,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "what are the song titles and singer names ?",
        "db_id": "singer",
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "question": "What are the song titles and singer names?",
        "sql": "select song@title , singer@name from singer join song on singer@singer_id = song@singer_id",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "song",
          "song@title",
          "singer",
          "singer@name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1020,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "show distinct names of singers that have songs with sales more than 300000 .",
        "db_id": "singer",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "sql": "select distinct singer@name from singer join song on singer@singer_id = song@singer_id where song@sales > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "song",
          "singer",
          "singer@name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1021,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "what are the different names of the singers that have sales more than 300000 ?",
        "db_id": "singer",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "sql": "select distinct singer@name from singer join song on singer@singer_id = song@singer_id where song@sales > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1022,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "show the names of singers that have more than one song .",
        "db_id": "singer",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "Show the names of singers that have more than one song.",
        "sql": "select singer@name from singer join song on singer@singer_id = song@singer_id group by singer@name having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "song",
          "singer",
          "singer@name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1023,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "what are the names of the singers that have more than one songs ?",
        "db_id": "singer",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "What are the names of the singers that have more than one songs?",
        "sql": "select singer@name from singer join song on singer@singer_id = song@singer_id group by singer@name having count ( * ) > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "song",
          "singer",
          "singer@name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1024,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "show the names of singers and the total sales of their songs .",
        "db_id": "singer",
        "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "Show the names of singers and the total sales of their songs.",
        "sql": "select singer@name , sum ( song@sales ) from singer join song on singer@singer_id = song@singer_id group by singer@name",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "song",
          "singer",
          "singer@name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1025,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "for each singer name , what is the total sales for their songs ?",
        "db_id": "singer",
        "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "For each singer name, what is the total sales for their songs?",
        "sql": "select singer@name , sum ( song@sales ) from singer join song on singer@singer_id = song@singer_id group by singer@name",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "song",
          "singer",
          "singer@name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1026,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "list the name of singers that do not have any song .",
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "List the name of singers that do not have any song.",
        "sql": "select singer@name from singer where singer@singer_id not in ( select song@singer_id from song )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "song",
          "singer",
          "singer@name"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1027,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "what is the sname of every sing that does not have any song ?",
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "What is the sname of every sing that does not have any song?",
        "sql": "select singer@name from singer where singer@singer_id not in ( select song@singer_id from song )",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "song"
        ],
        "partial_match": [
          "singer",
          "singer@name"
        ]
      }
    ]
  },
  {
    "id": 1028,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "show the citizenship shared by singers with birth year before 1945 and after 1955 .",
        "db_id": "singer",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "sql": "select singer@citizenship from singer where singer@birth_year < 'value' intersect select singer@citizenship from singer where singer@birth_year > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@birth_year",
          "singer@citizenship"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1029,
    "database_id": "singer",
    "interaction": [
      {
        "utterance": "what are the citizenships that are shared by singers with a birth year before 1945 and after 1955 ?",
        "db_id": "singer",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "sql": "select singer@citizenship from singer where singer@birth_year < 'value' intersect select singer@citizenship from singer where singer@birth_year > 'value'",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "singer",
          "singer@birth_year",
          "singer@citizenship"
        ],
        "partial_match": []
      }
    ]
  },
  {
    "id": 1030,
    "database_id": "real_estate_properties",
    "interaction": [
      {
        "utterance": "how many available features are there in total ?",
        "db_id": "real_estate_properties",
        "query": "SELECT count(*) FROM Other_Available_Features",
        "question": "How many available features are there in total?",
        "sql": "select count ( * ) from other_available_features",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "other_available_features"
        ],
        "partial_match": [
          "other_property_features",
          "other_property_features@feature_id",
          "other_property_features@property_feature_description",
          "ref_feature_types",
          "ref_feature_types@feature_type_code",
          "ref_feature_types@feature_type_name",
          "other_available_features@feature_id",
          "other_available_features@feature_type_code",
          "other_available_features@feature_name",
          "other_available_features@feature_description",
          "properties@apt_feature_1",
          "properties@apt_feature_2",
          "properties@apt_feature_3",
          "properties@fld_feature_1",
          "properties@fld_feature_2",
          "properties@fld_feature_3",
          "properties@hse_feature_1",
          "properties@hse_feature_2",
          "properties@hse_feature_3",
          "properties@oth_feature_1",
          "properties@oth_feature_2",
          "properties@oth_feature_3",
          "properties@shp_feature_1",
          "properties@shp_feature_2",
          "properties@shp_feature_3"
        ]
      }
    ]
  },
  {
    "id": 1031,
    "database_id": "real_estate_properties",
    "interaction": [
      {
        "utterance": "what is the feature type name of feature aircon ?",
        "db_id": "real_estate_properties",
        "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "question": "What is the feature type name of feature AirCon?",
        "sql": "select ref_feature_types@feature_type_name from other_available_features join ref_feature_types on other_available_features@feature_type_code = ref_feature_types@feature_type_code where other_available_features@feature_name = 'value'",
        "value_match": [
          "other_available_features@feature_name"
        ],
        "value_alignment": [
          [
            [
              "aircon",
              "aircon"
            ]
          ]
        ],
        "exact_match": [
          "other_property_features",
          "other_property_features@feature_id",
          "other_property_features@property_feature_description",
          "ref_feature_types",
          "ref_feature_types@feature_type_code",
          "ref_feature_types@feature_type_name",
          "other_available_features",
          "other_available_features@feature_id",
          "other_available_features@feature_type_code",
          "other_available_features@feature_name",
          "other_available_features@feature_description",
          "properties@apt_feature_1",
          "properties@apt_feature_2",
          "properties@apt_feature_3",
          "properties@fld_feature_1",
          "properties@fld_feature_2",
          "properties@fld_feature_3",
          "properties@hse_feature_1",
          "properties@hse_feature_2",
          "properties@hse_feature_3",
          "properties@oth_feature_1",
          "properties@oth_feature_2",
          "properties@oth_feature_3",
          "properties@shp_feature_1",
          "properties@shp_feature_2",
          "properties@shp_feature_3"
        ],
        "partial_match": [
          "ref_property_types",
          "ref_property_types@property_type_code",
          "ref_property_types@property_type_description",
          "properties@property_type_code",
          "properties@property_name"
        ]
      }
    ]
  },
  {
    "id": 1032,
    "database_id": "real_estate_properties",
    "interaction": [
      {
        "utterance": "show the property type descriptions of properties belonging to that code .",
        "db_id": "real_estate_properties",
        "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "sql": "select ref_property_types@property_type_description from properties join ref_property_types on properties@property_type_code = ref_property_types@property_type_code group by properties@property_type_code",
        "value_match": [],
        "value_alignment": [],
        "exact_match": [
          "other_property_features",
          "other_property_features@property_id",
          "other_property_features@property_feature_description",
          "ref_feature_types@feature_type_code",
          "ref_property_types",
          "ref_property_types@property_type_code",
          "ref_property_types@property_type_description",
          "other_available_features@feature_type_code",
          "properties",
          "properties@property_id",
          "properties@property_type_code",
          "properties@property_name",
          "properties@property_address",
          "properties@other_property_details"
        ],
        "partial_match": [
          "ref_feature_types",
          "ref_feature_types@feature_type_name",
          "other_available_features@feature_description"
        ]
      }
    ]
  },
  {
    "id": 1033,
    "database_id": "real_estate_properties",
    "interaction": [
      {
        "utterance": "what are the names of properties that are either houses or apartments with more than 1 room ?",
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "sql": "select properties@property_name from properties where properties@property_type_code = 'value' union select properties@property_name from properties where properties@property_type_code = 'value' and properties@room_count > 'value'",
        "value_match": [
          "properties@property_type_code",
          "ref_property_types@property_type_code"
        ],
        "value_alignment": [
          [
            [
              "house",
              "house"
            ]
          ],
          [
            [
              "apartment",
              "apartment"
            ]
          ]
        ],
        "exact_match": [
          "properties",
          "properties@property_name"
        ],
        "partial_match": [
          "other_property_features",
          "other_property_features@property_id",
          "other_property_features@property_feature_description",
          "ref_feature_types@feature_type_name",
          "ref_property_types",
          "ref_property_types@property_type_code",
          "ref_property_types@property_type_description",
          "other_available_features@feature_name",
          "properties@property_id",
          "properties@property_type_code",
          "properties@property_address",
          "properties@room_count",
          "properties@other_property_details"
        ]
      }
    ]
  }
]